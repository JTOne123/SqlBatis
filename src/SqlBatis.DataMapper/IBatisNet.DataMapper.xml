<?xml version="1.0"?>
<doc>
    <assembly>
        <name>SqlBatis.DataMapper</name>
    </assembly>
    <members>
        <member name="T:SqlBatis.DataMapper.Commands.DataReaderDecorator">
            <summary>
            Decorate an <see cref="T:System.Data.IDataReader"></see>
            to auto move to next ResultMap on NextResult call. 
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.#ctor(System.Data.IDataReader,SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Commands.DataReaderDecorator"/> class.
            </summary>
            <param name="dataReader">The data reader.</param>
            <param name="request">The request scope</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataReader#Close">
            <summary>
            Closes the <see cref="T:System.Data.IDataReader"></see> 0bject.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataReader#Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
            <value></value>
            <returns>The level of nesting.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataReader#GetSchemaTable">
            <summary>
            Returns a <see cref="T:System.Data.DataTable"></see> that describes the column metadata of the <see cref="T:System.Data.IDataReader"></see>.
            </summary>
            <returns>
            A <see cref="T:System.Data.DataTable"></see> that describes the column metadata.
            </returns>
            <exception cref="T:System.InvalidOperationException">The <see cref="T:System.Data.IDataReader"></see> is closed. </exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataReader#IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
            <value></value>
            <returns>true if the data reader is closed; otherwise, false.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataReader#NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns>
            true if there are more rows; otherwise, false.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataReader#Read">
            <summary>
            Advances the <see cref="T:System.Data.IDataReader"></see> to the next record.
            </summary>
            <returns>
            true if there are more rows; otherwise, false.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value></value>
            <returns>When not positioned in a valid recordset, 0; otherwise the number of columns in the current record. The default is -1.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>The value of the column.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The 8-bit unsigned integer value of the specified column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldOffset">The index within the field from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of bytes read.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <returns>
            The character value of the specified column.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, starting at the given buffer offset.
            </summary>
            <param name="i">The zero-based column ordinal.</param>
            <param name="fieldoffset">The index within the row from which to start the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferoffset">The index for buffer to start the read operation.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of characters read.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetData(System.Int32)">
            <summary>
            Gets an <see cref="T:System.Data.IDataReader"></see> to be used when the field points to more remote structured data.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            An <see cref="T:System.Data.IDataReader"></see> to be used when the field points to more remote structured data.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetDataTypeName(System.Int32)">
            <summary>
            Gets the data type information for the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The data type information for the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetDateTime(System.Int32)">
            <summary>
            Gets the date and time data value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The date and time data value of the spcified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The fixed-position numeric value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetDouble(System.Int32)">
            <summary>
            Gets the double-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The double-precision floating point number of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetFieldType(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Type"></see> information corresponding to the type of <see cref="T:System.Object"></see> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"></see>.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Type"></see> information corresponding to the type of <see cref="T:System.Object"></see> that would be returned from <see cref="M:System.Data.IDataRecord.GetValue(System.Int32)"></see>.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetFloat(System.Int32)">
            <summary>
            Gets the single-precision floating point number of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The single-precision floating point number of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The GUID value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 16-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 32-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetInt64(System.Int32)">
            <summary>
            Gets the 64-bit signed integer value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The 64-bit signed integer value of the specified field.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The name of the field or the empty string (""), if there is no value to return.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetOrdinal(System.String)">
            <summary>
            Return the index of the named field.
            </summary>
            <param name="name">The name of the field to find.</param>
            <returns>The index of the named field.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>The string value of the specified field.</returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            The <see cref="T:System.Object"></see> which will contain the field value upon return.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="i">The index of the field to find.</param>
            <returns>
            true if the specified field is set to null. Otherwise, false.
            </returns>
            <exception cref="T:System.IndexOutOfRangeException">The index passed was outside the range of 0 through <see cref="P:System.Data.IDataRecord.FieldCount"></see>. </exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#Item(System.String)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DataReaderDecorator.System#Data#IDataRecord#Item(System.Int32)">
            <summary>
            Gets the <see cref="T:System.Object"/> with the specified i.
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.Commands.DataReaderTransformer">
            <summary>
            For <see cref="T:System.Data.IDataReader"/> which don't support M.A.R.S, wraps the current <see cref="T:System.Data.IDataReader"/>
            in an <see cref="T:SqlBatis.DataMapper.Commands.InMemoryDataReader"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DataReaderTransformer.Transform(System.Data.IDataReader,SqlBatis.DataMapper.IDbProvider)">
            <summary>
             Creates a DataReaderAdapter from a <see cref="T:System.Data.IDataReader" />
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader" /> which holds the records from the Database.</param>
            <param name="dbProvider">The databse provider <see cref="T:SqlBatis.DataMapper.IDbProvider"/></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Commands.DbCommandDecorator">
            <summary>
            Decorate an <see cref="T:System.Data.IDbCommand"></see>
            to auto move to next ResultMap on ExecuteReader call. 
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.#ctor(System.Data.IDbCommand,SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Commands.DbCommandDecorator"/> class.
            </summary>
            <param name="dbCommand">The db command.</param>
            <param name="request">The request scope</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#Cancel">
            <summary>
            Attempts to cancels the execution of an <see cref="T:System.Data.IDbCommand"></see>.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#CommandText">
            <summary>
            Gets or sets the text command to run against the data source.
            </summary>
            <value></value>
            <returns>The text command to execute. The default value is an empty string ("").</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#CommandTimeout">
            <summary>
            Gets or sets the wait time before terminating the attempt to execute a command and generating an error.
            </summary>
            <value></value>
            <returns>The time (in seconds) to wait for the command to execute. The default value is 30 seconds.</returns>
            <exception cref="T:System.ArgumentException">The property value assigned is less than 0. </exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#CommandType">
            <summary>
            Indicates or specifies how the <see cref="P:System.Data.IDbCommand.CommandText"></see> property is interpreted.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Data.CommandType"></see> values. The default is Text.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#Connection">
            <summary>
            Gets or sets the <see cref="T:System.Data.IDbConnection"></see> used by this instance of the <see cref="T:System.Data.IDbCommand"></see>.
            </summary>
            <value></value>
            <returns>The connection to the data source.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#CreateParameter">
            <summary>
            Creates a new instance of an <see cref="T:System.Data.IDbDataParameter"></see> object.
            </summary>
            <returns>An IDbDataParameter object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#ExecuteNonQuery">
            <summary>
            Executes an SQL statement against the Connection object of a .NET Framework data provider, and returns the number of rows affected.
            </summary>
            <returns>The number of rows affected.</returns>
            <exception cref="T:System.InvalidOperationException">The connection does not exist.-or- The connection is not open. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#ExecuteReader(System.Data.CommandBehavior)">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText"></see> against the <see cref="P:System.Data.IDbCommand.Connection"></see>, and builds an <see cref="T:System.Data.IDataReader"></see> using one of the <see cref="T:System.Data.CommandBehavior"></see> values.
            </summary>
            <param name="behavior">One of the <see cref="T:System.Data.CommandBehavior"></see> values.</param>
            <returns>
            An <see cref="T:System.Data.IDataReader"></see> object.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#ExecuteReader">
            <summary>
            Executes the <see cref="P:System.Data.IDbCommand.CommandText"></see> against the <see cref="P:System.Data.IDbCommand.Connection"></see> and builds an <see cref="T:System.Data.IDataReader"></see>.
            </summary>
            <returns>
            An <see cref="T:System.Data.IDataReader"></see> object.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#ExecuteScalar">
            <summary>
            Executes the query, and returns the first column of the first row in the resultset returned by the query. Extra columns or rows are ignored.
            </summary>
            <returns>
            The first column of the first row in the resultset.
            </returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#Parameters">
            <summary>
            Gets the <see cref="T:System.Data.IDataParameterCollection"></see>.
            </summary>
            <value></value>
            <returns>The parameters of the SQL statement or stored procedure.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#Prepare">
            <summary>
            Creates a prepared (or compiled) version of the command on the data source.
            </summary>
            <exception cref="T:System.InvalidOperationException">The <see cref="P:System.Data.OleDb.OleDbCommand.Connection"></see> is not set.-or- The <see cref="!:System.Data.OleDb.OleDbCommand.Connection"></see> is not <see cref="!:System.Data.OleDb.OleDbConnection.Open"></see>. </exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#Transaction">
            <summary>
            Gets or sets the transaction within which the Command object of a .NET Framework data provider executes.
            </summary>
            <value></value>
            <returns>the Command object of a .NET Framework data provider executes. The default value is null.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#Data#IDbCommand#UpdatedRowSource">
            <summary>
            Gets or sets how command results are applied to the <see cref="T:System.Data.DataRow"></see> when used by the <see cref="M:System.Data.IDataAdapter.Update(System.Data.DataSet)"></see> method of a <see cref="T:System.Data.Common.DbDataAdapter"></see>.
            </summary>
            <value></value>
            <returns>One of the <see cref="T:System.Data.UpdateRowSource"></see> values. The default is Both unless the command is automatically generated. Then the default is None.</returns>
            <exception cref="T:System.ArgumentException">The value entered was not one of the <see cref="T:System.Data.UpdateRowSource"></see> values. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DbCommandDecorator.System#IDisposable#Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Commands.DefaultPreparedCommand">
            <summary>
            Summary description for DefaultPreparedCommand.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DefaultPreparedCommand.Create(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,SqlBatis.DataMapper.Configuration.Statements.IStatement,System.Object)">
            <summary>
            Create an IDbCommand for the SqlMapSession and the current SQL Statement
            and fill IDbCommand IDataParameter's with the parameterObject.
            </summary>
            <param name="request"></param>
            <param name="session">The SqlMapSession</param>
            <param name="statement">The IStatement</param>
            <param name="parameterObject">
            The parameter object that will fill the sql parameter
            </param>
            <returns>An IDbCommand with all the IDataParameter filled.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.DefaultPreparedCommand.ApplyParameterMap(SqlBatis.DataMapper.ISqlMapSession,System.Data.IDbCommand,SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.Statements.IStatement,System.Object)">
            <summary>
            Applies the parameter map.
            </summary>
            <param name="session">The session.</param>
            <param name="command">The command.</param>
            <param name="request">The request.</param>
            <param name="statement">The statement.</param>
            <param name="parameterObject">The parameter object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Commands.InMemoryDataReader">
            <summary>
            An implementation of <see cref="T:System.Data.IDataReader"/> that will copy the contents
            of the an open <see cref="T:System.Data.IDataReader"/> to an in-memory <see cref="T:SqlBatis.DataMapper.Commands.InMemoryDataReader"/> if the 
            session <see cref="T:SqlBatis.DataMapper.IDbProvider"/> doesn't allow multiple open <see cref="T:System.Data.IDataReader"/> with
            the same <see cref="T:System.Data.IDbConnection"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.#ctor(System.Data.IDataReader)">
            <summary>
             Creates an InMemoryDataReader from a <see cref="T:System.Data.IDataReader" />
            </summary>
            <param name="reader">The <see cref="T:System.Data.IDataReader" /> which holds the records from the Database.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.RecordsAffected">
            <summary>
            Gets the number of rows changed, inserted, or deleted by execution of the SQL statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.IsClosed">
            <summary>
            Gets a value indicating whether the data reader is closed.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.NextResult">
            <summary>
            Advances the data reader to the next result, when reading the results of batch SQL statements.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.Close">
            <summary>
            Closes the IDataReader 0bject.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.Read">
            <summary>
            Advances the IDataReader to the next record.
            </summary>
            <returns>true if there are more rows; otherwise, false.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.Depth">
            <summary>
            Gets a value indicating the depth of nesting for the current row.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetSchemaTable">
            <summary>
            Returns a DataTable that describes the column metadata of the IDataReader.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.Dispose">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetInt32(System.Int32)">
            <summary>
            Gets the 32-bit signed integer value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.Item(System.String)">
            <summary>
            Gets the column with the specified name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.Item(System.Int32)">
            <summary>
            Gets the column located at the specified index.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetValue(System.Int32)">
            <summary>
            Return the value of the specified field.
            </summary>
            <param name="fieldIndex">The index of the field to find. </param>
            <returns>The object which will contain the field value upon return.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.IsDBNull(System.Int32)">
            <summary>
            Return whether the specified field is set to null.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetBytes(System.Int32,System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of bytes from the specified column offset into the buffer as an array, 
            starting at the given buffer offset.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <param name="dataIndex">The index within the field from which to begin the read operation. </param>
            <param name="buffer">The buffer into which to read the stream of bytes. </param>
            <param name="bufferIndex">The index for buffer to begin the read operation.</param>
            <param name="length">The number of bytes to read. </param>
            <returns>The actual number of bytes read.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetByte(System.Int32)">
            <summary>
            Gets the 8-bit unsigned integer value of the specified column.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetFieldType(System.Int32)">
            <summary>
            Gets the Type information corresponding to the type of Object that would be returned from GetValue.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetDecimal(System.Int32)">
            <summary>
            Gets the fixed-position numeric value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetValues(System.Object[])">
            <summary>
            Gets all the attribute fields in the collection for the current record.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetName(System.Int32)">
            <summary>
            Gets the name for the field to find.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.FieldCount">
            <summary>
            Indicates the number of fields within the current record. This property is read-only.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetInt64(System.Int32)">
            <summary>
            
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetDouble(System.Int32)">
            <summary>
            
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetBoolean(System.Int32)">
            <summary>
            Gets the value of the specified column as a Boolean.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetGuid(System.Int32)">
            <summary>
            Returns the GUID value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetDateTime(System.Int32)">
            <summary>
            Returns the value of the specified column as a DateTime object.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetOrdinal(System.String)">
            <summary>
            Returns the column ordinal, given the name of the column.
            </summary>
            <param name="colName">The name of the column. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetDataTypeName(System.Int32)">
            <summary>
            Gets the database type information for the specified field.
            </summary>
            <param name="fieldIndex">The index of the field to find.</param>
            <returns>The database type information for the specified field.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetFloat(System.Int32)">
            <summary>
            Returns the value of the specified column as a single-precision floating point number.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetData(System.Int32)">
            <summary>
            Gets an IDataReader to be used when the field points to more remote structured data.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetChars(System.Int32,System.Int64,System.Char[],System.Int32,System.Int32)">
            <summary>
            Reads a stream of characters from the specified column offset into the buffer as an array, 
            starting at the given buffer offset.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <param name="dataIndex">The index within the row from which to begin the read operation.</param>
            <param name="buffer">The buffer into which to read the stream of bytes.</param>
            <param name="bufferIndex">The index for buffer to begin the read operation. </param>
            <param name="length">The number of bytes to read.</param>
            <returns>The actual number of characters read.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetString(System.Int32)">
            <summary>
            Gets the string value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetChar(System.Int32)">
            <summary>
            Gets the character value of the specified column.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.GetInt16(System.Int32)">
            <summary>
            Gets the 16-bit signed integer value of the specified field.
            </summary>
            <param name="fieldIndex">The zero-based column ordinal. </param>
            <returns>The value of the column.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.CurrentResultSet">
            <summary>
            Gets the current result set.
            </summary>
            <value>The current result set.</value>
        </member>
        <member name="T:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet">
            <summary>
            Represent an in-memory result set
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.#ctor(System.Data.IDataReader,System.Boolean)">
            <summary>
             Creates an in-memory ResultSet from a <see cref="T:System.Data.IDataReader" />
            </summary>
            <param name="isMidstream">
            <c>true</c> if the <see cref="T:System.Data.IDataReader"/> is already positioned on the record
            to start reading from.
            </param>
            <param name="reader">The <see cref="T:System.Data.IDataReader" /> which holds the records from the Database.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.FieldCount">
            <summary>
            Gets the number of columns in the current row.
            </summary>
            <value>The number of columns in the current row.</value>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.GetValue(System.Int32,System.Int32)">
            <summary>
            Get a column value in a row
            </summary>
            <param name="rowIndex">The row index</param>
            <param name="colIndex">The column index</param>
            <returns>The column value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.RecordCount">
            <summary>
            The number of record contained in the ResultSet.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.GetFieldType(System.Int32)">
            <summary>
            Gets the type of the field.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <returns>The type of the field.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.GetName(System.Int32)">
            <summary>
            Gets the name of the field.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <returns>The name of the field.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.GetOrdinal(System.String)">
            <summary>
            Gets the ordinal.
            </summary>
            <param name="colName">Name of the column.</param>
            <returns>The ordinal of the column</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.GetDataTypeName(System.Int32)">
            <summary>
            Gets the name of the database type.
            </summary>
            <param name="colIndex">Index of the col.</param>
            <returns>The name of the database type</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.InMemoryDataReader.InMemoryResultSet.GetValues(System.Int32,System.Object[])">
            <summary>
            Gets the values.
            </summary>
            <param name="rowIndex">Index of the row.</param>
            <param name="values">The values.</param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Commands.IPreparedCommand">
            <summary>
            Summary description for IPreparedCommand.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.IPreparedCommand.Create(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,SqlBatis.DataMapper.Configuration.Statements.IStatement,System.Object)">
            <summary>
            Create an IDbCommand for the SqlMapSession and the current SQL Statement
            and fill IDbCommand IDataParameter's with the parameterObject.
            </summary>
            <param name="request"></param>
            <param name="session">The SqlMapSession</param>
            <param name="statement">The IStatement</param>
            <param name="parameterObject">
            The parameter object that will fill the sql parameter
            </param>
            <returns>An IDbCommand with all the IDataParameter filled.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Commands.PreparedCommandFactory">
            <summary>
            Summary description for PreparedCommandFactory.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Commands.PreparedCommandFactory.GetPreparedCommand(System.Boolean)">
            <summary>
            Get an IPreparedCommand.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Alias.TypeAlias">
            <summary>
            TypeAlias.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Alias.TypeAlias.Name">
            <summary>
            Name used to identify the typeAlias amongst the others.
            </summary>
            <example> Account</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Alias.TypeAlias.Class">
            <summary>
            The type class for the typeAlias
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Alias.TypeAlias.ClassName">
            <summary>
            The class name to identify the typeAlias.
            </summary>
            <example>Com.Site.Domain.Product</example>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Alias.TypeAlias.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Alias.TypeAlias.#ctor(System.Type)">
            <summary>
            Constructor
            </summary>
            <param name="type">a type.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Alias.TypeAlias.Initialize">
            <summary>
            Initialize the object, 
            try to idenfify the .Net type class from the corresponding name.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Alias.TypeHandler">
            <summary>
            Summary description for TypeHandler.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Alias.TypeHandler.ClassName">
            <summary>
            CLR type
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Alias.TypeHandler.Class">
            <summary>
            The type class for the TypeName
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Alias.TypeHandler.DbType">
            <summary>
            dbType name
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Alias.TypeHandler.CallBackName">
            <summary>
            callback alias name
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Alias.TypeHandler.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Alias.TypeHandler.Initialize">
            <summary>
            Initialize the object, 
            try to idenfify the .Net type class from the corresponding name.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.CacheKey">
            <summary>
             Hash value generator for cache keys
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheKey.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheKey.#ctor(System.Int32)">
            <summary>
            Constructor that supplies an initial hashcode
            </summary>
            <param name="initialNonZeroOddNumber">the hashcode to use</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheKey.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructor that supplies an initial hashcode and multiplier
            </summary>
            <param name="initialNonZeroOddNumber">the hashcode to use</param>
            <param name="multiplierNonZeroOddNumber">the multiplier to use</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheKey.Update(System.Object)">
            <summary>
            Updates this object with new information based on an object
            </summary>
            <param name="obj">the object</param>
            <returns>the cachekey</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheKey.Equals(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheKey.GetHashCode">
            <summary>
            Get the HashCode for this CacheKey
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheKey.ToString">
            <summary>
            ToString implementation.
            </summary>
            <returns>A string that give the CacheKey HashCode.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.CacheModel">
            <summary>
            Summary description for CacheModel.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.Cache.CacheModel.NULL_OBJECT">
            <summary>
            This is used to represent null objects that are returned from the cache so 
            that they can be cached, too.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.Cache.CacheModel.NO_FLUSH_INTERVAL">
            <summary>
            Constant to turn off periodic cache flushes
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.CacheModel.Id">
            <summary>
            Identifier used to identify the CacheModel amongst the others.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.CacheModel.Implementation">
            <summary>
            Cache controller implementation name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.CacheModel.CacheController">
            <summary>
            Set the cache controller
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.CacheModel.FlushInterval">
            <summary>
            Set or get the flushInterval (in Ticks)
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.CacheModel.IsSerializable">
            <summary>
            Specifie how the cache content should be returned.
            If true a deep copy is returned.
            </summary>
            <remarks>
            Combinaison
            IsReadOnly=true/IsSerializable=false : Returned instance of cached object
            IsReadOnly=false/IsSerializable=true : Returned coopy of cached object
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.CacheModel.IsReadOnly">
            <summary>
            Determines if the cache will be used as a read-only cache.
            Tells the cache model that is allowed to pass back a reference to the object
            existing in the cache.
            </summary>
            <remarks>
            The IsReadOnly properties works in conjonction with the IsSerializable propertie.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheModel.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheModel.Initialize">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheModel.RegisterTriggerStatement(SqlBatis.DataMapper.MappedStatements.IMappedStatement)">
            <summary>
            Event listener
            </summary>
            <param name="mappedStatement">A MappedStatement on which we listen ExecuteEventArgs event.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheModel.FlushHandler(System.Object,SqlBatis.DataMapper.ExecuteEventArgs)">
            <summary>
            FlushHandler which clear the cache 
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheModel.Flush">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.CacheModel.Item(SqlBatis.DataMapper.Configuration.Cache.CacheKey)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
            <remarks>
            A side effect of this method is that is may clear the cache
            if it has not been cleared in the flushInterval.
            </remarks> 
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.CacheModel.HitRatio">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheModel.AddProperty(System.String,System.String)">
            <summary>
            Add a property
            </summary>
            <param name="name">The name of the property</param>
            <param name="value">The value of the property</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.CacheModel.GetLock(SqlBatis.DataMapper.Configuration.Cache.CacheKey)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.Fifo.FifoCacheController">
            <summary>
            Summary description for FifoCacheController.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Fifo.FifoCacheController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Fifo.FifoCacheController.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Fifo.FifoCacheController.Flush">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.Fifo.FifoCacheController.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Fifo.FifoCacheController.Configure(System.Collections.IDictionary)">
            <summary>
            Configures the cache
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.FlushInterval">
            <summary>
            Summary description for FlushInterval.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.FlushInterval.Hours">
            <summary>
            Flush interval in hours
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.FlushInterval.Minutes">
            <summary>
            Flush interval in minutes
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.FlushInterval.Seconds">
            <summary>
            Flush interval in seconds
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.FlushInterval.Milliseconds">
            <summary>
            Flush interval in milliseconds
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.FlushInterval.Interval">
            <summary>
            Get the flush interval value
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.FlushInterval.Initialize">
            <summary>
            Calcul the flush interval value in ticks
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.ICacheController">
            <summary>
            Summary description for ICacheController.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.ICacheController.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.ICacheController.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.ICacheController.Flush">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.ICacheController.Configure(System.Collections.IDictionary)">
            <summary>
            Configures the CacheController
            </summary>
            <param name="properties"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.Lru.LruCacheController">
            <summary>
            Summary description for LruCacheController.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Lru.LruCacheController.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Lru.LruCacheController.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Lru.LruCacheController.Flush">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.Lru.LruCacheController.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Lru.LruCacheController.Configure(System.Collections.IDictionary)">
            <summary>
            Configures the cache
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheControler">
            <summary>
            Summary description for MemoryCacheControler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheControler.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheControler.Remove(System.Object)">
            <summary>
            Remove an object from a cache model
            </summary>
            <param name="key">the key to the object</param>
            <returns>the removed object(?)</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheControler.Item(System.Object)">
            <summary>
            Adds an item with the specified key and value into cached data.
            Gets a cached object with the specified key.
            </summary>
            <value>The cached object or <c>null</c></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheControler.Flush">
            <summary>
            Clears all elements from the cache.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheControler.Configure(System.Collections.IDictionary)">
            <summary>
            Configures the cache
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheControler.StrongReference">
            <summary>
            Class to implement a strong (permanent) reference.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheControler.StrongReference.Target">
            <summary>
            Gets the object (the target) referenced by this instance.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel">
            <summary>
            Summary description for MemoryCacheLevel.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel.Weak">
            <summary>
            Constant for weak caching
            This cache model is probably the best choice in most cases. It will increase
            performance for popular results, but it will absolutely release the memory to
            be used in allocating other objects, assuming that the results are not currently
            in use.
            References an object while still allowing it to be garbage collected.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel.Strong">
            <summary>
            Constant for strong caching.
            This cache model will guarantee that the results stay in memory until the cache 
            is explicitly flushed. This is ideal for results that are:
            <list>
            <item>very small</item>
            <item>absolutely static</item>
            <item>used very often</item>
            </list>
            The advantage is that performance will be very good for this particular query.
            The disadvantage is that if the memory used by these results is needed, then it
            will not be released to make room for other objects (possibly more important
            objects).
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel.#ctor(System.String)">
            <summary>
            Creates a new instance of CacheLevel
            </summary>
            <param name="type">The type of the CacheLevel.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel.ReferenceType">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Cache.Memory.MemoryCacheLevel.GetByRefenceType(System.String)">
            <summary>
            
            </summary>
            <param name="referenceType"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder">
            <summary>
            Builds an ISqlMapper instance from the supplied resources (e.g. XML configuration files).
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.DATAMAPPER_NAMESPACE_PREFIX">
            <summary>
            
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.DEFAULT_FILE_CONFIG_NAME">
            <summary>
            Default filename of main configuration file.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.DEFAULT_PROVIDER_NAME">
            <summary>
            Default provider name
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.DOT">
            <summary>
            Dot representation.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_DATAMAPPER_CONFIG_ROOT">
            <summary>
            Token for SqlMapConfig xml root element.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_CONFIG_SETTINGS">
            <summary>
            Token for xml path to SqlMapConfig settings element.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.PROVIDERS_FILE_NAME">
            <summary>
            Token for default providers config file name.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_CONFIG_PROVIDERS">
            <summary>
            Token for xml path to SqlMapConfig providers element.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_PROPERTIES">
            <summary>
            Token for xml path to properties elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_PROPERTY">
            <summary>
            Token for xml path to property elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_SETTINGS_ADD">
            <summary>
            Token for xml path to settings add elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_GLOBAL_PROPERTIES">
            <summary>
            Token for xml path to global properties elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_PROVIDER">
            <summary>
            Token for xml path to provider elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_DATABASE_PROVIDER">
            <summary>
            Token for xml path to database provider elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_DATABASE_DATASOURCE">
            <summary>
            Token for xml path to database source elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_GLOBAL_TYPEALIAS">
            <summary>
            Token for xml path to global type alias elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_GLOBAL_TYPEHANDLER">
            <summary>
            Token for xml path to global type alias elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_SQLMAP">
            <summary>
            Token for xml path to sqlMap elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_MAPPING_ROOT">
            <summary>
            Token for mapping xml root.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_TYPEALIAS">
            <summary>
            Token for xml path to type alias elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_RESULTMAP">
            <summary>
            Token for xml path to resultMap elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_PARAMETERMAP">
            <summary>
            Token for xml path to parameterMap elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.SQL_STATEMENT">
            <summary>
            Token for xml path to sql elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_STATEMENT">
            <summary>
            Token for xml path to statement elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_SELECT">
            <summary>
            Token for xml path to select elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_INSERT">
            <summary>
            Token for xml path to insert elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_SELECTKEY">
            <summary>
            Token for xml path to selectKey elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_UPDATE">
            <summary>
            Token for xml path to update elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_DELETE">
            <summary>
            Token for xml path to delete elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_PROCEDURE">
            <summary>
            Token for xml path to procedure elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_CACHE_MODEL">
            <summary>
            Token for xml path to cacheModel elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_FLUSH_ON_EXECUTE">
            <summary>
            Token for xml path to flushOnExecute elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_SEARCH_STATEMENT">
            <summary>
            Token for xml path to search statement elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_SEARCH_PARAMETER">
            <summary>
            Token for xml path to search parameterMap elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.XML_SEARCH_RESULTMAP">
            <summary>
            Token for xml path to search resultMap elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ATR_USE_STATEMENT_NAMESPACES">
            <summary>
            Token for useStatementNamespaces attribute.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ATR_CACHE_MODELS_ENABLED">
            <summary>
            Token for cacheModelsEnabled attribute.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ATR_VALIDATE_SQLMAP">
            <summary>
            Token for validateSqlMap attribute.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ATR_USE_REFLECTION_OPTIMIZER">
            <summary>
            Token for useReflectionOptimizer attribute.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ATR_LAZY_FACTORY_TYPE">
            <summary>
                Lazy factory type
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Properties">
            <summary>
            Allow properties to be set before configuration.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.SetAccessorFactory">
            <summary>
            Allow a custom <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessorFactory"/> to be set before configuration.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.GetAccessorFactory">
            <summary>
            Allow a custom <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessorFactory"/> to be set before configuration.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ObjectFactory">
            <summary>
            Allow a custom <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory"/> to be set before configuration.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.SqlMapper">
            <summary>
            Allow a custom <see cref="T:SqlBatis.DataMapper.ISqlMapper"/> to be set before configuration.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ValidateSqlMapConfig">
            <summary>
            Enable validation of SqlMap document. This property must be set before configuration.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.#ctor">
            <summary>
            Constructs a DomSqlMapBuilder.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Configure">
            <summary>
            Configure a SqlMapper from default resource file named 'SqlMap.config'.
            </summary>
            <returns>An ISqlMapper instance.</returns>
            <remarks>
            The file path is relative to the application root. For ASP.Net applications
            this would be the same directory as the Web.config file. For other .Net
            applications the SqlMap.config file should be placed in the same folder
            as the executable. 
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Configure(System.Xml.XmlDocument)">
            <summary>
            Configure and returns an ISqlMapper instance.
            </summary>
            <param name="document">An xml sql map configuration document.</param>
            <returns>An ISqlMapper instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Configure(System.String)">
            <summary>
            Configure an ISqlMapper object from a file path.
            </summary>
            <param name="resource">
            A relative resource path from your Application root 
            or a absolute file path file://c:\dir\a.config
            or, for an embedded file, use embedded://Assembly.Qualified.Resource.Name, MyAssembly
            </param>
            <returns>An ISqlMapper instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Configure(System.IO.Stream)">
            <summary>
             Configure an ISqlMapper object from a stream.
            </summary>
            <param name="resource">A Stream resource.</param>
            <returns>An SqlMap</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Configure(System.IO.FileInfo)">
            <summary>
             Configure an ISqlMapper object from a FileInfo.
            </summary>
            <param name="resource">A FileInfo resource.</param>
            <returns>An ISqlMapper instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Configure(System.Uri)">
            <summary>
             Configure an ISqlMapper object from an Uri.
            </summary>
            <param name="resource">A Uri resource.</param>
            <returns>An ISqlMapper instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ConfigureAndWatch(SqlBatis.DataMapper.Utilities.ConfigureHandler)">
            <summary>
            Configure and monitor the default configuration file (SqlMap.config) for modifications 
            and automatically reconfigure SqlMap. 
            </summary>
            <returns>An ISqlMapper instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ConfigureAndWatch(System.String,SqlBatis.DataMapper.Utilities.ConfigureHandler)">
             <summary>
             Configure and monitor the configuration file for modifications 
             and automatically reconfigure the ISqlMapper instance.
             </summary>
             <param name="resource">
             A relative ressource path from your Application root 
             or an absolue file path file:\\c:\dir\a.config
             </param>
            <param name="configureDelegate">
             Delegate called when the file has changed.
             </param>
             <returns>An ISqlMapper instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ConfigureAndWatch(System.IO.FileInfo,SqlBatis.DataMapper.Utilities.ConfigureHandler)">
             <summary>
             Configure and monitor the configuration file for modifications 
             and automatically reconfigure the ISqlMapper instance.
             </summary>
             <param name="resource">
             A FileInfo to a SqlMap.config file.
             </param>
            <param name="configureDelegate">
             Delegate called when the file has changed.
             </param>
             <returns>An ISqlMapper instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.OnConfigFileChange(System.Object)">
            <summary>
            Callback called when the SqlMap.config file has changed.
            </summary>
            <param name="obj">The <see cref="T:SqlBatis.DataMapper.Utilities.StateConfig"/> object.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Build(System.Xml.XmlDocument,SqlBatis.DataMapper.DataSource,System.Boolean,System.Boolean)">
            <summary>
            Build an ISqlMapper instance.
            </summary>
            <param name="document">An xml configuration document.</param>
            <param name="dataSource">A data source.</param>
            <param name="useConfigFileWatcher"></param>
            <param name="isCallFromDao"></param>
            <returns>Returns an ISqlMapper instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ValidateSchema(System.Xml.XmlNode,System.String)">
            <summary>
            Validates an XmlNode against a schema file.
            </summary>
            <param name="section">The doc to validate.</param>
            <param name="schemaFileName">Schema file name.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Build(System.Xml.XmlDocument,SqlBatis.DataMapper.DataSource,System.Boolean,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Load statements (select, insert, update, delete), parameters, and resultMaps.
            </summary>
            <param name="document"></param>
            <param name="dataSource"></param>
            <param name="useConfigFileWatcher"></param>
            <param name="properties"></param>
            <returns></returns>
            <remarks>Used by Dao</remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Build(System.Xml.XmlDocument,System.Boolean)">
            <summary>
            Load SqlMap configuration from
            from the XmlDocument passed in parameter.
            </summary>
            <param name="document">The xml sql map configuration.</param>
            <param name="useConfigFileWatcher"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Reset">
            <summary>
            Reset PreparedStatements cache
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.Initialize">
            <summary>
            Intialize the internal ISqlMapper instance.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.GetProviders">
            <summary>
            Load and initialize providers from specified file.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ParseProvider">
            <summary>
            Parse the provider tag.
            </summary>
            <returns>A provider object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ConfigureSqlMap">
            <summary>
            Load sqlMap statement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ProcessSqlStatement(SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Process the Sql Statement
            </summary>
            <param name="statement"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ParseDynamicTags(System.Xml.XmlNode,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent,System.Text.StringBuilder,System.Boolean,System.Boolean,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Parse dynamic tags
            </summary>
            <param name="commandTextNode"></param>
            <param name="dynamic"></param>
            <param name="sqlBuffer"></param>
            <param name="isDynamic"></param>
            <param name="postParseRequired"></param>
            <param name="statement"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ApplyInlineParemeterMap(SqlBatis.DataMapper.Configuration.Statements.IStatement,System.String)">
            <summary>
            Apply inline paremeterMap
            </summary>
            <param name="statement"></param>
            <param name="sqlStatement"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ParseGlobalProperties">
            <summary>
            Initialize the list of variables defined in the
            properties file.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.GenerateCommandText(SqlBatis.DataMapper.Scope.ConfigurationScope,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Generate the command text for CRUD operation
            </summary>
            <param name="configScope"></param>
            <param name="statement"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.BuildParameterMap">
            <summary>
            Build a ParameterMap
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.BuildResultMap">
            <summary>
            Build a ResultMap
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.GetStream(System.String)">
            <summary>
            Gets a resource stream.
            </summary>
            <param name="schemaResourceKey">The schema resource key.</param>
            <returns>A resource stream.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ApplyDataMapperNamespacePrefix(System.String)">
            <summary>
            Apply the dataMapper namespace prefix
            </summary>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ApplyProviderNamespacePrefix(System.String)">
            <summary>
            Apply the provider namespace prefix
            </summary>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.DomSqlMapBuilder.ApplyMappingNamespacePrefix(System.String)">
            <summary>
            Apply the provider namespace prefix
            </summary>
            <param name="elementName"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.IDomSqlMapBuilder">
            <summary>
            Represents a builder that can configure an <see cref="T:SqlBatis.DataMapper.ISqlMapper"/> instance
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.IDomSqlMapBuilder.Properties">
            <summary>
            Allow properties to be set before configuration.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.IDomSqlMapBuilder.Configure(System.String)">
            <summary>
            Configure an ISqlMapper object from a file path.
            </summary>
            <param name="resource">
            A relative resource path from your Application root 
            or a absolute file path file:\\c:\dir\a.config
            </param>
            <returns>An ISqlMapper instance.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ParameterMapping.InlineParameterMapParser">
            <summary>
            Summary description for InlineParameterMapParser.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.InlineParameterMapParser.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.InlineParameterMapParser.ParseInlineParameterMap(SqlBatis.DataMapper.Scope.IScope,SqlBatis.DataMapper.Configuration.Statements.IStatement,System.String)">
            <summary>
            Parse Inline ParameterMap
            </summary>
            <param name="statement"></param>
            <param name="sqlStatement"></param>
            <returns>A new sql command text.</returns>
            <param name="scope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.InlineParameterMapParser.NewParseMapping(System.String,System.Type,SqlBatis.DataMapper.Scope.IScope)">
            <summary>
            Parse inline parameter with syntax as
            #propertyName,type=string,dbype=Varchar,direction=Input,nullValue=N/A,handler=string#
            </summary>
            <param name="token"></param>
            <param name="parameterClassType"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.InlineParameterMapParser.OldParseMapping(System.String,System.Type,SqlBatis.DataMapper.Scope.IScope)">
            <summary>
            Parse inline parameter with syntax as
            #propertyName:dbType:nullValue#
            </summary>
            <param name="token"></param>
            <param name="parameterClassType"></param>
            <param name="scope"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.InlineParameterMapParser.ResolveTypeHandler(SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory,System.Type,System.String,System.String,System.String)">
            <summary>
            Resolve TypeHandler
            </summary>
            <param name="parameterClassType"></param>
            <param name="propertyName"></param>
            <param name="propertyType"></param>
            <param name="dbType"></param>
            <param name="typeHandlerFactory"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap">
            <summary>
            Summary description for ParameterMap.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.XML_PARAMATER">
            <summary>
            Token for xml path to parameter elements.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.ClassName">
            <summary>
            The parameter class name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.Class">
            <summary>
            The parameter type class.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.Id">
            <summary>
            Identifier used to identify the ParameterMap amongst the others.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.Properties">
            <summary>
            The collection of ParameterProperty
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.PropertiesList">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.ExtendMap">
            <summary>
            Extend Parametermap attribute
            </summary>
            <remarks>The id of a ParameterMap</remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.#ctor(SqlBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.GetProperty(System.Int32)">
            <summary>
            Get the ParameterProperty at index.
            </summary>
            <param name="index">Index</param>
            <returns>A ParameterProperty</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.GetProperty(System.String)">
            <summary>
            Get a ParameterProperty by his name.
            </summary>
            <param name="name">The name of the ParameterProperty</param>
            <returns>A ParameterProperty</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.AddParameterProperty(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty)">
            <summary>
            Add a ParameterProperty to the ParameterProperty list.
            </summary>
            <param name="property"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.InsertParameterProperty(System.Int32,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty)">
            <summary>
            Insert a ParameterProperty ine the ParameterProperty list at the specified index..
            </summary>
            <param name="index">
            The zero-based index at which ParameterProperty should be inserted. 
            </param>
            <param name="property">The ParameterProperty to insert. </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.GetParameterIndex(System.String)">
            <summary>
            Retrieve the index for array property
            </summary>
            <param name="propertyName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.GetPropertyNameArray">
            <summary>
            Get all Parameter Property Name 
            </summary>
            <returns>A string array</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.SetParameter(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Data.IDataParameter,System.Object)">
            <summary>
            Set parameter value, replace the null value if any.
            </summary>
            <param name="mapping"></param>
            <param name="dataParameter"></param>
            <param name="parameterValue"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.SetOutputParameter(System.Object@,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Set output parameter value.
            </summary>
            <param name="mapping"></param>
            <param name="dataBaseValue"></param>
            <param name="target"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.Initialize(System.Boolean,SqlBatis.DataMapper.Scope.IScope)">
            <summary>
            Initialize the parameter properties child.
            </summary>
            <param name="scope"></param>
            <param name="usePositionalParameters"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap.BuildProperties(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Get the parameter properties child for the xmlNode parameter.
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty">
            <summary>
            Summary description for ParameterProperty.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.IsComplexMemberName">
            <summary>
            Indicate if we have a complex member name as [avouriteLineItem.Id]
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.CallBackName">
            <summary>
            Specify the custom type handlers to used.
            </summary>
            <remarks>Will be an alias to a class wchic implement ITypeHandlerCallback</remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.CLRType">
            <summary>
            Specify the CLR type of the parameter.
            </summary>
            <remarks>
            The type attribute is used to explicitly specify the property type to be read.
            Normally this can be derived from a property through reflection, but certain mappings such as
            HashTable cannot provide the type to the framework.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.TypeHandler">
            <summary>
            The typeHandler used to work with the parameter.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.ColumnName">
            <summary>
            Column Name for output parameter 
            in store proccedure.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.Size">
            <summary>
            Column size.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.Scale">
            <summary>
            Column Scale.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.Precision">
            <summary>
            Column Precision.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.DbType">
            <summary>
            Give an entry in the 'DbType' enumeration
            </summary>
            <example >
            For Sql Server, give an entry of SqlDbType : Bit, Decimal, Money...
            <br/>
            For Oracle, give an OracleType Enumeration : Byte, Int16, Number...
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.DirectionAttribute">
            <summary>
            The direction attribute of the XML parameter.
            </summary>
            <example> Input, Output, InputOutput</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.Direction">
            <summary>
            Indicate the direction of the parameter.
            </summary>
            <example> Input, Output, InputOutput</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.PropertyName">
            <summary>
            Property name used to identify the property amongst the others.
            </summary>
            <example>EmailAddress</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.HasNullValue">
            <summary>
            Tell if a nullValue is defined._nullValue!=null
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.NullValue">
            <summary>
            Null value replacement.
            </summary>
            <example>"no_email@provided.com"</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.GetAccessor">
            <summary>
            Defines a field/property get accessor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.Initialize(SqlBatis.DataMapper.Scope.IScope,System.Type)">
            <summary>
            Initializes the parameter property
            </summary>
            <param name="scope">The scope.</param>
            <param name="parameterClass">The parameter class.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>.
            </summary>
            <param name="obj">The <see cref="T:System.Object"></see> to compare with the current <see cref="T:System.Object"></see>.</param>
            <returns>
            true if the specified <see cref="T:System.Object"></see> is equal to the current <see cref="T:System.Object"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.GetHashCode">
            <summary>
            Serves as a hash function for a particular type. <see cref="M:System.Object.GetHashCode"></see> is suitable for use in hashing algorithms and data structures like a hash table.
            </summary>
            <returns>
            A hash code for the current <see cref="T:System.Object"></see>.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>An <see cref="T:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty"/></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection">
            <summary>
            A ParameterProperty Collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.Count">
            <summary>
            Read-only property describing how many elements are in the Collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.#ctor">
            <summary>
            Constructs a ParameterProperty collection. The list is initially empty and has a capacity
            of zero. Upon adding the first element to the list the capacity is
            increased to 8, and then increased in multiples of two as required.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.#ctor(System.Int32)">
            <summary>
             Constructs a ParameterPropertyCollection with a given initial capacity. 
             The list is initially empty, but will have room for the given number of elements
             before any reallocations are required.
            </summary>
            <param name="capacity">The initial capacity of the list</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.Length">
            <summary>
            Length of the collection
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.Item(System.Int32)">
            <summary>
            Sets or Gets the ParameterProperty at the given index.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.Add(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty)">
            <summary>
            Add an ParameterProperty
            </summary>
            <param name="value"></param>
            <returns>Index</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.AddRange(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty[])">
            <summary>
            Add a list of ParameterProperty to the collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.AddRange(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection)">
            <summary>
            Add a list of ParameterProperty to the collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.Contains(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty)">
            <summary>
            Indicate if a ParameterProperty is in the collection
            </summary>
            <param name="value">A ParameterProperty</param>
            <returns>True fi is in</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.Insert(System.Int32,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty)">
            <summary>
            Insert a ParameterProperty in the collection.
            </summary>
            <param name="index">Index where to insert.</param>
            <param name="value">A ParameterProperty</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.Remove(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty)">
            <summary>
            Remove a ParameterProperty of the collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a ParameterProperty at the given index. The size of the list is
            decreased by one.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterPropertyCollection.Resize(System.Int32)">
            <summary>
            Ensures that the capacity of this collection is at least the given minimum
            value. If the currect capacity of the list is less than min, the
            capacity is increased to twice the current capacity.
            </summary>
            <param name="minSize"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty">
            <summary>
            Summary description for ArgumentProperty.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty.ArgumentStrategy">
            <summary>
            Sets or gets the <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> used to fill the object property.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty.ArgumentName">
            <summary>
            Specify the constructor argument name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty.IsLazyLoad">
            <summary>
            Tell us if we must lazy load this property..
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty.MemberType">
            <summary>
            Get the argument type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty.Initialize(SqlBatis.DataMapper.Scope.ConfigurationScope,System.Reflection.ConstructorInfo)">
            <summary>
            Initialize the argument property.
            </summary>
            <param name="constructorInfo"></param>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty.ResolveTypeHandler(SqlBatis.DataMapper.Scope.ConfigurationScope,System.Type,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
            <param name="argumenType">The argument type</param>
            <param name="clrType"></param>
            <param name="dbType"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap">
            <summary>
            Implementation of <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap"/> interface for auto mapping
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.#ctor(System.Type,SqlBatis.DataMapper.Utilities.Objects.IFactory,SqlBatis.DataMapper.DataExchange.IDataExchange)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap"/> class.
            </summary>
            <param name="resultClass">The result class.</param>
            <param name="resultClassFactory">The result class factory.</param>
            <param name="dataExchange">The data exchange.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.GroupByPropertyNames">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.Properties">
            <summary>
            The collection of ResultProperty.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.GroupByProperties">
            <summary>
            The GroupBy Properties.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.Parameters">
            <summary>
            The collection of constructor parameters.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.IsInitalized">
            <summary>
            Gets or sets a value indicating whether this instance is initalized.
            </summary>
            <value>
            	<c>true</c> if this instance is initalized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.Id">
            <summary>
            Identifier used to identify the resultMap amongst the others.
            </summary>
            <value></value>
            <example>GetProduct</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.Class">
            <summary>
            The output type class of the resultMap.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.CreateInstanceOfResult(System.Object[])">
            <summary>
            Create an instance Of result.
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.SetValueOfProperty(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Set the value of an object property.
            </summary>
            <param name="target">The object to set the property.</param>
            <param name="property">The result property to use.</param>
            <param name="dataBaseValue">The database value to set.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.ResolveSubMap(System.Data.IDataReader)">
            <summary>
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap.CreateInstanceOfResultClass">
            <summary>
            Create an instance of result class.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator">
            <summary>
            Summary description for Discriminator.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator._resultMaps">
            <summary>
            (discriminatorValue (string), ResultMap)
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator._subMaps">
            <summary>
            The subMaps name who used this discriminator
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.CallBackName">
            <summary>
            Specify the custom type handlers to used.
            </summary>
            <remarks>Will be an alias to a class wchic implement ITypeHandlerCallback</remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.DbType">
            <summary>
            Give an entry in the 'DbType' enumeration
            </summary>
            <example >
            For Sql Server, give an entry of SqlDbType : Bit, Decimal, Money...
            <br/>
            For Oracle, give an OracleType Enumeration : Byte, Int16, Number...
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.CLRType">
            <summary>
            Specify the CLR type of the result.
            </summary>
            <remarks>
            The type attribute is used to explicitly specify the property type of the property to be set.
            Normally this can be derived from a property through reflection, but certain mappings such as
            HashTable cannot provide the type to the framework.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.ColumnIndex">
            <summary>
            Column Index
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.ColumnName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.NullValue">
            <summary>
            Null value replacement.
            </summary>
            <example>"no_email@provided.com"</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.ResultProperty">
            <summary>
            Th underlying ResultProperty
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.SetMapping(SqlBatis.DataMapper.Scope.ConfigurationScope,System.Type)">
            <summary>
            Initilaize the underlying mapping
            </summary>
            <param name="configScope"></param>
            <param name="resultClass"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.Initialize(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Initialize the Discriminator
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.Add(SqlBatis.DataMapper.Configuration.ResultMapping.SubMap)">
            <summary>
            Add a subMap that the discrimator must treat
            </summary>
            <param name="subMap">A subMap</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.Discriminator.GetSubMap(System.String)">
            <summary>
            Find the SubMap to use.
            </summary>
            <param name="discriminatorValue">the discriminator value</param>
            <returns>The find ResultMap</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap">
            <summary>
            This is a grouping of ResultMapping objects used to map results back to objects
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.Parameters">
            <summary>
            The collection of constructor parameters.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.Properties">
            <summary>
            The collection of ResultProperty.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.GroupByProperties">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.Id">
            <summary>
            Identifier used to identify the resultMap amongst the others.
            </summary>
            <example>GetProduct</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.GroupByPropertyNames">
            <summary>
            The GroupBy Properties name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.Class">
            <summary>
            The output type class of the resultMap.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.IsInitalized">
            <summary>
            Gets or sets a value indicating whether this instance is initalized.
            </summary>
            <value>
            	<c>true</c> if this instance is initalized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.CreateInstanceOfResult(System.Object[])">
            <summary>
            Create an instance Of result.
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <returns>An object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.SetValueOfProperty(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Set the value of an object property.
            </summary>
            <param name="target">The object to set the property.</param>
            <param name="property">The result property to use.</param>
            <param name="dataBaseValue">The database value to set.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap.ResolveSubMap(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.GroupByPropertyNames">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.GroupByProperties">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.IsInitalized">
            <summary>
            Gets or sets a value indicating whether this instance is initalized.
            </summary>
            <value>
            	<c>true</c> if this instance is initalized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.Discriminator">
            <summary>
            The discriminator used to choose the good SubMap
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.Properties">
            <summary>
            The collection of ResultProperty.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.Parameters">
            <summary>
            The collection of constructor parameters.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.Id">
            <summary>
            Identifier used to identify the resultMap amongst the others.
            </summary>
            <example>GetProduct</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.ExtendMap">
            <summary>
            Extend ResultMap attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.Class">
            <summary>
            The output type class of the resultMap.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.CreateInstanceOfResult(System.Object[])">
            <summary>
            Create an instance Of result.
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.SetValueOfProperty(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Set the value of an object property.
            </summary>
            <param name="target">The object to set the property.</param>
            <param name="property">The result property to use.</param>
            <param name="dataBaseValue">The database value to set.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.NullResultMap.ResolveSubMap(System.Data.IDataReader)">
            <summary>
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap">
            <summary>
            Main implementation of ResultMap interface
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.ANY_VISIBILITY_INSTANCE">
            <summary>
            Token for xml path to argument constructor elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.XML_RESULT">
            <summary>
            Token for xml path to result elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.XML_CONSTRUCTOR_ARGUMENT">
            <summary>
            Token for xml path to result elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.XML_DISCRIMNATOR">
            <summary>
            Token for xml path to discriminator elements.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.XML_SUBMAP">
            <summary>
            Token for xml path to subMap elements.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.GroupByPropertyNames">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.IsInitalized">
            <summary>
            Gets or sets a value indicating whether this instance is initalized.
            </summary>
            <value>
            	<c>true</c> if this instance is initalized; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.Discriminator">
            <summary>
            The discriminator used to choose the good SubMap
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.Properties">
            <summary>
            The collection of ResultProperty.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.GroupByProperties">
            <summary>
            The GroupBy Properties.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.Parameters">
            <summary>
            The collection of constructor parameters.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.Id">
            <summary>
            Identifier used to identify the resultMap amongst the others.
            </summary>
            <example>GetProduct</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.ExtendMap">
            <summary>
            Extend ResultMap attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.Class">
            <summary>
            The output type class of the resultMap.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.DataExchange">
            <summary>
            Sets the IDataExchange
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap"/> class.
            </summary>
            <param name="configScope">The config scope.</param>
            <param name="className">The output class name of the resultMap.</param>
            <param name="extendMap">The extend result map bame.</param>
            <param name="id">Identifier used to identify the resultMap amongst the others.</param>
            <param name="groupBy">The groupBy properties</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.Initialize(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Initialize the resultMap from an xmlNode..
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.InitializeGroupByProperties">
            <summary>
            Initializes the groupBy properties.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.GetChildNode(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Get the result properties and the subMap properties.
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.SetObjectFactory(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Sets the object factory.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.GetConstructor(System.Type,System.String[])">
            <summary>
            Finds the constructor that takes the parameters.
            </summary>
            <param name="type">The <see cref="T:System.Type"/> to find the constructor in.</param> 
            <param name="parametersName">The parameters name to use to find the appropriate constructor.</param>
            <returns>
            An <see cref="T:System.Reflection.ConstructorInfo"/> that can be used to create the type with 
            the specified parameters.
            </returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">
            Thrown when no constructor with the correct signature can be found.
            </exception> 
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.CreateInstanceOfResult(System.Object[])">
            <summary>
            Create an instance Of result.
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <returns>An object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.SetValueOfProperty(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Set the value of an object property.
            </summary>
            <param name="target">The object to set the property.</param>
            <param name="property">The result property to use.</param>
            <param name="dataBaseValue">The database value to set.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMap.ResolveSubMap(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection">
            <summary>
            Collection of <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap"/>
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Count">
            <summary>
            Read-only property describing how many elements are in the Collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.#ctor">
            <summary>
            Constructs a ResultMapCollection. The list is initially empty and has a capacity
            of zero. Upon adding the first element to the list the capacity is
            increased to 8, and then increased in multiples of two as required.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.#ctor(System.Int32)">
            <summary>
             Constructs a ResultMapCollection with a given initial capacity. 
             The list is initially empty, but will have room for the given number of elements
             before any reallocations are required.
            </summary>
            <param name="capacity">The initial capacity of the list</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Length">
            <summary>
            Length of the collection
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Item(System.Int32)">
            <summary>
            Sets or Gets the ResultMap at the given index.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Add(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap)">
            <summary>
            Add an ResultMap
            </summary>
            <param name="value"></param>
            <returns>Index</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.AddRange(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap[])">
            <summary>
            Add a list of ResultMap to the collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.AddRange(SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection)">
            <summary>
            Add a list of ResultMap to the collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Contains(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap)">
            <summary>
            Indicate if a ResultMap is in the collection
            </summary>
            <param name="value">A ResultMap</param>
            <returns>True fi is in</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Insert(System.Int32,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap)">
            <summary>
            Insert a ResultMap in the collection.
            </summary>
            <param name="index">Index where to insert.</param>
            <param name="value">A ResultMap</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Remove(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap)">
            <summary>
            Remove a ResultMap of the collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a ResultMap at the given index. The size of the list is
            decreased by one.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultMapCollection.Resize(System.Int32)">
            <summary>
            Ensures that the capacity of this collection is at least the given minimum
            value. If the currect capacity of the list is less than min, the
            capacity is increased to twice the current capacity.
            </summary>
            <param name="minSize"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty">
            <summary>
            Summary description for ResultProperty.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.UNKNOWN_COLUMN_INDEX">
            <summary>
            
            </summary>		
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.IsGenericIList">
            <summary>
            Tell us if the member type implement generic Ilist interface.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.IsIList">
            <summary>
            Tell us if the member type implement Ilist interface.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.ListFactory">
            <summary>
            List factory for <see cref="T:System.Collections.IList"/> property
            </summary>
            <remarks>Used by N+1 Select solution</remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.LazyFactory">
            <summary>
            The lazy loader factory
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.ArgumentStrategy">
            <summary>
            Sets or gets the <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> used to fill the object property.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.PropertyStrategy">
            <summary>
            Sets or gets the <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> used to fill the object property.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.CallBackName">
            <summary>
            Specify the custom type handlers to used.
            </summary>
            <remarks>Will be an alias to a class wchic implement ITypeHandlerCallback</remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.IsLazyLoad">
            <summary>
            Tell us if we must lazy load this property..
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.TypeHandler">
            <summary>
            The typeHandler used to work with the result property.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.DbType">
            <summary>
            Give an entry in the 'DbType' enumeration
            </summary>
            <example >
            For Sql Server, give an entry of SqlDbType : Bit, Decimal, Money...
            <br/>
            For Oracle, give an OracleType Enumeration : Byte, Int16, Number...
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.CLRType">
            <summary>
            Specify the CLR type of the result.
            </summary>
            <remarks>
            The type attribute is used to explicitly specify the property type of the property to be set.
            Normally this can be derived from a property through reflection, but certain mappings such as
            HashTable cannot provide the type to the framework.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.Select">
            <summary>
            The name of the statement to retrieve the property
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.NestedResultMapName">
            <summary>
            The name of a nested ResultMap to set the property
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.PropertyName">
            <summary>
            The property name used to identify the property amongst the others.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.SetAccessor">
            <summary>
            Defines a field/property <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor"/>
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.MemberType">
            <summary>
            Get the field/property type
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.HasNullValue">
            <summary>
            Tell if a nullValue is defined.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.NullValue">
            <summary>
            Null value replacement.
            </summary>
            <example>"no_email@provided.com"</example>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.NestedResultMap">
            <summary>
            A nested ResultMap use to set a property
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.IsComplexMemberName">
            <summary>
            Indicate if we have a complex member name as [FavouriteLineItem.Id]
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.ColumnIndex">
            <summary>
            Column Index
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.ColumnName">
            <summary>
            Column Name
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.Initialize(SqlBatis.DataMapper.Scope.ConfigurationScope,System.Type)">
            <summary>
            Initialize the PropertyInfo of the result property.
            </summary>
            <param name="resultClass"></param>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.Initialize(SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory,SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Initialize a the result property
            for AutoMapper
            </summary>
            <param name="setAccessor">An <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor"/>.</param>
            <param name="typeHandlerFactory"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.GetDataBaseValue(System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.TranslateValue(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.Clone">
            <summary>
            Clones this instance.
            </summary>
            <returns>An <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.ArrayListFactory">
            <summary>
            <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> that constructs <see cref="T:System.Collections.ArrayList"/> instance
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty.ArrayListFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>A new instance</returns>
            <remarks>
            If you call a constructor with no parameters, pass null.
            Anyway, what you pass will be ignore.
            </remarks>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection">
            <summary>
            A ResultProperty Collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Count">
            <summary>
            Read-only property describing how many elements are in the Collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.#ctor">
            <summary>
            Constructs a ResultPropertyCollection. The list is initially empty and has a capacity
            of zero. Upon adding the first element to the list the capacity is
            increased to 8, and then increased in multiples of two as required.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Clear">
            <summary>
            Removes all items from the collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.#ctor(System.Int32)">
            <summary>
             Constructs a ResultPropertyCollection with a given initial capacity. 
             The list is initially empty, but will have room for the given number of elements
             before any reallocations are required.
            </summary>
            <param name="capacity">The initial capacity of the list</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Length">
            <summary>
            Length of the collection
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Item(System.Int32)">
            <summary>
            Sets or Gets the ResultProperty at the given index.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.FindByPropertyName(System.String)">
            <summary>
            Finds a property by his name.
            </summary>
            <param name="propertyName">Name of the property.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Add(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty)">
            <summary>
            Add an ResultProperty
            </summary>
            <param name="value"></param>
            <returns>Index</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.AddRange(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty[])">
            <summary>
            Add a list of ResultProperty to the collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.AddRange(SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection)">
            <summary>
            Add a list of ResultProperty to the collection
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Contains(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty)">
            <summary>
            Indicate if a ResultProperty is in the collection
            </summary>
            <param name="value">A ResultProperty</param>
            <returns>True fi is in</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Contains(System.String)">
            <summary>
            Indicate if a ResultProperty is in the collection
            </summary>
            <param name="propertyName">A property name</param>
            <returns>True fi is in</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Insert(System.Int32,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty)">
            <summary>
            Insert a ResultProperty in the collection.
            </summary>
            <param name="index">Index where to insert.</param>
            <param name="value">A ResultProperty</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Remove(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty)">
            <summary>
            Remove a ResultProperty of the collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.RemoveAt(System.Int32)">
            <summary>
            Removes a ResultProperty at the given index. The size of the list is
            decreased by one.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection.Resize(System.Int32)">
            <summary>
            Ensures that the capacity of this collection is at least the given minimum
            value. If the currect capacity of the list is less than min, the
            capacity is increased to twice the current capacity.
            </summary>
            <param name="minSize"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.ResultMapping.SubMap">
            <summary>
            Summary description for SubMap.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.SubMap.DiscriminatorValue">
            <summary>
            Discriminator value
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.SubMap.ResultMapName">
            <summary>
            The name of the ResultMap used if the column value is = to the Discriminator Value
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.ResultMapping.SubMap.ResultMap">
            <summary>
            The resultMap used if the column value is = to the Discriminator Value
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.ResultMapping.SubMap.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.SubMap"/> class.
            </summary>
            <param name="discriminatorValue">The discriminator value.</param>
            <param name="resultMapName">Name of the result map.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.ArgumentPropertyDeSerializer">
            <summary>
            Summary description for ArgumentPropertyDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.ArgumentPropertyDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a ResultProperty object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.CacheModelDeSerializer">
            <summary>
            Summary description for CacheModelDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.CacheModelDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a CacheModel object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.DeleteDeSerializer">
            <summary>
            Summary description for DeleteDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.DeleteDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a TypeHandler object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.DeSerializerFactory">
            <summary>
            Summary description for DeSerializerFactory.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.DeSerializerFactory.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Constructor
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.DeSerializerFactory.GetDeSerializer(System.String)">
            <summary>
            
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.DiscriminatorDeSerializer">
            <summary>
            Summary description for DiscriminatorDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.DiscriminatorDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a ResultMap object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.DynamicDeSerializer">
            <summary>
            Summary description for DynamicDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.DynamicDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Constructor
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.DynamicDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IDeSerializer">
            <summary>
            Summary description for IDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.InsertDeSerializer">
            <summary>
            Summary description for InsertDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.InsertDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a TypeHandler object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsEmptyDeSerializer">
            <summary>
            Summary description for IsEmptyDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsEmptyDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsEmptyDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a IsNotNull object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsEqualDeSerializer">
            <summary>
            Summary description for IsEqualDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsEqualDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsEqualDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer">
            <summary>
            Summary description for IsGreaterEqualDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsGreaterEqualDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer">
            <summary>
            Summary description for IsGreaterThanDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsGreaterThanDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer">
            <summary>
            Summary description for IsLessEqualDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsLessEqualDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsLessThanDeSerializer">
            <summary>
            Summary description for IsLessThanDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsLessThanDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsLessThanDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer">
            <summary>
            Summary description for IsNotEmptyDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotEmptyDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a IsNotEmpty object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer">
            <summary>
            Summary description for IsNotEqualDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotEqualDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsNotNullDeSerializer">
            <summary>
            Summary description for IsNotNullDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotNullDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotNullDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a IsNotNull object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer">
            <summary>
            Summary description for IsNotParameterPresentDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotParameterPresentDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer">
            <summary>
            Summary description for IsNotPropertyAvailableDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNotPropertyAvailableDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a IsNotEmpty object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsNullDeSerializer">
            <summary>
            Summary description for IsNullDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNullDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsNullDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer">
            <summary>
            Summary description for IsParameterPresentDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsParameterPresentDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Dynamic object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer">
            <summary>
            Summary description for IsPropertyAvailableDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IsPropertyAvailableDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a IsNotEmpty object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.IterateSerializer">
            <summary>
            Summary description for IterateSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IterateSerializer.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configScope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.IterateSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
            Deserialize a Iterate object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.ParameterMapDeSerializer">
            <summary>
            Summary description for ParameterMapDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.ParameterMapDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a ParameterMap object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.ParameterPropertyDeSerializer">
            <summary>
            Summary description for ParameterPropertyDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.ParameterPropertyDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a ResultMap object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.ProcedureDeSerializer">
            <summary>
            Summary description for ProcedureDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.ProcedureDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a Procedure object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.ResultMapDeSerializer">
            <summary>
            Summary description for ResultMapDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.ResultMapDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a ResultMap object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.ResultPropertyDeSerializer">
            <summary>
            Summary description for ResultPropertyDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.ResultPropertyDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a ResultProperty object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.SelectDeSerializer">
            <summary>
            Summary description for SelectDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.SelectDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a Procedure object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.SqlDeSerializer">
            <summary>
            Summary description for ArgumentPropertyDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.SqlDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a sql tag
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.StatementDeSerializer">
            <summary>
            Summary description for StatementDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.StatementDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a Procedure object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.SubMapDeSerializer">
            <summary>
            Summary description for SubMapDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.SubMapDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a ResultMap object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.TypeAliasDeSerializer">
            <summary>
            Summary description for TypeAliasDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.TypeAliasDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a TypeAlias object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.TypeHandlerDeSerializer">
            <summary>
            Summary description for TypeHandlerDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.TypeHandlerDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a TypeHandler object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Serializers.UpdateDeSerializer">
            <summary>
            Summary description for UpdateDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Serializers.UpdateDeSerializer.Deserialize(System.Xml.XmlNode,SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Deserialize a Procedure object
            </summary>
            <param name="node"></param>
            <param name="configScope"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql">
            <summary>
            DynamicSql represent the root element of a dynamic sql statement
            </summary>
            <example>
                 <dynamic prepend="where">...</dynamic>
            </example>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql.#ctor(SqlBatis.DataMapper.Scope.ConfigurationScope,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql"/> class.
            </summary>
            <param name="configScope">The config scope.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql.AddChild(SqlBatis.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql.GetRequestScope(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
            Builds a new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/> and the <see cref="T:System.Data.IDbCommand"/> text to execute.
            </summary>
            <param name="parameterObject">The parameter object (used in DynamicSql)</param>
            <param name="session">The current session</param>
            <param name="mappedStatement">The <see cref="T:SqlBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <returns>A new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Object)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql.ProcessBodyChildren(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,System.Object,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="ctx"></param>
            <param name="parameterObject"></param>
            <param name="localChildren"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql.ProcessBodyChildren(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,System.Object,System.Collections.IEnumerator,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="request"></param>
            <param name="ctx"></param>
            <param name="parameterObject"></param>
            <param name="localChildren"></param>
            <param name="buffer"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.DynamicSql.BuildPreparedStatement(SqlBatis.DataMapper.ISqlMapSession,SqlBatis.DataMapper.Scope.RequestScope,System.String)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="request"></param>
            <param name="sqlStatement"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.BaseTag">
            <summary>
            Summary description for BaseTag.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.BaseTag.Property">
            <summary>
            Property attribute
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Conditional">
            <summary>
            Summary description for Conditional.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Conditional.CompareProperty">
            <summary>
            CompareProperty attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Conditional.CompareValue">
            <summary>
            CompareValue attribute
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Dynamic">
            <summary>
            Summary description for DynamicTag.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Dynamic.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:Dynamic"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent">
            <summary>
            Summary description for DynamicParent.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IDynamicParent.AddChild(SqlBatis.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsEmpty">
            <summary>
            Represent an isEmpty sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsEmpty.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsEmpty"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsEqual">
            <summary>
            Represent an isEqual sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsEqual.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterEqual">
            <summary>
            Represent an isGreaterEqual sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterEqual.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterThan">
            <summary>
            Represent an isGreaterThan sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterThan.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsGreaterThan"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessEqual">
            <summary>
            Represent an isLessEqual sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessEqual.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessThan">
            <summary>
            Represent an isLessThan sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessThan.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsLessThan"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEmpty">
            <summary>
            Represent an isNotEmpty sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEmpty.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEmpty"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEqual">
            <summary>
            Represent an isNotEqual sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEqual.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotEqual"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotNull">
            <summary>
            Represent an isNotNull sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotNull.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotNull"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotParameterPresent">
            <summary>
            Represent an isNotParameterPresent sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotParameterPresent.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotParameterPresent"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotPropertyAvailable">
            <summary>
            Represent an isEmpty sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotPropertyAvailable.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNotPropertyAvailable"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNull">
            <summary>
            Represent an isNull sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsNull.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsParameterPresent">
            <summary>
            Represent an isParameterPresent sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsParameterPresent.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsParameterPresent"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsPropertyAvailable">
            <summary>
            Represent an isPropertyAvailable sql tag element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsPropertyAvailable.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.IsPropertyAvailable"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Iterate">
            <summary>
            Represent an iterate sql tag element.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Iterate.Conjunction">
            <summary>
            Conjonction attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Iterate.Close">
            <summary>
            Close attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Iterate.Open">
            <summary>
            Open attribute
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Iterate.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.Iterate"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag">
            <summary>
            SqlTag is a children element of dynamic Sql element.
            SqlTag represent any binary unary/conditional element (like isEmpty, isNull, iEquall...) 
            or other element as isParameterPresent, isNotParameterPresent, iterate.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag.Parent">
            <summary>
            Parent tag element
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag.Prepend">
            <summary>
            Prepend attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag.Handler">
            <summary>
            Handler for this sql tag
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag.IsPrependAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag.GetChildrenEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag.AddChild(SqlBatis.DataMapper.Configuration.Sql.Dynamic.ISqlChild)">
            <summary>
            
            </summary>
            <param name="child"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler">
            <summary>
            Description résumée de BaseTagHandler.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.SKIP_BODY">
            <summary>
            BODY TAG
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.INCLUDE_BODY">
            <summary>
            
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.REPEAT_BODY">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.AccessorFactory">
            <summary>
            The factory which build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IAccessor"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.DoStartFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.DoEndFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.DoPrepend(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.BaseTagHandler.IsPostParseRequired">
            <summary>
            
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler">
            <summary>
            Description résumée de ConditionalTagHandler.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler.NOT_COMPARABLE">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler.DoStartFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler.DoEndFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler.Compare(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="sqlTag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler.CompareValues(System.Type,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="value1"></param>
            <param name="value2"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ConditionalTagHandler.ConvertValue(System.Type,System.String)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.DynamicTagHandler">
            <summary>
            Summary description for DynamicTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.DynamicTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.DynamicTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.DynamicTagHandler.DoStartFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEmptyTagHandler">
            <summary>
            IsEmptyTagHandler represent a isEmpty tag element in a dynamic mapped statement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEmptyTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEmptyTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEmptyTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEqualTagHandler">
            <summary>
            Summary description for IsEqualTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEqualTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEqualTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsEqualTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler">
            <summary>
            Summary description for IsGreaterEqualTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterEqualTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterThanTagHandler">
            <summary>
            Summary description for IsGreaterThanTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterThanTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterThanTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsGreaterThanTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessEqualTagHandler">
            <summary>
            Summary description for IsLessEqualTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessEqualTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessEqualTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessEqualTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessThanTagHandler">
            <summary>
            Summary description for IsLessThanTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessThanTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessThanTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsLessThanTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEmptyTagHandler">
            <summary>
            Summary description for IsNotEmptyTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEmptyTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEmptyTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEmptyTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEqualTagHandler">
            <summary>
            Summary description for IsNotEqualTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEqualTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEqualTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotEqualTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotNullTagHandler">
            <summary>
            Summary description for IsNotNullTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotNullTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotNullTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotNullTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler">
            <summary>
            Summary description for IsNotParameterPresentTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotParameterPresentTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler">
            <summary>
            Summary description for IsNotPropertyAvailableTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNotPropertyAvailableTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNullTagHandler">
            <summary>
            Summary description for IsNullTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNullTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNullTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsNullTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsParameterPresentTagHandler">
            <summary>
            Summary description for IsParameterPresentTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsParameterPresentTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsParameterPresentTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsParameterPresentTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler">
            <summary>
            Summary description for IsPropertyAvailableTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IsPropertyAvailableTagHandler.IsCondition(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler">
            <summary>
            Summary description for ISqlTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler.DoStartFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler.DoEndFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler.DoPrepend(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.ISqlTagHandler.IsPostParseRequired">
            <summary>
            
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext">
            <summary>
            Summary description for IterateContext.
            http://msdn.microsoft.com/library/default.asp?url=/library/en-us/dncscol/html/csharp01212002.asp
            http://www.microsoft.com/mspress/books/sampchap/6173.asp
            http://www.dur.ac.uk/barry.cornelius/java/a.taste.of.csharp/onefile/
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.#ctor(System.Object)">
            <summary>
            Constructor
            </summary>
            <param name="collection"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.Reset">
            <summary>
            Sets the enumerator to its initial position,
             which is before the first element in the collection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.MoveNext">
             <summary>
             Advances the enumerator to the next element of the collection.
             </summary>
             <returns>
             True if the enumerator was successfully advanced to the next element;
             False if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.Current">
            <summary>
            Gets the current element in the collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.Index">
            <summary>
            Gets the index of the current element in the collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.IsFirst">
            <summary>
            Return true if the current element is the first.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.IsLast">
            <summary>
             Return true if the current element is the last.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.Remove">
            <summary>
            Removes from the underlying collection the last element returned by the iterator. 
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateContext.HasNext">
            <summary>
            Returns true if the iteration has more elements. (In other words, returns true 
            if next would return an element rather than throwing an exception.) 
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler">
            <summary>
            Summary description for IterateTagHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler"/> class.
            </summary>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler.DoStartFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler.DoPrepend(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler.DoEndFragment(SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext,SqlBatis.DataMapper.Configuration.Sql.Dynamic.Elements.SqlTag,System.Object,System.Text.StringBuilder)">
            <summary>
            
            </summary>
            <param name="ctx"></param>
            <param name="tag"></param>
            <param name="parameterObject"></param>
            <param name="bodyContent"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler.Replace(System.Text.StringBuilder,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="buffer"></param>
            <param name="find"></param>
            <param name="replace"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.IterateTagHandler.IsPostParseRequired">
            <summary>
            
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext">
            <summary>
            Summary description for SqlTagContext.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.GetWriter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.BodyText">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.IsOverridePrepend">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.FirstNonDynamicTagWithPrepend">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.AddAttribute(System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.GetAttribute(System.Object)">
            <summary>
            
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.AddParameterMapping(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Dynamic.Handlers.SqlTagContext.GetParameterMappings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.ISqlChild">
            <summary>
            Summary description for ISqlChild.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Dynamic.SqlText">
            <summary>
            Summary description for SqlText.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.SqlText.Text">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.SqlText.IsWhiteSpace">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Sql.Dynamic.SqlText.Parameters">
            <summary>
            
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.ISql">
            <summary>
            Summary description for ISql.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.ISql.GetRequestScope(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
            Builds a new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/> and the <see cref="T:System.Data.IDbCommand"/> text to execute.
            </summary>
            <param name="parameterObject">
            The parameter object (used by DynamicSql/SimpleDynamicSql).
            Use to complete the sql statement.
            </param>
            <param name="session">The current session</param>
            <param name="mappedStatement">The <see cref="T:SqlBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <returns>A new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.SimpleDynamic.SimpleDynamicSql">
            <summary>
            Summary description for SimpleDynamicSql.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.SimpleDynamic.SimpleDynamicSql.#ctor(SqlBatis.DataMapper.Scope.IScope,System.String,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Configuration.Sql.SimpleDynamic.SimpleDynamicSql"/> class.
            </summary>
            <param name="scope">The scope.</param>
            <param name="sqlStatement">The SQL statement.</param>
            <param name="statement">The statement.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.SimpleDynamic.SimpleDynamicSql.GetSql(System.Object)">
            <summary>
            
            </summary>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.SimpleDynamic.SimpleDynamicSql.IsSimpleDynamicSql(System.String)">
            <summary>
            
            </summary>
            <param name="sqlStatement"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.SimpleDynamic.SimpleDynamicSql.ProcessDynamicElements(System.Object)">
            <summary>
            
            </summary>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.SimpleDynamic.SimpleDynamicSql.GetRequestScope(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
            Builds a new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/> and the sql command text to execute.
            </summary>
            <param name="parameterObject">The parameter object (used in DynamicSql)</param>
            <param name="session">The current session</param>
            <param name="mappedStatement">The <see cref="T:SqlBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <returns>A new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.SimpleDynamic.SimpleDynamicSql.BuildPreparedStatement(SqlBatis.DataMapper.ISqlMapSession,SqlBatis.DataMapper.Scope.RequestScope,System.String)">
            <summary>
            Build the PreparedStatement
            </summary>
            <param name="session"></param>
            <param name="request"></param>
            <param name="sqlStatement"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Static.ProcedureSql">
            <summary>
            Summary description for ProcedureSql.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Static.ProcedureSql.#ctor(SqlBatis.DataMapper.Scope.IScope,System.String,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Constructor
            </summary>
            <param name="statement">The statement.</param>
            <param name="sqlStatement"></param>
            <param name="scope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Static.ProcedureSql.GetRequestScope(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
            Builds a new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/> and the sql command text to execute.
            </summary>
            <param name="parameterObject">The parameter object (used in DynamicSql)</param>
            <param name="session">The current session</param>
            <param name="mappedStatement">The <see cref="T:SqlBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <returns>A new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Static.ProcedureSql.BuildPreparedStatement(SqlBatis.DataMapper.ISqlMapSession,SqlBatis.DataMapper.Scope.RequestScope,System.String)">
            <summary>
            Build the PreparedStatement
            </summary>
            <param name="session"></param>
            <param name="commandText"></param>
            <param name="request"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Sql.Static.StaticSql">
            <summary>
            Summary description for StaticSql.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Static.StaticSql.#ctor(SqlBatis.DataMapper.Scope.IScope,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Constructor
            </summary>
            <param name="statement">The statement.</param>
            <param name="scope"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Static.StaticSql.GetRequestScope(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
            Builds a new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/> and the sql command text to execute.
            </summary>
            <param name="parameterObject">The parameter object (used in DynamicSql)</param>
            <param name="session">The current session</param>
            <param name="mappedStatement">The <see cref="T:SqlBatis.DataMapper.MappedStatements.IMappedStatement"/>.</param>
            <returns>A new <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Sql.Static.StaticSql.BuildPreparedStatement(SqlBatis.DataMapper.ISqlMapSession,System.String)">
            <summary>
            Build the PreparedStatement
            </summary>
            <param name="session"></param>
            <param name="sqlStatement"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.Delete">
            <summary>
            Summary description for delete.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Delete.Generate">
            <summary>
            The Generate tag used by a generated delete statement.
            (CRUD operation)
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Delete.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.Generate">
            <summary>
            Represent a generate tag element.
            The generation would happen at the point where the 
            SqlMapClient instance is built.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Generate.Table">
            <summary>
            The table name used to build the SQL query. 
            </summary>
            <remarks>
            Will be used to get the metadata to build the SQL if needed.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Generate.By">
            <summary>
            The by attribute is used to generate the where clause.
            </summary>
            <remarks>The by="" attribute can support multiple colums.</remarks>
            <example> 
            	&lt; delete ...&gt;
            		&lt;generate table="EMPLOYEE" by="EMPLOYEE_ID, LAST_MOD_DATE" /&gt;
            	&lt;/delete&gt;
            </example>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Generate.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.Insert">
            <summary>
            Represent an insert statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Insert.ExtendStatement">
            <summary>
            Extend statement attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Insert.SelectKey">
            <summary>
            The selectKey statement used by an insert statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Insert.Generate">
            <summary>
            The Generate tag used by a generated insert statement.
            (CRUD operation)
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Insert.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.IStatement">
            <summary>
            Summary description for ISql.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.AllowRemapping">
            <summary>
            Allow remapping of dynamic SQL
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.Id">
            <summary>
            Identifier used to identify the statement amongst the others.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.CommandType">
            <summary>
            The type of the statement (text or procedure).
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.ExtendStatement">
            <summary>
            Extend statement attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.Sql">
            <summary>
            The sql statement to execute.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.ResultsMap">
            <summary>
            The ResultMaps used by the statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.ParameterMap">
            <summary>
            The parameterMap used by the statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.CacheModel">
            <summary>
            The CacheModel used by this statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.CacheModelName">
            <summary>
            The CacheModel name to use.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.ListClass">
            <summary>
            The list class type to use for strongly typed collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.ResultClass">
            <summary>
            The result class type to used.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.IStatement.ParameterClass">
            <summary>
            The parameter class type to used.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.IStatement.CreateInstanceOfListClass">
            <summary>
            Create an instance of 'IList' class.
            </summary>
            <returns>An object which implement IList.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.IStatement.CreateInstanceOfGenericListClass``1">
            <summary>
            Create an instance of a generic 'IList' class.
            </summary>
            <returns>An object which implement IList.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.PreparedStatement">
            <summary>
            Construct the list of IDataParameters for the statement
            and prepare the sql
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.PreparedStatement.DbParametersName">
            <summary>
            The list of IDataParameter name used by the PreparedSql.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.PreparedStatement.DbParameters">
            <summary>
            The list of IDataParameter to use for the PreparedSql.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.PreparedStatement.PreparedSql">
            <summary>
            The prepared statement.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.PreparedStatementFactory">
            <summary>
            Summary description for PreparedStatementFactory.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.PreparedStatementFactory.#ctor(SqlBatis.DataMapper.ISqlMapSession,SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.Statements.IStatement,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="session"></param>
            <param name="statement"></param>
            <param name="commandText"></param>
            <param name="request"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.PreparedStatementFactory.Prepare">
            <summary>
            Create a list of IDataParameter for the statement and build the sql string.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.PreparedStatementFactory.DiscoverParameter(SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
            For store procedure, auto discover IDataParameters for stored procedures at run-time.
            </summary>
            <param name="session">The current session.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.PreparedStatementFactory.CreateParametersForTextCommand">
            <summary>
            Create IDataParameters for command text statement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.PreparedStatementFactory.CreateParametersForProcedureCommand">
            <summary>
            Create IDataParameters for procedure statement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.PreparedStatementFactory.EvaluateParameterMap">
            <summary>
            Parse sql command text.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.Procedure">
            <summary>
            Represent a store Procedure.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Procedure.CommandType">
            <summary>
            The type of the statement StoredProcedure.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Procedure.ExtendStatement">
            <summary>
            Extend statement attribute
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Procedure.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Procedure.Initialize(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configurationScope">The scope of the configuration</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.Select">
            <summary>
            Summary description for Select.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Select.Generate">
            <summary>
            The Generate tag used by a generated select statement.
            (CRUD operation)
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Select.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.SelectKey">
            <summary>
            Represent a SelectKey tag element.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.SelectKey.ExtendStatement">
            <summary>
            Extend statement attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.SelectKey.PropertyName">
            <summary>
            The property name object to fill with the key.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.SelectKey.SelectKeyType">
            <summary>
            The type of the selectKey tag : 'Pre' or 'Post'
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.SelectKey.isAfter">
            <summary>
            True if it is a post-generated key.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.SelectKey.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.SelectKey.Initialize(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            
            </summary>
            <param name="configurationScope">The scope of the configuration</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.SqlGenerator">
            <summary>
            Summary description for SqlGenerator.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.SqlGenerator.BuildQuery(SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Creates SQL command text for a specified statement
            </summary>
            <param name="statement">The statement to build the SQL command text.</param>
            <returns>The SQL command text for the statement.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.SqlGenerator.BuildSelectQuery(SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Creates an select SQL command text for a specified statement
            </summary>
            <param name="statement">The statement to build the SQL command text.</param>
            <returns>The SQL command text for the statement.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.SqlGenerator.BuildInsertQuery(SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Creates an insert SQL command text for a specified statement
            </summary>
            <param name="statement">The statement to build the SQL command text.</param>
            <returns>The SQL command text for the statement.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.SqlGenerator.BuildUpdateQuery(SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Creates an update SQL command text for a specified statement
            </summary>
            <param name="statement">The statement to build the SQL command text.</param>
            <returns>The SQL command text for the statement.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.SqlGenerator.BuildDeleteQuery(SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Creates an delete SQL command text for a specified statement
            </summary>
            <param name="statement">The statement to build the SQL command text.</param>
            <returns>The SQL command text for the statement.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.Statement">
            <summary>
            Summary description for Statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.AllowRemapping">
            <summary>
            Allow remapping of dynamic SQL
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ExtendStatement">
            <summary>
            Extend statement attribute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.CacheModelName">
            <summary>
            The CacheModel name to use.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.HasCacheModel">
            <summary>
            Tell us if a cacheModel is attached to this statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.CacheModel">
            <summary>
            The CacheModel used by this statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ListClassName">
            <summary>
            The list class name to use for strongly typed collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ListClass">
            <summary>
            The list class type to use for strongly typed collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ResultClassName">
            <summary>
            The result class name to used.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ResultClass">
            <summary>
            The result class type to used.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ParameterClassName">
            <summary>
            The parameter class name to used.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ParameterClass">
            <summary>
            The parameter class type to used.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.Id">
            <summary>
            Name used to identify the statement amongst the others.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.Sql">
            <summary>
            The sql statement
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ResultMapName">
            <summary>
            The ResultMaps name used by the statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ParameterMapName">
            <summary>
            The ParameterMap name used by the statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ResultsMap">
            <summary>
            The ResultMap used by the statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.ParameterMap">
            <summary>
            The parameterMap used by the statement.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Statement.CommandType">
            <summary>
            The type of the statement (text or procedure)
            Default Text.
            </summary>
            <example>Text or StoredProcedure</example>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Statement.Initialize(SqlBatis.DataMapper.Scope.ConfigurationScope)">
            <summary>
            Initialize an statement for the sqlMap.
            </summary>
            <param name="configurationScope">The scope of the configuration</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Statement.CreateInstanceOfListClass">
            <summary>
            Create an instance of 'IList' class.
            </summary>
            <returns>An object which implment IList.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Statement.CreateInstanceOfGenericListClass``1">
            <summary>
            Create an instance of a generic 'IList' class.
            </summary>
            <returns>An object which implment IList.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Configuration.Statements.Update">
            <summary>
            Summary description for Update.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Configuration.Statements.Update.Generate">
            <summary>
            The Generate tag used by a generated update statement.
            (CRUD operation)
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Configuration.Statements.Update.#ctor">
            <summary>
            Do not use direclty, only for serialization.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.DataExchange.BaseDataExchange">
            <summary>
            Summary description for BaseDataExchange.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DataExchange.BaseDataExchange.DataExchangeFactory">
            <summary>
            Getter for the factory that created this object
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.BaseDataExchange.#ctor(SqlBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Constructor
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.BaseDataExchange.GetData(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.BaseDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.BaseDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.DataExchange.ComplexDataExchange">
            <summary>
            A IDataExchange implemtation for working with .NET object
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.ComplexDataExchange.#ctor(SqlBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Cosntructor
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.ComplexDataExchange.GetData(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.ComplexDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.ComplexDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.DataExchange.DataExchangeFactory">
            <summary>
            Factory for DataExchange objects
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DataExchange.DataExchangeFactory.TypeHandlerFactory">
            <summary>
             Getter for the type handler factory
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DataExchange.DataExchangeFactory.ObjectFactory">
            <summary>
            The factory for object
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DataExchange.DataExchangeFactory.AccessorFactory">
            <summary>
            The factory which build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DataExchangeFactory.#ctor(SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory,SqlBatis.DataMapper.Utilities.Objects.IObjectFactory,SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.DataExchange.DataExchangeFactory"/> class.
            </summary>
            <param name="typeHandlerFactory">The type handler factory.</param>
            <param name="objectFactory">The object factory.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DataExchangeFactory.GetDataExchangeForClass(System.Type)">
            <summary>
            Get a DataExchange object for the passed in Class
            </summary>
            <param name="clazz">The class to get a DataExchange object for</param>
            <returns>The IDataExchange object</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.DataExchange.DictionaryDataExchange">
            <summary>
            DataExchange implementation for IDictionary objects
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DictionaryDataExchange.#ctor(SqlBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Cosntructor
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DictionaryDataExchange.GetData(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DictionaryDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DictionaryDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.DataExchange.DotNetObjectDataExchange">
            <summary>
            IDataExchange implementation for .NET object
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DotNetObjectDataExchange.#ctor(System.Type,SqlBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Cosntructor
            </summary>
            <param name="dataExchangeFactory"></param>
            <param name="parameterClass"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DotNetObjectDataExchange.GetData(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DotNetObjectDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.DotNetObjectDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.DataExchange.IDataExchange">
            <summary>
            Interface for exchanging data between a parameter map/result map and the related objects
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.IDataExchange.GetData(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.IDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.IDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.DataExchange.ListDataExchange">
            <summary>
            IDataExchange implementation for IList objects
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.ListDataExchange.#ctor(SqlBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Cosntructor
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.ListDataExchange.GetData(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.ListDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.ListDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.DataExchange.PrimitiveDataExchange">
            <summary>
            DataExchange implementation for "primitive" objects.
            </summary>
            <remarks>
            The primitive types are Boolean, Byte, SByte, Int16, UInt16, Int32,
            UInt32, Int64, UInt64, Char, Double, and Single + string, Guid, Decimal, DateTime
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.PrimitiveDataExchange.#ctor(SqlBatis.DataMapper.DataExchange.DataExchangeFactory)">
            <summary>
            Cosntructor
            </summary>
            <param name="dataExchangeFactory"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.PrimitiveDataExchange.GetData(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Gets the data to be set into a IDataParameter.
            </summary>
            <param name="mapping"></param>
            <param name="parameterObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.PrimitiveDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object)">
            <summary>
            Sets the value to the result property.
            </summary>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.DataExchange.PrimitiveDataExchange.SetData(System.Object@,SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterProperty,System.Object)">
            <summary>
            Sets the value to the parameter property.
            </summary>
            <remarks>Use to set value on output parameter</remarks>
            <param name="mapping"></param>
            <param name="target"></param>
            <param name="dataBaseValue"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.RowDelegate">
            <summary>
            A delegate called once per row in the QueryWithRowDelegate method
            </summary>
            <param name="obj">The object currently being processed.</param>
            <param name="parameterObject">The optional parameter object passed into the QueryWithRowDelegate method.</param>
            <param name="list">The IList that will be returned to the caller.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.RowDelegate`1">
            <summary>
            A delegate called once per row in the QueryWithRowDelegate method
            </summary>
            <param name="obj">The object currently being processed.</param>
            <param name="parameterObject">The optional parameter object passed into the QueryWithRowDelegate method.</param>
            <param name="list">The IList that will be returned to the caller.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.DictionaryRowDelegate`2">
            <summary>
            A delegate called once per row in the QueryForMapWithRowDelegate method
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="parameterObject">The optional parameter object passed into the QueryForMapWithRowDelegate method.</param>
            <param name="dictionary">The IDictionary that will be returned to the caller.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.DictionaryRowDelegate">
            <summary>
            A delegate called once per row in the QueryForMapWithRowDelegate method
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <param name="parameterObject">The optional parameter object passed into the QueryForMapWithRowDelegate method.</param>
            <param name="dictionary">The IDictionary that will be returned to the caller.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.DependencyInjection.SqlMapperOptions">
            <summary>
            Options for configuring an <see cref="T:SqlBatis.DataMapper.ISqlMapper"/>
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DependencyInjection.SqlMapperOptions.Resource">
            <summary>
            Gets or sets the Resource
            </summary>
            <remarks>
            A relative resource path from your Application root 
            or a absolute file path file:\\c:\dir\a.config
            or, for an embedded file, use embedded://assembly.qualified.resource.name
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.DependencyInjection.SqlMapperOptions.Parameters">
            <summary>
            Gets the optional map of key-value parameters
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.DependencyInjection.SqlMapperServiceCollectionExtensions">
            <summary>
            Extension methods for setting up an <see cref="T:SqlBatis.DataMapper.ISqlMapper"/> in the DI pipeline
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DependencyInjection.SqlMapperServiceCollectionExtensions.AddSqlMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{SqlBatis.DataMapper.DependencyInjection.SqlMapperOptions})">
            <summary>
            Registers the default <see cref="T:SqlBatis.DataMapper.ISqlMapper"/> in the DI pipeline
            </summary>
            <param name="services"></param>
            <param name="configureOptions"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DependencyInjection.SqlMapperServiceCollectionExtensions.AddSqlMapper(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.String,System.Action{SqlBatis.DataMapper.DependencyInjection.SqlMapperOptions})">
            <summary>
            Registers a named instance of <see cref="T:SqlBatis.DataMapper.ISqlMapper"/> in the DI pipeline. Use <see cref="T:SqlBatis.DataMapper.ISqlMapperFactory"/>
            to retrieve a named instance
            </summary>
            <param name="services"></param>
            <param name="name">Name of the mapper.</param>
            <param name="configureOptions"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.SelectKeyType">
            <summary>
            Indicate if the generated key by a selectKey statement
             concern a pre or post-generated key.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.SelectKeyType.pre">
            <summary>
            
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.SelectKeyType.post">
            <summary>
            
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.CacheKeyType">
            <summary>
            
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.CacheKeyType.Object">
            <summary>
            
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.CacheKeyType.List">
            <summary>
            
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.CacheKeyType.Map">
            <summary>
            
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Exceptions.DataMapperException">
            <summary>
            The DataMapperException is thrown when an error in the SqlMapper component occurs.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.DataMapperException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.DataMapperException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance 
            using the message parameter.
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.DataMapperException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to 
            the Message property of the passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.DataMapperException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException"/> 
            class with a specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.DataMapperException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException"/> 
            class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. 
            </param>
        </member>
        <member name="T:SqlBatis.DataMapper.ExecuteEventArgs">
            <summary>
            Summary description for ExecuteEventArgs.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ExecuteEventArgs.StatementName">
            <summary>
            Set or get the statement name
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.ISqlMapper">
            <summary>
            Contract for an <see cref="T:SqlBatis.DataMapper.ISqlMapper"/>
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.Id">
            <summary>
            Name used to identify the the <see cref="T:SqlBatis.DataMapper.SqlMapper"/>
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.SessionStore">
            <summary>
            Allow to set a custom session store like the <see cref="!:HybridWebThreadSessionStore"/>
            </summary>
            <remarks>Set it after the configuration and before use of the <see cref="T:SqlBatis.DataMapper.SqlMapper"/></remarks>
            <example>
            sqlMapper.SessionStore = new HybridWebThreadSessionStore( sqlMapper.Id );
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.IsSessionStarted">
            <summary>
            Gets a value indicating whether this instance is session started.
            </summary>
            <value>
            	<c>true</c> if this instance is session started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.LocalSession">
            <summary>
             Returns the DalSession instance 
             currently being used by the SqlMap.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.DBHelperParameterCache">
            <summary>
            Gets the DB helper parameter cache.
            </summary>
            <value>The DB helper parameter cache.</value>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.CreateSqlMapSession">
            <summary>
            Creates a new SqlMapSession that will be used to query the data source.
            </summary>
            <returns>A new session</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.IsCacheModelsEnabled">
            <summary>
            A flag that determines whether cache models were enabled 
            when this SqlMap was built.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.DataExchangeFactory">
            <summary>
            Factory for DataExchange objects
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.TypeHandlerFactory">
            <summary>
            The TypeHandlerFactory
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.ObjectFactory">
            <summary>
            The meta factory for object factory
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.AccessorFactory">
            <summary>
            The factory which build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IAccessor"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.GetParameterMap(System.String)">
            <summary>
            Get a ParameterMap by name
            </summary>
            <param name="name">The name of the ParameterMap</param>
            <returns>The ParameterMap</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.AddParameterMap(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap)">
            <summary>
            Adds a (named) ParameterMap.
            </summary>
            <param name="parameterMap">the ParameterMap to add</param>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.GetResultMap(System.String)">
            <summary>
            Gets a ResultMap by name
            </summary>
            <param name="name">The name of the result map</param>
            <returns>The ResultMap</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.AddResultMap(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap)">
            <summary>
            Adds a (named) ResultMap
            </summary>
            <param name="resultMap">The ResultMap to add</param>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.ParameterMaps">
            <summary>
            The ParameterMap collection
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.ResultMaps">
            <summary>
            The ResultMap collection
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.MappedStatements">
            <summary>
            The MappedStatements collection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.GetCache(System.String)">
            <summary>
            Gets a cache by name
            </summary>
            <param name="name">The name of the cache to get</param>
            <returns>The cache object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.AddCache(SqlBatis.DataMapper.Configuration.Cache.CacheModel)">
            <summary>
            Adds a (named) cache.
            </summary>
            <param name="cache">The cache to add</param>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.AddMappedStatement(System.String,SqlBatis.DataMapper.MappedStatements.IMappedStatement)">
            <summary>
            Adds a (named) MappedStatement.
            </summary>
            <param name="key"> The key name</param>
            <param name="mappedStatement">The statement to add</param>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.BeginTransaction">
            <summary>
            Begins the transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.BeginTransaction(System.Boolean)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="openConnection">if set to <c>true</c> [open connection].</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.BeginTransaction(System.String)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.BeginTransaction(System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="openNewConnection">if set to <c>true</c> [open new connection].</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.BeginTransaction(System.String,System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="openNewConnection">if set to <c>true</c> [open new connection].</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="isolationLevel">The isolation level.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.BeginTransaction(System.String,System.Data.IsolationLevel)">
            <summary>
            Begins the transaction.
            </summary>
            <param name="connectionString">The connection string.</param>
            <param name="isolationLevel">The isolation level.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.CloseConnection">
            <summary>
            Closes the connection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.CommitTransaction(System.Boolean)">
            <summary>
            Commits the transaction.
            </summary>
            <param name="closeConnection">if set to <c>true</c> [close connection].</param>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.CommitTransaction">
            <summary>
            Commits the transaction.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapper.DataSource">
            <summary>
            Gets or sets the data source.
            </summary>
            <value>The data source.</value>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.Delete(System.String,System.Object)">
            <summary>
             Executes a Sql DELETE statement.
             Delete returns the number of rows effected.
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.FlushCaches">
            <summary>
            Flushes all cached objects that belong to this SqlMap
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.GetDataCacheStats">
            <summary>
            Gets the data cache stats.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.GetMappedStatement(System.String)">
            <summary>
            Gets a MappedStatement by name
            </summary>
            <param name="id"> The id of the statement</param>
            <returns> The MappedStatement</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.Insert(System.String,System.Object)">
            <summary>
            Executes a Sql INSERT statement.
            Insert is a bit different from other update methods, as it
            provides facilities for returning the primary key of the
            newly inserted row (rather than the effected rows).  This
            functionality is of course optional.
            <p/>
            The parameter object is generally used to supply the input
            data for the INSERT values.
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns> The primary key of the newly inserted row.  
            This might be automatically generated by the RDBMS, 
            or selected from a sequence table or other source.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.OpenConnection">
            <summary>
            Opens the connection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.OpenConnection(System.String)">
            <summary>
            Opens the connection.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForDictionary(System.String,System.Object,System.String,System.String)">
             <summary>
             Alias to QueryForMap, .NET spirit.
              Feature idea by Ted Husted.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForDictionary(System.String,System.Object,System.String)">
            <summary>
             Alias to QueryForMap, .NET spirit.
             Feature idea by Ted Husted.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForList(System.String,System.Object,System.Collections.IList)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An Ilist object used to hold the objects.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForList(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForList(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns all rows selected.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForMap(System.String,System.Object,System.String)">
            <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the entire result object.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForMap(System.String,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForMapWithRowDelegate(System.String,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance to deal 
             with each row as it is processed.
             <p/>
              The parameter object is generally used to supply the input
             data for the WHERE clause parameter(s) of the SELECT statement.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForObject(System.String,System.Object,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns a single object of the type of the
            resultObject parameter.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An object of the type to be returned.</param>
            <returns>The single result object populated with the result set data.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForObject(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns that returns data 
            to populate a single object instance.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns> The single result object populated with the result set data.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForPaginatedList(System.String,System.Object,System.Int32)">
            <summary>
            Executes the SQL and retuns a subset of the results in a dynamic PaginatedList that can be used to
            automatically scroll through results from a database table.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL</param>
            <param name="pageSize">The maximum number of objects to store in each page</param>
            <returns>A PaginatedList of beans containing the rows</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryWithRowDelegate(System.String,System.Object,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query for list with a custom object that gets a chance to deal 
            with each row as it is processed.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.RollBackTransaction">
            <summary>
            Rolls the back transaction.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.RollBackTransaction(System.Boolean)">
            <summary>
            Rolls the back transaction.
            </summary>
            <param name="closeConnection">if set to <c>true</c> [close connection].</param>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.Update(System.String,System.Object)">
            <summary>
            Executes a Sql UPDATE statement.
            Update can also be used for any other update statement type,
            such as inserts and deletes.  Update returns the number of
            rows effected.
            <p/>
            The parameter object is generally used to supply the input
            data for the UPDATE values as well as the WHERE clause parameter(s).
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForDictionary``2(System.String,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForDictionary``2(System.String,System.Object,System.String)">
            <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the entire result object.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForDictionary``2(System.String,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
             <summary>
             Runs a query with a custom object that gets a chance to deal 
             with each row as it is processed.
             <p/>
              The parameter object is generally used to supply the input
             data for the WHERE clause parameter(s) of the SELECT statement.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForDictionary method></param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForObject``1(System.String,System.Object,``0)">
            <summary>
            Executes a Sql SELECT statement that returns a single object of the type of the
            resultObject parameter.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="instanceObject">An object of the type to be returned.</param>
            <returns>The single result object populated with the result set data.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForObject``1(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns that returns data 
            to populate a single object instance.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns> The single result object populated with the result set data.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForList``1(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForList``1(System.String,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An Ilist object used to hold the objects.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryForList``1(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns all rows selected.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapper.QueryWithRowDelegate``1(System.String,System.Object,SqlBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query for list with a custom object that gets a chance to deal 
            with each row as it is processed.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.ISqlMapperFactory">
            <summary>
            A factory for getting an instance of <see cref="T:SqlBatis.DataMapper.ISqlMapper"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapperFactory.GetMapper">
            <summary>
            Gets the default instance of <see cref="T:SqlBatis.DataMapper.ISqlMapper"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapperFactory.GetMapper(System.String)">
            <summary>
            Gets a named instance of <see cref="T:SqlBatis.DataMapper.ISqlMapper"/>
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.ISqlMapSession">
            <summary>
            SqlMap Session contract
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.ISqlMapSession.SqlMapper">
            <summary>
            Gets the SQL mapper.
            </summary>
            <value>The SQL mapper.</value>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapSession.CreateConnection">
            <summary>
            Create the connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.ISqlMapSession.CreateConnection(System.String)">
            <summary>
            Create the connection
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory">
            <summary>
            Factory to get <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.ArgumentStrategyFactory.Get(SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty)">
            <summary>
            Finds the <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/>.
            </summary>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty"/>.</param>
            <returns>The <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.DefaultStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when no 'select' or
            'resultMapping' attribute exists on a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.DefaultStrategy.GetValue(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> contract to get the value of an argument constructor.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy.GetValue(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.ResultMapStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'resultMapping' attribute exists
            on a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.ResultMapStrategy.GetValue(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectArrayStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Array"/> <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectArrayStrategy.GetValue(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectGenericListStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on an <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty"/> and the object property is 
            different from an <see cref="T:System.Array"/> or an <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectGenericListStrategy.GetValue(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectListStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Collections.IList"/> <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectListStrategy.GetValue(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectObjectStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on an <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty"/> and the object property is 
            different from an <see cref="T:System.Array"/> or an <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectObjectStrategy.GetValue(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="keys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ArgumentProperty"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy.#ctor(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy,SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.IArgumentStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy"/> class.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="selectArrayStrategy">The select array strategy.</param>
            <param name="selectGenericListStrategy">The select generic list strategy.</param>
            <param name="selectListStrategy">The select list strategy.</param>
            <param name="selectObjectStrategy">The select object strategy.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ArgumentStrategy.SelectStrategy.GetValue(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader@,System.Object)">
            <summary>
            Gets the value of an argument constructor.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> with the argument infos.</param>
            <param name="reader">The current <see cref="T:System.Data.IDataReader"/>.</param>
            <param name="selectKeys">The keys</param>
            <returns>The paremeter value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.BaseStrategy">
            <summary>
            BaseStrategy.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.MappedStatements.BaseStrategy.SKIP">
            <summary>
            Used by N+1 Select solution
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.BaseStrategy.GetUniqueKey(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader)">
            <summary>
            Calculte a unique key which identify the resukt object build by this <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap"/>
            </summary>
            <param name="resultMap"></param>
            <param name="request"></param>
            <param name="reader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.BaseStrategy.FillObjectWithReaderAndResultMap(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,System.Object@)">
            <summary>
            Fills the object with reader and result map.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultMap">The result map.</param>
            <param name="resultObject">The result object.</param>
            <returns>Indicates if we have found a row.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.CachingStatement">
            <summary>
            Summary description for CachingStatement.
            </summary>
        </member>
        <member name="E:SqlBatis.DataMapper.MappedStatements.CachingStatement.Execute">
            <summary>
            Event launch on exceute query
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.#ctor(SqlBatis.DataMapper.MappedStatements.MappedStatement)">
            <summary>
            Constructor
            </summary>
            <param name="statement"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.CachingStatement.PreparedCommand">
            <summary>
            The IPreparedCommand to use
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.CachingStatement.Id">
            <summary>
            Name used to identify the MappedStatement amongst the others.
            This the name of the SQL statment by default.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.CachingStatement.Statement">
            <summary>
            The SQL statment used by this MappedStatement
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.CachingStatement.SqlMap">
            <summary>
            The SqlMap used by this MappedStatement
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForMap(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForDictionary``2(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForDictionary``2(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement</param>
            <param name="parameterObject">The object used to set the parameters in the SQL. </param>
            <param name="keyProperty">The property of the result object to be used as the key. </param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate"></param>
            <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteUpdate(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Execute an update statement. Also used for delete statement.
            Return the number of row effected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The number of row effected.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteInsert(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Execute an insert statement. Fill the parameter object with 
            the ouput parameters if any, also could return the insert generated key
            </summary>
            <param name="session">The session</param>
            <param name="parameterObject">The parameter object used to fill the statement.</param>
            <returns>Can return the insert generated key.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.IList)">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns a subset of the rows selected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. This is exactly the same as
            calling ExecuteQueryForList(session, parameterObject, NO_SKIPPED_RESULTS, NO_MAXIMUM_RESULTS).
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns a subset of the rows selected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. This is exactly the same as
            calling ExecuteQueryForList(session, parameterObject, NO_SKIPPED_RESULTS, NO_MAXIMUM_RESULTS).
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForObject``1(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForObject``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,``0)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForRowDelegate``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.ExecuteQueryForMapWithRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement</param>
            <param name="parameterObject">The object used to set the parameters in the SQL. </param>
            <param name="keyProperty">The property of the result object to be used as the key. </param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate"></param>
            <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.GetDataCacheHitRatio">
            <summary>
            Gets a percentage of successful cache hits achieved
            </summary>
            <returns>The percentage of hits (0-1), or -1 if cache is disabled.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.CachingStatement.GetCacheKey(SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Gets the cache key.
            </summary>
            <param name="request">The request.</param>
            <returns>the cache key</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement">
            <summary>
            Summary description for DeleteMappedStatement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.#ctor(SqlBatis.DataMapper.ISqlMapper,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Constructor
            </summary>
            <param name="sqlMap">An SqlMap</param>
            <param name="statement">An SQL statement</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForMap(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="keyProperty"></param>
            <param name="valueProperty"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteInsert(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="skipResults"></param>
            <param name="maxResults"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="rowDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.DeleteMappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ExecuteEventHandler">
            <summary>
            
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.IMappedStatement">
            <summary>
            Summary description for IMappedStatement.
            </summary>
        </member>
        <member name="E:SqlBatis.DataMapper.MappedStatements.IMappedStatement.Execute">
            <summary>
            Event launch on exceute query
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.IMappedStatement.PreparedCommand">
            <summary>
            The IPreparedCommand to use
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.IMappedStatement.Id">
            <summary>
            Name used to identify the MappedStatement amongst the others.
            This the name of the SQL statment by default.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.IMappedStatement.Statement">
            <summary>
            The SQL statment used by this MappedStatement
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.IMappedStatement.SqlMap">
            <summary>
            The SqlMap used by this MappedStatement
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForMap(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForDictionary``2(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForDictionary``2(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement</param>
            <param name="parameterObject">The object used to set the parameters in the SQL. </param>
            <param name="keyProperty">The property of the result object to be used as the key. </param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate">A delegate called once per row in the QueryForDictionary method</param>
            <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteUpdate(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Execute an update statement. Also used for delete statement.
            Return the number of row effected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The number of row effected.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteInsert(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Execute an insert statement. Fill the parameter object with 
            the ouput parameters if any, also could return the insert generated key
            </summary>
            <param name="session">The session</param>
            <param name="parameterObject">The parameter object used to fill the statement.</param>
            <returns>Can return the insert generated key.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.IList)">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns a subset of the rows selected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. This is exactly the same as
            calling ExecuteQueryForList(session, parameterObject, NO_SKIPPED_RESULTS, NO_MAXIMUM_RESULTS).
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns a subset of the rows selected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. This is exactly the same as
            calling ExecuteQueryForList(session, parameterObject, NO_SKIPPED_RESULTS, NO_MAXIMUM_RESULTS).
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForObject``1(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForObject``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,``0)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForMapWithRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement</param>
            <param name="parameterObject">The object used to set the parameters in the SQL. </param>
            <param name="keyProperty">The property of the result object to be used as the key. </param>
            <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
            <param name="rowDelegate"></param>
            <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.IMappedStatement.ExecuteQueryForRowDelegate``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement">
            <summary>
            Summary description for InsertMappedStatement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.#ctor(SqlBatis.DataMapper.ISqlMapper,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Constructor
            </summary>
            <param name="sqlMap">An SqlMap</param>
            <param name="statement">An SQL statement</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForMap(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="keyProperty"></param>
            <param name="valueProperty"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteUpdate(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="skipResults"></param>
            <param name="maxResults"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="rowDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForMapWithRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance 
             to deal with each row as it is processed.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.InsertMappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.MappedStatement">
            <summary>
            Summary description for MappedStatement.
            </summary>
        </member>
        <member name="E:SqlBatis.DataMapper.MappedStatements.MappedStatement.Execute">
            <summary>
            Event launch on exceute query
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.MappedStatement.PreparedCommand">
            <summary>
            The IPreparedCommand to use
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.MappedStatement.Id">
            <summary>
            Name used to identify the MappedStatement amongst the others.
            This the name of the SQL statement by default.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.MappedStatement.Statement">
            <summary>
            The SQL statment used by this MappedStatement
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.MappedStatement.SqlMap">
            <summary>
            The SqlMap used by this MappedStatement
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.#ctor(SqlBatis.DataMapper.ISqlMapper,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Constructor
            </summary>
            <param name="sqlMap">An SqlMap</param>
            <param name="statement">An SQL statement</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RetrieveOutputParameters(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Data.IDbCommand,System.Object)">
            <summary>
            Retrieve the output parameter and map them on the result object.
            This routine is only use is you specified a ParameterMap and some output attribute
            or if you use a store procedure with output parameter...
            </summary>
            <param name="request"></param>
            <param name="session">The current session.</param>
            <param name="result">The result object.</param>
            <param name="command">The command sql.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForObject(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="request">The request scope.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForObject``1(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes an SQL statement that returns a single row as an Object.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForObject``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,``0)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForObject``1(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Object,``0)">
            <summary>
            Executes an SQL statement that returns a single row as an Object of the type of
            the resultObject passed in as a parameter.
            </summary>
            <param name="request">The request scope.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object.</param>
            <returns>The object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForMapWithRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance 
             to deal with each row as it is processed.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. This is exactly the same as
            calling ExecuteQueryForList(session, parameterObject, NO_SKIPPED_RESULTS, NO_MAXIMUM_RESULTS).
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns a subset of the rows selected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForList(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            Runs the query for list.
            </summary>
            <param name="request">The request.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForList(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.IList,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            Executes the SQL and retuns a List of result objects.
            </summary>
            <param name="request">The request scope.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.IList)">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForRowDelegate``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query with a custom object that gets a chance 
            to deal with each row as it is processed.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Executes the SQL and retuns all rows selected. This is exactly the same as
            calling ExecuteQueryForList(session, parameterObject, NO_SKIPPED_RESULTS, NO_MAXIMUM_RESULTS).
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns a subset of the rows selected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForList``1(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns a List of result objects.
            </summary>
            <param name="request">The request scope.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForList``1(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.Generic.IList{``0},SqlBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Executes the SQL and retuns a List of result objects.
            </summary>
            <param name="request">The request scope.</param>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">The result object</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForList``1(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes the SQL and and fill a strongly typed collection.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">A strongly typed collection of result objects.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteUpdate(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Execute an update statement. Also used for delete statement.
            Return the number of row effected.
            </summary>
            <param name="session">The session used to execute the statement.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>The number of row effected.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteInsert(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            Execute an insert statement. Fill the parameter object with 
            the ouput parameters if any, also could return the insert generated key
            </summary>
            <param name="session">The session</param>
            <param name="parameterObject">The parameter object used to fill the statement.</param>
            <returns>Can return the insert generated key.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForMap(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForMap(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="request">The request scope.</param>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForMapWithRowDelegate method</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForDictionary``2(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecuteQueryForDictionary``2(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
             <summary>
             Runs a query with a custom object that gets a chance 
             to deal with each row as it is processed.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForDictionary method</param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RunQueryForDictionary``2(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="request">The request scope.</param>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForMapWithRowDelegate method</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ExecutePostSelect(SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="request">The current <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/>.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.RaiseExecuteEvent">
            <summary>
            Raise an event ExecuteEventArgs
            (Used when a query is executed)
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.MappedStatement.ToString">
            <summary>
            ToString implementation.
            </summary>
            <returns>A string that describes the MappedStatement</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PaginatedList">
            <summary>
            Summary description for PaginatedDataList.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.#ctor(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Int32)">
            <summary>
            Constructor
            </summary>
            <param name="mappedStatement"></param>
            <param name="parameterObject"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.PageForward">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.PageBack">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.SafePageTo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.PageTo(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.GetList(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="localPageSize"></param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.SubList(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Provides a view of the IList pramaeter 
            from the specified position <paramref name="fromIndex"/> 
            to the specified position <paramref name="toIndex"/>. 
            </summary>
            <param name="list">The IList elements.</param>
            <param name="fromIndex">Starting position for the view of elements. </param>
            <param name="toIndex">Ending position for the view of elements. </param>
            <returns> A view of list.
            </returns>
            <remarks>
            The list that is returned is just a view, it is still backed
            by the orignal list.  Any changes you make to it will be 
            reflected in the orignal list.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.PageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsPreviousPageAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsFirstPage">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.GotoPage(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.PageSize">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.NextPage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsMiddlePage">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.PreviousPage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsNextPageAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsLastPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.Reset">
            <summary>
            Sets the enumerator to its initial position, 
            which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PaginatedList.Current">
            <summary>
            Gets the current element in the page.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PaginatedList.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostBindind">
            <summary>
            All dataq tor retrieve 'select' <see cref="P:SqlBatis.DataMapper.MappedStatements.PostBindind.ResultProperty"/>
            </summary>
            <remarks>
            As ADO.NET allows one open <see cref="T:System.Data.IDataReader"/> per connection at once, we keep
            all the datas to open the next <see cref="T:System.Data.IDataReader"/> after having closed the current. 
            </remarks>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod">
            <summary>
            Enumeration of the ExecuteQuery method.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForObject">
            <summary>
            Execute Query For Object
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForIList">
            <summary>
            Execute Query For IList
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForGenericIList">
            <summary>
            Execute Query For Generic IList
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForArrayList">
            <summary>
            Execute Query For Array List
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod.ExecuteQueryForStrongTypedIList">
            <summary>
            Execute Query For Strong Typed IList
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PostBindind.Statement">
            <summary>
            Gets or sets the statement.
            </summary>
            <value>The statement.</value>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PostBindind.ResultProperty">
            <summary>
            Gets or sets the result property.
            </summary>
            <value>The result property.</value>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PostBindind.Target">
            <summary>
            Gets or sets the target.
            </summary>
            <value>The target.</value>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PostBindind.Keys">
            <summary>
            Gets or sets the keys.
            </summary>
            <value>The keys.</value>
        </member>
        <member name="P:SqlBatis.DataMapper.MappedStatements.PostBindind.Method">
            <summary>
            Gets or sets the method.
            </summary>
            <value>The method.</value>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.ArrayStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query for <see cref="T:System.Array"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.ArrayStrategy.Execute(SqlBatis.DataMapper.MappedStatements.PostBindind,SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.GenericListStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query generic list.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.GenericListStrategy.Execute(SqlBatis.DataMapper.MappedStatements.PostBindind,SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> contract to excute a 'select' <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>
            after the process of the main <see cref="T:System.Data.IDataReader"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy.Execute(SqlBatis.DataMapper.MappedStatements.PostBindind,SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.ListStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query for list.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.ListStrategy.Execute(SqlBatis.DataMapper.MappedStatements.PostBindind,SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.ObjectStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query for object.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.ObjectStrategy.Execute(SqlBatis.DataMapper.MappedStatements.PostBindind,SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory">
            <summary>
            Factory to get <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.PostSelectStrategyFactory.Get(SqlBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod)">
            <summary>
            Gets the <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/>.
            </summary>
            <param name="method">The <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind.ExecuteMethod"/>.</param>
            <returns>The <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.StrongTypedListStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.IPostSelectStrategy"/> implementation to exceute a query for 
            strong typed list.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PostSelectStrategy.StrongTypedListStrategy.Execute(SqlBatis.DataMapper.MappedStatements.PostBindind,SqlBatis.DataMapper.Scope.RequestScope)">
            <summary>
            Executes the specified <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.
            </summary>
            <param name="postSelect">The <see cref="T:SqlBatis.DataMapper.MappedStatements.PostBindind"/>.</param>
            <param name="request">The <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/></param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.DefaultStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when no 'select' or
            'resultMapping' attribute exists on a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.DefaultStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object
             when the 'select' and 'resultMap' attributes 
             on the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The reader.</param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.DefaultStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> contract to set value object on <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
            Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The ResultProperty.</param>
            <param name="target">The target.</param>
            <param name="reader">The reader.</param>
            <param name="keys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory">
            <summary>
            Factory to get <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory.Get(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty)">
            <summary>
            Finds the <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/>.
            </summary>
            <param name="mapping">The <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>.</param>
            <returns>The <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.ResultMapStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'resultMapping' attribute exists
            on a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.ResultMapStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
            Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object
            when a 'resultMapping' attribute exists
            on the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The ResultProperty.</param>
            <param name="target">The target.</param>
            <param name="reader">The reader.</param>
            <param name="keys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.ResultMapStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectArrayStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Array"/> <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectArrayStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists and fills an Array property
             on the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The <see cref="T:System.Data.IDataReader"/></param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectArrayStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectGenericListStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Collections.IList"/> <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectGenericListStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists and fills an <see cref="T:System.Collections.IList"/> property
             on the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The current <see cref="T:System.Data.IDataReader"/></param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectGenericListStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectListStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:System.Collections.IList"/> <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectListStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists and fills an <see cref="T:System.Collections.IList"/> property
             on the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The current <see cref="T:System.Data.IDataReader"/></param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectListStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectObjectStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on an <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> and the object property is 
            different from an <see cref="T:System.Array"/> or an <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectObjectStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists and fills an object property.
             on the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The current <see cref="T:System.Data.IDataReader"/></param>
             <param name="keys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectObjectStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'select' attribute exists
            on a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy.#ctor(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy,SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy"/> class.
            </summary>
            <param name="mapping">The mapping.</param>
            <param name="selectArrayStrategy">The select array strategy.</param>
            <param name="selectGenericListStrategy">The select generic list strategy.</param>
            <param name="selectListStrategy">The select list strategy.</param>
            <param name="selectObjectStrategy">The select object strategy.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
             Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object
             when a 'select' attribute exists
             on the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> are empties.
             </summary>
             <param name="request">The request.</param>
             <param name="resultMap">The result map.</param>
             <param name="mapping">The ResultProperty.</param>
             <param name="target">The target.</param>
             <param name="reader">The reader.</param>
             <param name="selectKeys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.SelectStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.IPropertyStrategy"/> implementation when a 'resultMapping' attribute exists
            on a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> ant the resulMap have a groupBy attribute.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy.#cctor">
            <summary>
            Initializes the <see cref="T:SqlBatis.DataMapper.MappedStatements.PropertyStrategy.PropertyStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy.Set(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader,System.Object)">
            <summary>
            Sets value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> on the target object
            when a 'resultMapping' attribute exists
            on the <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The ResultProperty.</param>
            <param name="target">The target.</param>
            <param name="reader">The reader.</param>
            <param name="keys">The keys</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.PropertStrategy.GroupByStrategy.Get(SqlBatis.DataMapper.Scope.RequestScope,SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Object@,System.Data.IDataReader)">
            <summary>
            Gets the value of the specified <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty"/> that must be set on the target object.
            </summary>
            <param name="request">The request.</param>
            <param name="resultMap">The result map.</param>
            <param name="mapping">The mapping.</param>
            <param name="reader">The reader.</param>
            <param name="target">The target object</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ReaderAutoMapper">
            <summary>
            Build a dynamic instance of a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ReaderAutoMapper.Build(SqlBatis.DataMapper.DataExchange.DataExchangeFactory,System.Data.IDataReader,System.Object@)">
            <summary>
            Builds a <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.ResultPropertyCollection"/> for an <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.AutoResultMap"/>.
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.AutoMapStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation used when implicit 'ResultMap'.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.AutoMapStrategy.InitializeAutoResultMap(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object@)">
            <summary>
            Auto-map the reader to the result object.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
            <returns>The AutoResultMap use to map the resultset.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.AutoMapStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            a an auto result map is used.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.DictionaryStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified and
            the type of the result object is <see cref="T:System.Collections.IDictionary"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.DictionaryStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when a 'resultClass' attribute is specified on the statement and
            the 'resultClass' attribute is a <see cref="T:System.Collections.IDictionary"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.GroupByStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'groupBy' attribute is specified on the resultMap tag.
            </summary>
            <remarks>N+1 Select solution</remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.GroupByStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
            <returns>The result object</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> contract to process the <see cref="T:System.Data.IDataReader"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ListStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified and
            the type of the result object is <see cref="T:System.Collections.IList"/>.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ListStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when a ResultClass is specified on the statement and
            the ResultClass is <see cref="T:System.Collections.IList"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.MapStrategy">
            <summary>
            Delegates on the <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultMapStrategy"/>  or on the 
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.GroupByStrategy"/> implementation if a grouBy attribute is specify on the resultMap tag.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.MapStrategy.#cctor">
            <summary>
            Initializes the <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.MapStrategy"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.MapStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ObjectStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            no 'resultClass' attribute is specified.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ObjectStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when no resultClass or resultMap attribute are specified.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultClassStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/>.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultMapStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultMap' attribute is specified.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultMapStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when a ResultMap is specified on the statement.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory">
            <summary>
            Factory to get <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory.#cctor">
            <summary>
            Initializes the <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.ResultStrategyFactory.Get(SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Finds the <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/>.
            </summary>
            <param name="statement">The statement.</param>
            <returns>The <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.SimpleTypeStrategy">
            <summary>
            <see cref="T:SqlBatis.DataMapper.MappedStatements.ResultStrategy.IResultStrategy"/> implementation when 
            a 'resultClass' attribute is specified and
            the type of the result object is primitive.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.ResultStrategy.SimpleTypeStrategy.Process(SqlBatis.DataMapper.Scope.RequestScope,System.Data.IDataReader@,System.Object)">
            <summary>
            Processes the specified <see cref="T:System.Data.IDataReader"/> 
            when a ResultClass is specified on the statement and
            the ResultClass is a SimpleType.
            </summary>
            <param name="request">The request.</param>
            <param name="reader">The reader.</param>
            <param name="resultObject">The result object.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.SelectMappedStatement">
            <summary>
            Summary description for SelectMappedStatement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.SelectMappedStatement.#ctor(SqlBatis.DataMapper.ISqlMapper,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Constructor
            </summary>
            <param name="sqlMap">An SqlMap</param>
            <param name="statement">An SQL statement</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.SelectMappedStatement.ExecuteInsert(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.SelectMappedStatement.ExecuteUpdate(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement">
            <summary>
            Summary description for UpdateMappedStatement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.#ctor(SqlBatis.DataMapper.ISqlMapper,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Constructor
            </summary>
            <param name="sqlMap">An SqlMap</param>
            <param name="statement">An SQL statement</param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForMap(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="keyProperty"></param>
            <param name="valueProperty"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteInsert(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Collections.IList)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="skipResults"></param>
            <param name="maxResults"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForList(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="rowDelegate"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForMapWithRowDelegate(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance 
             to deal with each row as it is processed.
             </summary>
             <param name="session">The session used to execute the statement</param>
             <param name="parameterObject">The object used to set the parameters in the SQL. </param>
             <param name="keyProperty">The property of the result object to be used as the key. </param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A hashtable of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.MappedStatements.UpdateMappedStatement.ExecuteQueryForObject(SqlBatis.DataMapper.ISqlMapSession,System.Object,System.Object)">
            <summary>
            
            </summary>
            <param name="session"></param>
            <param name="parameterObject"></param>
            <param name="resultObject"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Mapper">
            <summary>
            A singleton class to access the default SqlMapper defined by the SqlMap.Config
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Mapper.Configure(System.Object)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Mapper.InitMapper">
            <summary>
            Init the 'default' SqlMapper defined by the SqlMap.Config file.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Mapper.Instance">
            <summary>
            Get the instance of the SqlMapper defined by the SqlMap.Config file.
            </summary>
            <returns>A SqlMapper initalized via the SqlMap.Config file.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Mapper.Get">
            <summary>
            Get the instance of the SqlMapper defined by the SqlMap.Config file. (Convenience form of Instance method.)
            </summary>
            <returns>A SqlMapper initalized via the SqlMap.Config file.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Proxy.ILazyFactory">
            <summary>
            Contract of an <see cref="T:SqlBatis.DataMapper.Proxy.ILazyFactory"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.ILazyFactory.CreateProxy(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Create a new proxy instance.
            </summary>
            <param name="mappedStatement">The mapped statement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
            <returns>Returns a new proxy.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Proxy.LazyFactoryBuilder">
            <summary>
            Gets <see cref="T:SqlBatis.DataMapper.Proxy.ILazyFactory"/> instance.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyFactoryBuilder.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Proxy.LazyFactoryBuilder"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyFactoryBuilder.Register(System.Type,System.String,SqlBatis.DataMapper.Proxy.ILazyFactory)">
            <summary>
            Register (add) a lazy load Proxy for a type and member type
            </summary>
            <param name="type">The target type which contains the member proxyfied</param>
            <param name="memberName">The member name the proxy must emulate</param>
            <param name="factory">The <see cref="T:SqlBatis.DataMapper.Proxy.ILazyFactory"/>.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyFactoryBuilder.GetLazyFactory(System.Type)">
            <summary>
            Get a ILazyLoadProxy for a type, member name
            </summary>
            <param name="type">The target type which contains the member proxyfied</param>
            <returns>Return the ILazyLoadProxy instance</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Proxy.LazyList">
            <summary>
            A lazy list
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.Load(System.String)">
            <summary>
            Resolve the lazy loading.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.#ctor(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Initializes a new instance of the <see cref="T:LazyList"/> class.
            </summary>
            <param name="mappedSatement">The mapped satement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyList.IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyList.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.IList"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyList.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyList.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyList.IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyList.SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyList.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Proxy.LazyListFactory">
            <summary>
            Implementation of <see cref="T:SqlBatis.DataMapper.Proxy.ILazyFactory"/> to create proxy for an <see cref="T:System.Collections.IList"/> element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListFactory.CreateProxy(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Create a new proxy instance.
            </summary>
            <param name="mappedStatement">The mapped statement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
            <returns>Returns a new proxy.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Proxy.LazyListGeneric`1">
            <summary>
            A lazy generic list
            </summary>
            <typeparam name="T"></typeparam>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.#ctor(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Initializes a new instance of the LazyListGeneric class.
            </summary>
            <param name="mappedSatement">The mapped satement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.Load(System.String)">
            <summary>
            Resolve the lazy loading.
            </summary>
            <param name="methodName">Name of the method.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.IndexOf(`0)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.Generic.IList`1"></see>.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.Generic.IList`1"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert into the <see cref="T:System.Collections.Generic.IList`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.Item(System.Int32)">
            <summary>
            Gets or sets the object at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.Add(`0)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to add to the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.Contains(`0)">
            <summary>
            Determines whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> contains a specific value.
            </summary>
            <param name="item">The object to locate in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item is found in the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.Generic.ICollection`1"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.Generic.ICollection`1"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentNullException">array is null.</exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or-arrayIndex is equal to or greater than the length of array.-or-The number of elements in the source <see cref="T:System.Collections.Generic.ICollection`1"></see> is greater than the available space from arrayIndex to the end of the destination array.-or-Type T cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.Count">
            <summary>
            Gets the number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <param name="item">The object to remove from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.</param>
            <returns>
            true if item was successfully removed from the <see cref="T:System.Collections.Generic.ICollection`1"></see>; otherwise, false. This method also returns false if item is not found in the original <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="!:System.Collections.Generic.IEnumerator"></see> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator"></see> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to add to the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The position into which the new element was inserted.
            </returns>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Clear">
            <summary>
            Removes all items from the <see cref="T:System.Collections.Generic.ICollection`1"></see>.
            </summary>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether the <see cref="T:System.Collections.IList"></see> contains a specific value.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            true if the <see cref="T:System.Object"></see> is found in the <see cref="T:System.Collections.IList"></see>; otherwise, false.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Determines the index of a specific item in the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to locate in the <see cref="T:System.Collections.IList"></see>.</param>
            <returns>
            The index of value if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an item to the <see cref="T:System.Collections.IList"></see> at the specified index.
            </summary>
            <param name="index">The zero-based index at which value should be inserted.</param>
            <param name="value">The <see cref="T:System.Object"></see> to insert into the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.IList"></see>. </exception>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
            <exception cref="T:System.NullReferenceException">value is null reference in the <see cref="T:System.Collections.IList"></see>.</exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#IsFixedSize">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.IList"></see> has a fixed size.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.IList"></see> has a fixed size; otherwise, false.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#IsReadOnly">
            <summary>
            Gets a value indicating whether the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only.
            </summary>
            <value></value>
            <returns>true if the <see cref="T:System.Collections.Generic.ICollection`1"></see> is read-only; otherwise, false.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the <see cref="T:System.Collections.IList"></see>.
            </summary>
            <param name="value">The <see cref="T:System.Object"></see> to remove from the <see cref="T:System.Collections.IList"></see>.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.IList"></see> is read-only.-or- The <see cref="T:System.Collections.IList"></see> has a fixed size. </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#RemoveAt(System.Int32)">
            <summary>
            Removes the <see cref="T:System.Collections.Generic.IList`1"></see> item at the specified index.
            </summary>
            <param name="index">The zero-based index of the item to remove.</param>
            <exception cref="T:System.NotSupportedException">The <see cref="T:System.Collections.Generic.IList`1"></see> is read-only.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is not a valid index in the <see cref="T:System.Collections.Generic.IList`1"></see>.</exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:System.Object"/> at the specified index.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the <see cref="T:System.Collections.ICollection"></see> to an <see cref="T:System.Array"></see>, starting at a particular <see cref="T:System.Array"></see> index.
            </summary>
            <param name="array">The one-dimensional <see cref="T:System.Array"></see> that is the destination of the elements copied from <see cref="T:System.Collections.ICollection"></see>. The <see cref="T:System.Array"></see> must have zero-based indexing.</param>
            <param name="index">The zero-based index in array at which copying begins.</param>
            <exception cref="T:System.ArgumentNullException">array is null. </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">index is less than zero. </exception>
            <exception cref="T:System.ArgumentException">array is multidimensional.-or- index is equal to or greater than the length of array.-or- The number of elements in the source <see cref="T:System.Collections.ICollection"></see> is greater than the available space from index to the end of the destination array. </exception>
            <exception cref="T:System.InvalidCastException">The type of the source <see cref="T:System.Collections.ICollection"></see> cannot be cast automatically to the type of the destination array. </exception>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#ICollection#Count">
            <summary>
            Gets the number of elements contained in the <see cref="!:System.Collections.Generic.ICollection"></see>.
            </summary>
            <value></value>
            <returns>The number of elements contained in the <see cref="!:System.Collections.Generic.ICollection"></see>.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            Gets a value indicating whether access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe).
            </summary>
            <value></value>
            <returns>true if access to the <see cref="T:System.Collections.ICollection"></see> is synchronized (thread safe); otherwise, false.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Proxy.LazyListGeneric`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.
            </summary>
            <value></value>
            <returns>An object that can be used to synchronize access to the <see cref="T:System.Collections.ICollection"></see>.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Proxy.LazyListGenericFactory">
            <summary>
               /// Implementation of <see cref="T:SqlBatis.DataMapper.Proxy.ILazyFactory"/> to create proxy for an generic IList element.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Proxy.LazyListGenericFactory.CreateProxy(SqlBatis.DataMapper.MappedStatements.IMappedStatement,System.Object,System.Object,SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor)">
            <summary>
            Create a new proxy instance.
            </summary>
            <param name="mappedStatement">The mapped statement.</param>
            <param name="param">The param.</param>
            <param name="target">The target.</param>
            <param name="setAccessor">The set accessor.</param>
            <returns>Returns a new proxy.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Scope.ConfigurationScope">
            <summary>
            The ConfigurationScope maintains the state of the build process.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Scope.ConfigurationScope.EMPTY_PARAMETER_MAP">
            <summary>
            Empty parameter map
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.ConfigurationScope.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.SqlIncludes">
            <summary>
            The list of sql fragment
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.XmlNamespaceManager">
            <summary>
            XmlNamespaceManager
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.ValidateSqlMap">
            <summary>
            Set if the parser should validate the sqlMap documents
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.IsXmlValid">
            <summary>
            Tells us if the xml configuration file validate the schema 
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.SqlMapNamespace">
            <summary>
            The current SqlMap namespace.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.SqlMapper">
            <summary>
            The SqlMapper we are building.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.DataExchangeFactory">
            <summary>
            A factory for DataExchange objects
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.IsCallFromDao">
            <summary>
            Tell us if we are in a DataAccess context.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.IsCacheModelsEnabled">
            <summary>
            Tell us if we cache model is enabled.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.DataSource">
            <summary>
            External data source
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.NodeContext">
            <summary>
            The current context node we are analizing
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.SqlMapConfigDocument">
            <summary>
            The XML SqlMap config file
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.SqlMapDocument">
            <summary>
            A XML SqlMap file
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.UseConfigFileWatcher">
            <summary>
            Tell us if we use Configuration File Watcher
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.UseStatementNamespaces">
            <summary>
            Tell us if we use statements namespaces
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.ErrorContext">
            <summary>
             Get the request's error context
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.Providers">
            <summary>
             List of providers
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.Properties">
            <summary>
             List of global properties
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.UseReflectionOptimizer">
            <summary>
            Indicates if we can use reflection optimizer.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.CacheModelFlushOnExecuteStatements">
            <summary>
            Temporary storage for mapping cache model ids (key is System.String) to statements (value is IList which contains IMappedStatements).
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ConfigurationScope.LazyFactoryType">
            <summary>
                Provides the <see cref="!:ILazyFactory" /> implementation
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.ConfigurationScope.ApplyNamespace(System.String)">
            <summary>
            Register under Statement Name or Fully Qualified Statement Name
            </summary>
            <param name="id">An Identity</param>
            <returns>The new Identity</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.ConfigurationScope.ResolveTypeHandler(System.Type,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Resolves the type handler.
            </summary>
            <param name="clazz">The clazz.</param>
            <param name="memberName">Name of the member.</param>
            <param name="clrType">Type of the CLR.</param>
            <param name="dbType">Type of the db.</param>
            <param name="forSetter">if set to <c>true</c> [for setter].</param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Scope.ErrorContext">
            <summary>
            An error context to help us create meaningful error messages.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ErrorContext.Resource">
            <summary>
            The resource causing the problem
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ErrorContext.Activity">
            <summary>
            The activity that was happening when the error happened
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ErrorContext.ObjectId">
            <summary>
            The object ID where the problem happened
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.ErrorContext.MoreInfo">
            <summary>
            More information about the error
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.ErrorContext.Reset">
            <summary>
            Clear the error context
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.ErrorContext.ToString">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Scope.IScope">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.IScope.ErrorContext">
            <summary>
             Get the error context
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.IScope.DataExchangeFactory">
            <summary>
            The factory for DataExchange objects
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Scope.RequestScope">
            <summary>
            Hold data during the process of a mapped statement.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.RequestScope.GetUniqueKeys(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap)">
            <summary>
            Gets the unique keys.
            </summary>
            <param name="map">The ResultMap.</param>
            <returns>
            Returns [key, result object] which holds the result objects that have  
            already been build during this request with this <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap"/>
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.RequestScope.SetUniqueKeys(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap,System.Collections.IDictionary)">
            <summary>
            Sets the unique keys.
            </summary>
            <param name="map">The map.</param>
            <param name="keys">The keys.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.MappedStatement">
            <summary>
             The current <see cref="T:SqlBatis.DataMapper.MappedStatements.IMappedStatement"/>.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.Statement">
            <summary>
            Gets the current <see cref="T:SqlBatis.DataMapper.Configuration.Statements.IStatement"/>.
            </summary>
            <value>The statement.</value>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.Session">
            <summary>
             The current <see cref="T:SqlBatis.DataMapper.ISqlMapSession"/>.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.IDbCommand">
            <summary>
             The <see cref="P:SqlBatis.DataMapper.Scope.RequestScope.IDbCommand"/> to execute
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.IsRowDataFound">
            <summary>
             Indicate if the statement have find data
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.QueueSelect">
            <summary>
            The 'select' result property to process after having process the main properties.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.CurrentResultMap">
            <summary>
            The current <see cref="T:SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap"/> used by this request.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.RequestScope.MoveNextResultMap">
            <summary>
            Moves to the next result map.
            </summary>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.ParameterMap">
            <summary>
            The <see cref="P:SqlBatis.DataMapper.Scope.RequestScope.ParameterMap"/> used by this request.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.PreparedStatement">
            <summary>
            The <see cref="P:SqlBatis.DataMapper.Scope.RequestScope.PreparedStatement"/> used by this request.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.RequestScope.#ctor(SqlBatis.DataMapper.DataExchange.DataExchangeFactory,SqlBatis.DataMapper.ISqlMapSession,SqlBatis.DataMapper.Configuration.Statements.IStatement)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Scope.RequestScope"/> class.
            </summary>
            <param name="dataExchangeFactory">The data exchange factory.</param>
            <param name="session">The session.</param>
            <param name="statement">The statement</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.RequestScope.Equals(System.Object)">
            <summary>
            Check if the specify object is equal to the current object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.RequestScope.GetHashCode">
            <summary>
            Get the HashCode for this RequestScope
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Scope.RequestScope.GetNextId">
            <summary>
            Method to get a unique ID
            </summary>
            <returns>The new ID</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.DataExchangeFactory">
            <summary>
            A factory for DataExchange objects
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Scope.RequestScope.ErrorContext">
            <summary>
             Get the request's error context
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.SessionStore.AbstractSessionStore">
            <summary>
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.SessionStore.AbstractSessionStore.sessionName">
            <summary>
                session name
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.AbstractSessionStore.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.SessionStore.AbstractSessionStore" /> class.
            </summary>
            <param name="sqlMapperId">The SQL mapper id.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.SessionStore.AbstractSessionStore.LocalSession">
            <summary>
                Get the local session
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.AbstractSessionStore.Store(SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
                Store the specified session.
            </summary>
            <param name="session">The session to store</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.AbstractSessionStore.Dispose">
            <summary>
                Remove the local session from the storage.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.SessionStore.AsyncLocalSessionStore">
            <summary>
                This implementation of <see cref="T:SqlBatis.DataMapper.SessionStore.ISessionStore" /> using <see cref="T:System.Threading.AsyncLocal`1"/>.
            </summary>
            <remarks>
                This replaces all previous sessions stores and the only option for .net standard.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.AsyncLocalSessionStore.#ctor(System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.SessionStore.AsyncLocalSessionStore" /> class.
            </summary>
            <param name="sqlMapperId">The SQL mapper id.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.SessionStore.AsyncLocalSessionStore.LocalSession">
            <summary>
                Get the local session
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.AsyncLocalSessionStore.Store(SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
                Store the specified session.
            </summary>
            <param name="session">The session to store</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.AsyncLocalSessionStore.Dispose">
            <summary>
                Remove the local session.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.SessionStore.ISessionStore">
            <summary>
                Provides the contract for implementors who want to store session.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SessionStore.ISessionStore.LocalSession">
            <summary>
                Get the local session
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.ISessionStore.Store(SqlBatis.DataMapper.ISqlMapSession)">
            <summary>
                Store the specified session.
            </summary>
            <param name="session">The session to store</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.ISessionStore.Dispose">
            <summary>
                Remove the local session from the storage.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.SessionStore.SessionStoreFactory">
            <summary>
                Build a session container for a Windows or Web context.
                When running in the context of a web application the session object is
                stored in HttpContext items and has 'per request' lifetime.
                When running in the context of a windows application the session object is
                stored via CallContext.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SessionStore.SessionStoreFactory.GetSessionStore(System.String)">
            <summary>
                Gets the session store.
            </summary>
            <param name="sqlMapperId">The SQL mapper id.</param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.SqlMapper">
            <summary>
            Summary description for SqlMap.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.SqlMapper._sessionStore">
            <summary>
            Container session unique for each thread. 
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.Id">
            <summary>
            Name used to identify the the <see cref="T:SqlBatis.DataMapper.SqlMapper"/>
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.SessionStore">
            <summary>
            Allow to set a custom session store like the <see cref="!:HybridWebThreadSessionStore"/>
            </summary>
            <remarks>Set it after the configuration and before use of the <see cref="T:SqlBatis.DataMapper.SqlMapper"/></remarks>
            <example>
            sqlMapper.SessionStore = new HybridWebThreadSessionStore( sqlMapper.Id );
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.LocalSession">
            <summary>
             Returns the DalSession instance 
             currently being used by the SqlMap.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.IsSessionStarted">
            <summary>
            Gets a value indicating whether this instance is session started.
            </summary>
            <value>
            	<c>true</c> if this instance is session started; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.DBHelperParameterCache">
            <summary>
            Gets the DB helper parameter cache.
            </summary>
            <value>The DB helper parameter cache.</value>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.DataExchangeFactory">
            <summary>
            Factory for DataExchange objects
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.TypeHandlerFactory">
            <summary>
            The TypeHandlerFactory
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.ObjectFactory">
            <summary>
            The meta factory for object factory
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.AccessorFactory">
            <summary>
            The factory which build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IAccessor"/>
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.IsCacheModelsEnabled">
            <summary>
            A flag that determines whether cache models were enabled 
            when this SqlMap was built.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.#ctor(SqlBatis.DataMapper.Utilities.Objects.IObjectFactory,SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.SqlMapper"/> class.
            </summary>
            <param name="objectFactory">The object factory.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.OpenConnection">
            <summary>
            Open a connection
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.OpenConnection(System.String)">
            <summary>
            Open a connection, on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.CloseConnection">
            <summary>
            Open a connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.BeginTransaction(System.String)">
            <summary>
            Open a connection and begin a transaction on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.BeginTransaction(System.Boolean)">
            <summary>
            Begins a database transaction on the currect session
            </summary>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">
            The isolation level under which the transaction should run.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.BeginTransaction(System.String,System.Data.IsolationLevel)">
            <summary>
            Open a connection and begin a transaction on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.BeginTransaction(System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Start a database transaction on the current session
            with the specified isolation level.
            </summary>
            <param name="openNewConnection">Open a connection.</param>
            <param name="isolationLevel">
            The isolation level under which the transaction should run.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.BeginTransaction(System.String,System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Begins a transaction on the current connection
            with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
            <param name="connectionString">The connection string</param>
            <param name="openNewConnection">Open a connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.CommitTransaction">
            <summary>
            Commits the database transaction.
            </summary>
            <remarks>
            Will close the connection.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.CommitTransaction(System.Boolean)">
            <summary>
            Commits the database transaction.
            </summary>
            <param name="closeConnection">Close the connection</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.RollBackTransaction">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <remarks>
            Will close the connection.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.RollBackTransaction(System.Boolean)">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <param name="closeConnection">Close the connection</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForObject(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns that returns data 
            to populate a single object instance.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns> The single result object populated with the result set data.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForObject(System.String,System.Object,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns a single object of the type of the
            resultObject parameter.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An object of the type to be returned.</param>
            <returns>The single result object populated with the result set data.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForObject``1(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns that returns data 
            to populate a single object instance.
            <p/>
            The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns> The single result object populated with the result set data.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForObject``1(System.String,System.Object,``0)">
            <summary>
            Executes a Sql SELECT statement that returns a single object of the type of the
            resultObject parameter.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="instanceObject">An object of the type to be returned.</param>
            <returns>The single result object populated with the result set data.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForDictionary(System.String,System.Object,System.String)">
            <summary>
             Alias to QueryForMap, .NET spirit.
             Feature idea by Ted Husted.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForDictionary(System.String,System.Object,System.String,System.String)">
             <summary>
             Alias to QueryForMap, .NET spirit.
              Feature idea by Ted Husted.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForMap(System.String,System.Object,System.String)">
            <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the entire result object.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForMap(System.String,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForList(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForList(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns all rows selected.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForList(System.String,System.Object,System.Collections.IList)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An Ilist object used to hold the objects.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForDictionary``2(System.String,System.Object,System.String,System.String)">
             <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the value of the property specified
             in the valueProperty parameter.  If valueProperty is null, the entire result object will be entered.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForDictionary``2(System.String,System.Object,System.String)">
            <summary>
             Executes the SQL and retuns all rows selected in a map that is keyed on the property named
             in the keyProperty parameter.  The value at each key will be the entire result object.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="keyProperty">The property of the result object to be used as the key.</param>
            <returns>A IDictionary of object containing the rows keyed by keyProperty.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForDictionary``2(System.String,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate{``0,``1})">
             <summary>
             Runs a query with a custom object that gets a chance to deal 
             with each row as it is processed.
             <p/>
              The parameter object is generally used to supply the input
             data for the WHERE clause parameter(s) of the SELECT statement.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate">A delegate called once per row in the QueryForDictionary method></param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForList``1(System.String,System.Object)">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForList``1(System.String,System.Object,System.Int32,System.Int32)">
            <summary>
            Executes the SQL and retuns all rows selected.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="skipResults">The number of rows to skip over.</param>
            <param name="maxResults">The maximum number of rows to return.</param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForList``1(System.String,System.Object,System.Collections.Generic.IList{``0})">
            <summary>
            Executes a Sql SELECT statement that returns data to populate
            a number of result objects.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="resultObject">An Ilist object used to hold the objects.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForPaginatedList(System.String,System.Object,System.Int32)">
            <summary>
            Executes the SQL and retuns a subset of the results in a dynamic PaginatedList that can be used to
            automatically scroll through results from a database table.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL</param>
            <param name="pageSize">The maximum number of objects to store in each page</param>
            <returns>A PaginatedList of beans containing the rows</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryWithRowDelegate(System.String,System.Object,SqlBatis.DataMapper.RowDelegate)">
            <summary>
            Runs a query for list with a custom object that gets a chance to deal 
            with each row as it is processed.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryWithRowDelegate``1(System.String,System.Object,SqlBatis.DataMapper.RowDelegate{``0})">
            <summary>
            Runs a query for list with a custom object that gets a chance to deal 
            with each row as it is processed.
            <p/>
             The parameter object is generally used to supply the input
            data for the WHERE clause parameter(s) of the SELECT statement.
            </summary>
            <param name="statementName">The name of the sql statement to execute.</param>
            <param name="parameterObject">The object used to set the parameters in the SQL.</param>
            <param name="rowDelegate"></param>
            <returns>A List of result objects.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.QueryForMapWithRowDelegate(System.String,System.Object,System.String,System.String,SqlBatis.DataMapper.DictionaryRowDelegate)">
             <summary>
             Runs a query with a custom object that gets a chance to deal 
             with each row as it is processed.
             <p/>
              The parameter object is generally used to supply the input
             data for the WHERE clause parameter(s) of the SELECT statement.
             </summary>
             <param name="statementName">The name of the sql statement to execute.</param>
             <param name="parameterObject">The object used to set the parameters in the SQL.</param>
             <param name="keyProperty">The property of the result object to be used as the key.</param>
             <param name="valueProperty">The property of the result object to be used as the value (or null)</param>
             <param name="rowDelegate"></param>
             <returns>A IDictionary (Hashtable) of object containing the rows keyed by keyProperty.</returns>
            <exception cref="T:SqlBatis.DataMapper.Exceptions.DataMapperException">If a transaction is not in progress, or the database throws an exception.</exception>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.Insert(System.String,System.Object)">
            <summary>
            Executes a Sql INSERT statement.
            Insert is a bit different from other update methods, as it
            provides facilities for returning the primary key of the
            newly inserted row (rather than the effected rows).  This
            functionality is of course optional.
            <p/>
            The parameter object is generally used to supply the input
            data for the INSERT values.
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns> The primary key of the newly inserted row.  
            This might be automatically generated by the RDBMS, 
            or selected from a sequence table or other source.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.Update(System.String,System.Object)">
            <summary>
            Executes a Sql UPDATE statement.
            Update can also be used for any other update statement type,
            such as inserts and deletes.  Update returns the number of
            rows effected.
            <p/>
            The parameter object is generally used to supply the input
            data for the UPDATE values as well as the WHERE clause parameter(s).
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.Delete(System.String,System.Object)">
            <summary>
             Executes a Sql DELETE statement.
             Delete returns the number of rows effected.
            </summary>
            <param name="statementName">The name of the statement to execute.</param>
            <param name="parameterObject">The parameter object.</param>
            <returns>The number of rows effected.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.GetMappedStatement(System.String)">
            <summary>
            Gets a MappedStatement by name
            </summary>
            <param name="id"> The id of the statement</param>
            <returns> The MappedStatement</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.AddMappedStatement(System.String,SqlBatis.DataMapper.MappedStatements.IMappedStatement)">
            <summary>
            Adds a (named) MappedStatement.
            </summary>
            <param name="key"> The key name</param>
            <param name="mappedStatement">The statement to add</param>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.MappedStatements">
            <summary>
            The MappedStatements collection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.GetParameterMap(System.String)">
            <summary>
            Get a ParameterMap by name
            </summary>
            <param name="name">The name of the ParameterMap</param>
            <returns>The ParameterMap</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.AddParameterMap(SqlBatis.DataMapper.Configuration.ParameterMapping.ParameterMap)">
            <summary>
            Adds a (named) ParameterMap.
            </summary>
            <param name="parameterMap">the ParameterMap to add</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.GetResultMap(System.String)">
            <summary>
            Gets a ResultMap by name
            </summary>
            <param name="name">The name of the result map</param>
            <returns>The ResultMap</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.AddResultMap(SqlBatis.DataMapper.Configuration.ResultMapping.IResultMap)">
            <summary>
            Adds a (named) ResultMap
            </summary>
            <param name="resultMap">The ResultMap to add</param>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.ParameterMaps">
            <summary>
            The ParameterMap collection
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.ResultMaps">
            <summary>
            The ResultMap collection
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapper.DataSource">
            <summary>
            The DataSource
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.FlushCaches">
            <summary>
            Flushes all cached objects that belong to this SqlMap
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.AddCache(SqlBatis.DataMapper.Configuration.Cache.CacheModel)">
            <summary>
            Adds a (named) cache.
            </summary>
            <param name="cache">The cache to add</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.GetCache(System.String)">
            <summary>
            Gets a cache by name
            </summary>
            <param name="name">The name of the cache to get</param>
            <returns>The cache object</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.GetDataCacheStats">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.CreateSqlMapSession">
            <summary>
            Creates a new SqlMapSession that will be used to query the data source.
            </summary>
            <returns>A new session</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapper.CreateSqlMapSession(System.String)">
            <summary>
            Creates the SQL map session.
            </summary>
            <param name="connectionString">The connection string.</param>
            <returns>A new session</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.SqlMapSession">
            <summary>
            Summary description for SqlMapSession.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.#ctor(SqlBatis.DataMapper.ISqlMapper)">
            <summary>
            
            </summary>
            <param name="sqlMapper"></param>
        </member>
        <member name="F:SqlBatis.DataMapper.SqlMapSession._consistent">
            <summary>
            Changes the vote to commit (true) or to abort (false) in transsaction
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.SqlMapSession._connection">
            <summary>
            Holds value of connection
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.SqlMapSession._transaction">
            <summary>
            Holds value of transaction
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapSession.SqlMapper">
            <summary>
            Gets the SQL mapper.
            </summary>
            <value>The SQL mapper.</value>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapSession.DataSource">
            <summary>
            The data source use by the session.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapSession.Connection">
            <summary>
            The Connection use by the session.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapSession.Transaction">
            <summary>
            The Transaction use by the session.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapSession.IsTransactionStart">
            <summary>
            Indicates if a transaction is open  on
            the session.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.SqlMapSession.Consistent">
            <summary>
            Changes the vote for transaction to commit (true) or to abort (false).
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.Complete">
            <summary>
            Complete (commit) a transaction
            </summary>
            <remarks>
            Use in 'using' syntax.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.OpenConnection">
            <summary>
            Open the connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CreateConnection">
            <summary>
            Create the connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CreateConnection(System.String)">
            <summary>
            Create the connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.OpenConnection(System.String)">
            <summary>
            Open a connection, on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CloseConnection">
            <summary>
            Close the connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.BeginTransaction">
            <summary>
            Begins a database transaction.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.BeginTransaction(System.String)">
            <summary>
            Open a connection and begin a transaction on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.BeginTransaction(System.Boolean)">
            <summary>
            Begins a database transaction
            </summary>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
            Begins a database transaction with the specified isolation level.
            </summary>
            <param name="isolationLevel">
            The isolation level under which the transaction should run.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.BeginTransaction(System.String,System.Data.IsolationLevel)">
            <summary>
            Open a connection and begin a transaction on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.BeginTransaction(System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Begins a transaction on the current connection
            with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.BeginTransaction(System.String,System.Boolean,System.Data.IsolationLevel)">
            <summary>
            Begins a transaction on the current connection
            with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
            <param name="connectionString">The connection string</param>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CommitTransaction">
            <summary>
            Commits the database transaction.
            </summary>
            <remarks>
            Will close the connection.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CommitTransaction(System.Boolean)">
            <summary>
            Commits the database transaction.
            </summary>
            <param name="closeConnection">Close the connection</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.RollBackTransaction">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <remarks>
            Will close the connection.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.RollBackTransaction(System.Boolean)">
            <summary>
            Rolls back a transaction from a pending state.
            </summary>
            <param name="closeConnection">Close the connection</param>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CreateCommand(System.Data.CommandType)">
            <summary>
            Create a command object
            </summary>
            <param name="commandType"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CreateDataParameter">
            <summary>
            Create an IDataParameter
            </summary>
            <returns>An IDataParameter.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CreateDataAdapter">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
            
            </summary>
            <param name="command"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.SqlMapSession.Dispose">
            <summary>
            Releasing, or resetting resources.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler">
            <summary>
            TypeHandler for AnsiString dbType
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.AnsiStringTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler">
            <summary>
            Summary description for BaseTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BaseTypeHandler.Equals(System.Object,System.String)">
            <summary>
             Compares two values (that this handler deals with) for equality
            </summary>
            <param name="obj">one of the objects</param>
            <param name="str">the other object as a String</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.BooleanTypeHandler">
            <summary>
            Boolean TypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BooleanTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BooleanTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BooleanTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.BooleanTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.BooleanTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler">
            <summary>
            Description résumée de ByteArrayTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.GetValueByIndex(System.Int32,System.Data.IDataReader)">
            <summary>
            Gets the index of the value by.
            </summary>
            <param name="columnIndex">Index of the column.</param>
            <param name="dataReader">The data reader.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ByteArrayTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.ByteTypeHandler">
            <summary>
            Description résumée de ByteTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ByteTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ByteTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.CharTypeHandler">
            <summary>
            Description résumée de CharTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CharTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CharTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CharTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CharTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.CharTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler">
            <summary>
            Custom type handler for adding a TypeHandlerCallback
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.#ctor(SqlBatis.DataMapper.TypeHandlers.ITypeHandlerCallback)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler"/> class.
            </summary>
            <param name="callback">The callback.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.Callback">
            <summary>
            Gets or sets the callback.
            </summary>
            <value>The callback.</value>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Performs processing on a value before it is used to set
            the parameter of a IDbCommand.
            </summary>
            <param name="dataParameter"></param>
            <param name="parameterValue">The value to be set</param>
            <param name="dbType">Data base type</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.CustomTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.DateTimeTypeHandler">
            <summary>
            Description résumée de DateTimeTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.DateTimeTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.DBNullTypeHandler">
            <summary>
            DBNull TypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DBNullTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DBNullTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DBNullTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.DBNullTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DBNullTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DBNullTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.DecimalTypeHandler">
            <summary>
            DecimalTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DecimalTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DecimalTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DecimalTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
            <remarks>
            value decimal must be  in format ######.##
            where . is separator for decimal
            </remarks> 
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DecimalTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.DecimalTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.DoubleTypeHandler">
            <summary>
            Description résumée de Double.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DoubleTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DoubleTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DoubleTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.DoubleTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.DoubleTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.EnumTypeHandler">
            <summary>
            Summary description for EnumTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.EnumTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.EnumTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.EnumTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.EnumTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.EnumTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.EnumTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.GuidTypeHandler">
            <summary>
            Description résumée de GuidTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.GuidTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.GuidTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.GuidTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.GuidTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.GuidTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Int16TypeHandler">
            <summary>
            Description résumée de Int16TypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int16TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int16TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int16TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int16TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Int16TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Int32TypeHandler">
            <summary>
            Summary description for Int32TypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int32TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int32TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int32TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int32TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Int32TypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Int64TypeHandler">
            <summary>
            Description résumée de Int64TypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int64TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int64TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int64TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Int64TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Int64TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.IParameterSetter">
            <summary>
            Allows parameters to be set on the underlying prepared IDbCommand.
            TypeHandlerCallback implementations use this interface to
            process values before they are set on the IDbCommand.
            </summary>
            <remarks>
            There is no need to implement this.  The implementation
            will be passed into the TypeHandlerCallback automatically.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.IParameterSetter.DataParameter">
            <summary>
            Returns the underlying IDataParameter
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.IParameterSetter.Value">
            <summary>
            Get the parameter value
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.IResultGetter">
            <summary>
            Allows values to be retrieved from the underlying IDataReader.
            TypeHandlerCallback implementations use this interface to
            get values that they can subsequently manipulate before
            having them returned.  																																																														   * or index with these methods.
            </summary>
            <remarks>
            There is no need to implement this.  The implementation
            will be passed into the TypeHandlerCallback automatically.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.IResultGetter.DataReader">
            <summary>
            Returns the underlying IDataReader
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.IResultGetter.Value">
            <summary>
            Get the parameter value
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.ITypeHandler">
            <summary>
            Summary description for ITypeHandler.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ITypeHandler.IsSimpleType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandler.Equals(System.Object,System.String)">
            <summary>
             Compares two values (that this handler deals with) for equality
            </summary>
            <param name="obj">one of the objects</param>
            <param name="str">the other object as a String</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ITypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.ITypeHandlerCallback">
            <summary>
            A simple interface for implementing custom type handlers.
            <p/>
            Using this interface, you can implement a type handler that
            will perform customized processing before parameters are set
            on a IDbCommand and after values are retrieved from
            a IDataReader.  Using a custom type handler you can extend
            the framework to handle types that are not supported, or
            handle supported types in a different way.  For example,
            you might use a custom type handler to implement proprietary
            BLOB support (e.g. Oracle), or you might use it to handle
            booleans using "Y" and "N" instead of the more typical 0/1.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandlerCallback.SetParameter(SqlBatis.DataMapper.TypeHandlers.IParameterSetter,System.Object)">
            <summary>
            Performs processing on a value before it is used to set
            the parameter of a IDbCommand.
            </summary>
            <param name="setter">The interface for setting the value on the IDbCommand.</param>
            <param name="parameter">The value to be set</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandlerCallback.GetResult(SqlBatis.DataMapper.TypeHandlers.IResultGetter)">
            <summary>
            Performs processing on a value before after it has been retrieved
            from a IDataReader.
            </summary>
            <param name="getter">The interface for getting the value from the IDataReader.</param>
            <returns>The processed value.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ITypeHandlerCallback.ValueOf(System.String)">
            <summary>
            Casts the string representation of a value into a type recognized by
            this type handler.  This method is used to translate nullValue values
            into types that can be appropriately compared.  If your custom type handler
            cannot support nullValues, or if there is no reasonable string representation
            for this type (e.g. File type), you can simply return the String representation
            as it was passed in.  It is not recommended to return null, unless null was passed
            in.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ITypeHandlerCallback.NullValue">
            <summary>
            The null value for this type
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler">
            <summary>
            TypeHandler for Nullable Boolean Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableBooleanTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler">
            <summary>
            TypeHandler for  Nullable Byte Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableByteTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler">
            <summary>
            TypeHandler for Nullable char Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableCharTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler">
            <summary>
            
            </summary>
            <remarks>System.TimeSpan is map to DbType.Int64 </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDateTimeTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler">
            <summary>
            TypeHandler for Nullable decimal Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
            <remarks>
            value decimal must be  in format ######.##
             where . is separator for decimal
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDecimalTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler">
            <summary>
            TypeHandler for Nullable double Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableDoubleTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler">
            <summary>
            TypeHandler for Nullable Guid type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableGuidTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler">
            <summary>
            TypeHandler for Nullable UInt16 Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt16TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler">
            <summary>
            TypeHandler for Nullable Int32 Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt32TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler">
            <summary>
            TypeHandler for Nullable Int64 Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value 
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableInt64TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler">
            <summary>
            TypeHandler for SByte TimeSpan Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSByteTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler">
            <summary>
            TypeHandler for Nullable Single type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableSingleTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler">
            <summary>
            TypeHandler for Nullable TimeSpan Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableTimeSpanTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler">
            <summary>
            TypeHandler for Nullable Int16 type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt16TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler">
            <summary>
            Summary description for Int32TypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt32TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler">
            <summary>
            TypeHandler for Nullable UInt64 Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.Nullables.NullableUInt64TypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.ObjectTypeHandler">
            <summary>
            Description résumée de ObjectTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ObjectTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ObjectTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ObjectTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ObjectTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ObjectTypeHandler.IsSimpleType">
            <summary>
            Tell us if ot is a 'primitive' type
            </summary>
            <value></value>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.ParameterSetterImpl">
            <summary>
            A ParameterSetter implementation
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ParameterSetterImpl.#ctor(System.Data.IDataParameter)">
            <summary>
            Default Constructor
            </summary>
            <param name="dataParameter"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ParameterSetterImpl.DataParameter">
            <summary>
            Returns the underlying DataParameter
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ParameterSetterImpl.Value">
            <summary>
            Set the parameter value
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.ResultGetterImpl">
            <summary>
            Description résumée de ResultGetterImpl.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ResultGetterImpl.#ctor(System.Data.IDataReader,System.Int32)">
            <summary>
            Creates an instance for a IDataReader and column index
            </summary>
            <param name="dataReader">The dataReader</param>
            <param name="columnIndex">the column index</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ResultGetterImpl.#ctor(System.Data.IDataReader,System.String)">
            <summary>
            Creates an instance for a IDataReader and column name
            </summary>
            <param name="dataReader">The dataReader</param>
            <param name="columnName">the column name</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.ResultGetterImpl.#ctor(System.Object)">
            <summary>
            Creates an instance for an output parameter
            </summary>
            <param name="outputValue">value of an output parameter (store procedure)</param>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ResultGetterImpl.DataReader">
            <summary>
            Returns the underlying IDataReader
            </summary>
            <remarks>Null for an output parameter</remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.ResultGetterImpl.Value">
            <summary>
            Get the parameter value
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.SByteTypeHandler">
            <summary>
            SByteTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.SByteTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.SByteTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.SByteTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.SByteTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.SByteTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.SByteTypeHandler.NullValue">
            <summary>
            The null value for this type
            </summary>
            <value></value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.SingleTypeHandler">
            <summary>
            Description résumée de SingleTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.SingleTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.SingleTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.SingleTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.SingleTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.SingleTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.StringTypeHandler">
            <summary>
            Description résumée de SByteTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.StringTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.StringTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.StringTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.StringTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.StringTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler">
            <summary>
            Description résumée de TimespanTypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
             Sets a parameter on a IDbCommand
            </summary>
            <param name="dataParameter">the parameter</param>
            <param name="parameterValue">the parameter value</param>
            <param name="dbType">the dbType of the parameter</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.TimeSpanTypeHandler.IsSimpleType">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory">
            <summary>
            Not much of a suprise, this is a factory class for TypeHandler objects.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetTypeHandler(System.Type)">
            <summary>
            Get a TypeHandler for a Type
            </summary>
            <param name="type">the Type you want a TypeHandler for</param>
            <returns>the handler</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetTypeHandler(System.Type,System.String)">
            <summary>
            Get a TypeHandler for a type
            </summary>
            <param name="type">the type you want a TypeHandler for</param>
            <param name="dbType">the database type</param>
            <returns>the handler</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetPrivateTypeHandler(System.Type,System.String)">
            <summary>
             Get a TypeHandler for a type and a dbType type
            </summary>
            <param name="type">the type</param>
            <param name="dbType">the dbType type</param>
            <returns>the handler</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.Register(System.Type,SqlBatis.DataMapper.TypeHandlers.ITypeHandler)">
            <summary>
            Register (add) a type handler for a type
            </summary>
            <param name="type">the type</param>
            <param name="handler">the handler instance</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.Register(System.Type,System.String,SqlBatis.DataMapper.TypeHandlers.ITypeHandler)">
            <summary>
            Register (add) a type handler for a type and dbType
            </summary>
            <param name="type">the type</param>
            <param name="dbType">the dbType (optional, if dbType is null the handler will be used for all dbTypes)</param>
            <param name="handler">the handler instance</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetUnkownTypeHandler">
            <summary>
            When in doubt, get the "unknown" type handler
            </summary>
            <returns>if I told you, it would not be unknown, would it?</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.IsSimpleType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetTypeAlias(System.String)">
            <summary>
            Gets a named TypeAlias from the list of available TypeAlias
            </summary>
            <param name="name">The name of the TypeAlias.</param>
            <returns>The TypeAlias.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.GetType(System.String)">
            <summary>
            Gets the type object from the specific class name.
            </summary>
            <param name="className">The supplied class name.</param>
            <returns>The correpsonding type.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory.AddTypeAlias(System.String,SqlBatis.DataMapper.Configuration.Alias.TypeAlias)">
            <summary>
            Adds a named TypeAlias to the list of available TypeAlias.
            </summary>
            <param name="key">The key name.</param>
            <param name="typeAlias"> The TypeAlias.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.UInt16TypeHandler">
            <summary>
            TypeHandler for UInt16 Type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt16TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt16TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt16TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt16TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.UInt16TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.UInt32TypeHandler">
            <summary>
            UInt32TypeHandler
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt32TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt32TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt32TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt32TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.UInt32TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.UInt64TypeHandler">
            <summary>
            Summary description for UInt64TypeHandler.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt64TypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt64TypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt64TypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UInt64TypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.UInt64TypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler">
            <summary>
             Implementation of TypeHandler for dealing with unknown types
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler.#ctor(SqlBatis.DataMapper.TypeHandlers.TypeHandlerFactory)">
            <summary>
            Constructor to create via a factory
            </summary>
            <param name="factory">the factory to associate this with</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler.SetParameter(System.Data.IDataParameter,System.Object,System.String)">
            <summary>
            Performs processing on a value before it is used to set
            the parameter of a IDbCommand.
            </summary>
            <param name="dataParameter"></param>
            <param name="parameterValue">The value to be set</param>
            <param name="dbType">Data base type</param>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler.GetValueByName(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the name
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler.GetValueByIndex(SqlBatis.DataMapper.Configuration.ResultMapping.ResultProperty,System.Data.IDataReader)">
            <summary>
            Gets a column value by the index
            </summary>
            <param name="mapping"></param>
            <param name="dataReader"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler.ValueOf(System.Type,System.String)">
            <summary>
            Converts the String to the type that this handler deals with
            </summary>
            <param name="type">the tyepe of the property (used only for enum conversion)</param>
            <param name="s">the String value</param>
            <returns>the converted value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler.GetDataBaseValue(System.Object,System.Type)">
            <summary>
            Retrieve ouput database value of an output parameter
            </summary>
            <param name="outputValue">ouput database value</param>
            <param name="parameterType">type used in EnumTypeHandler</param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler.IsSimpleType">
            <summary>
            Gets a value indicating whether this instance is simple type.
            </summary>
            <value>
            	<c>true</c> if this instance is simple type; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:SqlBatis.DataMapper.TypeHandlers.UnknownTypeHandler.Equals(System.Object,System.String)">
            <summary>
             Compares two values (that this handler deals with) for equality
            </summary>
            <param name="obj">one of the objects</param>
            <param name="str">the other object as a String</param>
            <returns>true if they are equal</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.DataSource">
            <summary>
                Information about a data source.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DataSource.ConnectionString">
            <summary>
                The connection string.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DataSource.Name">
            <summary>
                DataSource Name
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DataSource.DbProvider">
            <summary>
                The provider to use for this data source.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataSource.ToString">
            <summary>
                ToString implementation.
            </summary>
            <returns>A string that describes the data source</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.DataSourceDeSerializer">
            <summary>
                Summary description for DataSourceDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DataSourceDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
                Deserialize a DataSource object
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.DbProvider">
            <summary>
                Information about a data provider.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.AssemblyName">
            <summary>
                The name of the assembly which conatins the definition of the provider.
            </summary>
            <example>Examples : "System.Data", "Microsoft.Data.Odbc"</example>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.IsDefault">
            <summary>
                Tell us if it is the default data source.
                Default false.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.IsEnabled">
            <summary>
                Tell us if this provider is enabled.
                Default true.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.AllowMARS">
            <summary>
                Tell us if this provider allows having multiple open <see cref="T:System.Data.IDataReader" /> with
                the same <see cref="T:System.Data.IDbConnection" />.
            </summary>
            <remarks>
                It's a new feature in ADO.NET 2.0 and Sql Server 2005 that allows for multiple forward only read only result sets
                (MARS).
                Some databases have supported this functionality for a long time :
                Not Supported : DB2, MySql.Data, OLE DB provider [except Sql Server 2005 when using MDAC 9], SQLite, Obdc
                Supported :  Sql Server 2005, Npgsql
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.DbConnectionClass">
            <summary>
                The connection class name to use.
            </summary>
            <example>
                "System.Data.OleDb.OleDbConnection",
                "System.Data.SqlClient.SqlConnection",
                "Microsoft.Data.Odbc.OdbcConnection"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.UseParameterPrefixInSql">
            <summary>
                Does this ConnectionProvider require the use of a Named Prefix in the SQL
                statement.
            </summary>
            <remarks>
                The OLE DB/ODBC .NET Provider does not support named parameters for
                passing parameters to an SQL Statement or a stored procedure called
                by an IDbCommand when CommandType is set to Text.
                For example, SqlClient requires select * from simple where simple_id = @simple_id
                If this is false, like with the OleDb or Obdc provider, then it is assumed that
                the ? can be a placeholder for the parameter in the SQL statement when CommandType
                is set to Text.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.UseParameterPrefixInParameter">
            <summary>
                Does this ConnectionProvider require the use of the Named Prefix when trying
                to reference the Parameter in the Command's Parameter collection.
            </summary>
            <remarks>
                This is really only useful when the UseParameterPrefixInSql = true.
                When this is true the code will look like IDbParameter param = cmd.Parameters["@paramName"],
                if this is false the code will be IDbParameter param = cmd.Parameters["paramName"] - ie - Oracle.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.UsePositionalParameters">
            <summary>
                The OLE DB/OBDC .NET Provider uses positional parameters that are marked with a
                question mark (?) instead of named parameters.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.SetDbParameterSize">
            <summary>
                Used to indicate whether or not the provider
                supports parameter size.
            </summary>
            <remarks>
                See JIRA-49 about SQLite.Net provider not supporting parameter size.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.SetDbParameterPrecision">
            <summary>
                Used to indicate whether or not the provider
                supports parameter precision.
            </summary>
            <remarks>
                See JIRA-49 about SQLite.Net provider not supporting parameter precision.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.SetDbParameterScale">
            <summary>
                Used to indicate whether or not the provider
                supports a parameter scale.
            </summary>
            <remarks>
                See JIRA-49 about SQLite.Net provider not supporting parameter scale.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.UseDeriveParameters">
            <summary>
                Used to indicate whether or not the provider
                supports DeriveParameters method for procedure.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.DbCommandClass">
            <summary>
                The command class name to use.
            </summary>
            <example>
                "System.Data.SqlClient.SqlCommand"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.ParameterDbTypeClass">
            <summary>
                The ParameterDbType class name to use.
            </summary>
            <example>
                "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.ParameterDbTypeProperty">
            <summary>
                The ParameterDbTypeProperty class name to use.
            </summary>
            <example>
                SqlDbType in SqlParamater.SqlDbType,
                OracleType in OracleParameter.OracleType.
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.DataAdapterClass">
            <summary>
                The dataAdapter class name to use.
            </summary>
            <example>
                "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.CommandBuilderClass">
            <summary>
                The commandBuilder class name to use.
            </summary>
            <example>
                "System.Data.OleDb.OleDbCommandBuilder",
                "System.Data.SqlClient.SqlCommandBuilder",
                "Microsoft.Data.Odbc.OdbcCommandBuilder"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.Name">
            <summary>
                Name used to identify the provider amongst the others.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.Description">
            <summary>
                Description.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.ParameterPrefix">
            <summary>
                Parameter prefix use in store procedure.
            </summary>
            <example> @ for Sql Server.</example>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.IsObdc">
            <summary>
                Check if this provider is Odbc ?
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.CommandBuilderType">
            <summary>
                Get the CommandBuilder Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.DbProvider.ParameterDbType">
            <summary>
                Get the ParameterDb Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.Initialize">
            <summary>
                Init the provider.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.CreateConnection">
            <summary>
                Create a connection object for this provider.
            </summary>
            <returns>An 'IDbConnection' object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.CreateCommand">
            <summary>
                Create a command object for this provider.
            </summary>
            <returns>An 'IDbCommand' object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.CreateDataAdapter">
            <summary>
                Create a dataAdapter object for this provider.
            </summary>
            <returns>An 'IDbDataAdapter' object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.CreateDataParameter">
            <summary>
                Create a IDbDataParameter object for this provider.
            </summary>
            <returns>An 'IDbDataParameter' object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.FormatNameForSql(System.String)">
            <summary>
                Change the parameterName into the correct format IDbCommand.CommandText
                for the ConnectionProvider
            </summary>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbCommand.CommandText</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.FormatNameForParameter(System.String)">
            <summary>
                Changes the parameterName into the correct format for an IDbParameter
                for the Driver.
            </summary>
            <remarks>
                For SqlServerConnectionProvider it will change <c>id</c> to <c>@id</c>
            </remarks>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbParameter.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.Equals(System.Object)">
            <summary>
                Equals implemantation.
            </summary>
            <param name="obj">The test object.</param>
            <returns>A boolean.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.GetHashCode">
            <summary>
                A hashcode for the provider.
            </summary>
            <returns>An integer.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.DbProvider.ToString">
            <summary>
                ToString implementation.
            </summary>
            <returns>A string that describes the provider.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Exceptions.ConfigurationException">
            <summary>
            A ConfigurationException is thrown when an error has occured in the configuration process.
            </summary>
            <remarks>
            When this exception occurs check the .xml or .config file.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ConfigurationException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ConfigurationException"/> class.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to a system-supplied message 
            that describes the error. 
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ConfigurationException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ConfigurationException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ConfigurationException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ConfigurationException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ConfigurationException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ConfigurationException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ConfigurationException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:SqlBatis.DataMapper.Exceptions.ForeignKeyException">
            <summary>
            A DALForeignKeyException is thrown when foreign key error occured in a sql statement.
            </summary>
            <remarks>
            This exception is not used by the framework.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ForeignKeyException.#ctor">
            <summary>
            Initializes a new instance of the <b>DalException</b> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ForeignKeyException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ForeignKeyException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ForeignKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ForeignKeyException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ForeignKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ForeignKeyException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ForeignKeyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:SqlBatis.DataMapper.Exceptions.IBatisNetException">
            <summary>
            The DalException is thrown when an error in the Dal occurs.
            </summary>
            <remarks>
            This is the base exception for all exceptions thrown in the framework. 
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.IBatisNetException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.IBatisNetException"/> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.IBatisNetException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.IBatisNetException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance 
            using the message parameter.
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.IBatisNetException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.IBatisNetException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to 
            the Message property of the passed in exception. 
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.IBatisNetException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.IBatisNetException"/> 
            class with a specified error message and a reference to the inner exception 
            that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous 
            exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference 
            (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.IBatisNetException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.IBatisNetException"/> 
            class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the 
            exception object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized 
            object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual 
            information about the source or destination. 
            </param>
        </member>
        <member name="T:SqlBatis.DataMapper.Exceptions.ProbeException">
            <summary>
            Summary description for ProbeException.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ProbeException.#ctor">
            <summary>
            Initializes a new instance of the <b>ProbeException</b> class.
            </summary>
            <remarks>
            This constructor initializes the <para>Message</para> property of the new instance 
            to a system-supplied message that describes the error.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ProbeException.#ctor(System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ProbeException"/> 
            class with a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance to the Message property 
            of the passed in exception. 
            </remarks>
            <param name="ex">
            The exception that is the cause of the current exception. 
            If the innerException parameter is not a null reference (Nothing in Visual Basic), 
            the current exception is raised in a catch block that handles the inner exception.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ProbeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ProbeException"/> 
            class with a specified error message.
            </summary>
            <remarks>
            This constructor initializes the Message property of the new instance using 
            the message parameter.
            </remarks>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ProbeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Exceptions.ProbeException"/> 
            class with a specified error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <remarks>
            An exception that is thrown as a direct result of a previous exception should include a reference to the previous exception in the InnerException property. 
            The InnerException property returns the same value that is passed into the constructor, or a null reference (Nothing in Visual Basic) if the InnerException property does not supply the inner exception value to the constructor.
            </remarks>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that caused the error</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Exceptions.ProbeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the Exception class with serialized data.
            </summary>
            <remarks>
            This constructor is called during deserialization to reconstitute the exception 
            object transmitted over a stream.
            </remarks>
            <param name="info">
            The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.
            </param>
            <param name="context">
            The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination. 
            </param>
        </member>
        <member name="T:SqlBatis.DataMapper.IDalSession">
            <summary>
                A template for a session in the iBATIS.NET framwork.
                Holds the connection, the transaction ...
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDalSession.DataSource">
            <summary>
                The data source use by the session.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDalSession.Connection">
            <summary>
                The Connection use by the session.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDalSession.Transaction">
            <summary>
                The Transaction use by the session.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDalSession.IsTransactionStart">
            <summary>
                Indicates if a transaction is open  on
                the session.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.Complete">
            <summary>
                Complete (commit) a transsaction
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.OpenConnection">
            <summary>
                Open a connection.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.OpenConnection(System.String)">
            <summary>
                Open a connection, on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.CloseConnection">
            <summary>
                close a connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.BeginTransaction">
            <summary>
                Open a connection and begin a transaction
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.BeginTransaction(System.String)">
            <summary>
                Open a connection and begin a transaction on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.BeginTransaction(System.Boolean)">
            <summary>
                Begins a database transaction
            </summary>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.BeginTransaction(System.String,System.Data.IsolationLevel)">
            <summary>
                Open a connection and begin a transaction on the specified connection string.
            </summary>
            <param name="connectionString">The connection string</param>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.BeginTransaction(System.Data.IsolationLevel)">
            <summary>
                Open a connection and begin a transaction at the data source
                with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.BeginTransaction(System.String,System.Boolean,System.Data.IsolationLevel)">
            <summary>
                Begins a transaction on the current connection
                with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
            <param name="connectionString">The connection string</param>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.BeginTransaction(System.Boolean,System.Data.IsolationLevel)">
            <summary>
                Begins a transaction on the current connection
                with the specified IsolationLevel value.
            </summary>
            <param name="isolationLevel">The transaction isolation level for this connection.</param>
            <param name="openConnection">Open a connection.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.CommitTransaction">
            <summary>
                Commit a transaction and close the associated connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.CommitTransaction(System.Boolean)">
            <summary>
                Commits the database transaction.
            </summary>
            <param name="closeConnection">Close the connection</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.RollBackTransaction">
            <summary>
                Rollbak a transaction and close the associated connection
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.RollBackTransaction(System.Boolean)">
            <summary>
                Rolls back a transaction from a pending state.
            </summary>
            <param name="closeConnection">Close the connection</param>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.CreateCommand(System.Data.CommandType)">
            <summary>
                Create a command
            </summary>
            <param name="commandType">The type of the command</param>
            <returns>An IDbCommand.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.CreateDataParameter">
            <summary>
                Create an DataParameter
            </summary>
            <returns>An IDbDataParameter.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.CreateDataAdapter(System.Data.IDbCommand)">
            <summary>
                Create a DataAdapter
            </summary>
            <param name="command">
                The statement or stored procedure
                used to select records in the data source.
            </param>
            <returns>An IDbDataAdapter.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDalSession.CreateDataAdapter">
            <summary>
                Create a DataAdapter
            </summary>
            <returns>An IDbDataAdapter.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.IDataSource">
            <summary>
                IDataSource
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDataSource.Name">
            <summary>
                DataSource Name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDataSource.ConnectionString">
            <summary>
                Connection string used to create connections.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDataSource.DbProvider">
            <summary>
                The data provider.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.IDbProvider">
            <summary>
                Factory interface to create provider specific ado.net objects.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.AssemblyName">
            <summary>
                The name of the assembly which conatins the definition of the provider.
            </summary>
            <example>Examples : "System.Data", "Microsoft.Data.Odbc"</example>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.IsDefault">
            <summary>
                Tell us if it is the default data source.
                Default false.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.IsEnabled">
            <summary>
                Tell us if this provider is enabled.
                Default true.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.AllowMARS">
            <summary>
                Tell us if this provider allows having multiple open <see cref="T:System.Data.IDataReader" /> with
                the same <see cref="T:System.Data.IDbConnection" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.DbConnectionClass">
            <summary>
                The connection class name to use.
            </summary>
            <example>
                "System.Data.OleDb.OleDbConnection",
                "System.Data.SqlClient.SqlConnection",
                "Microsoft.Data.Odbc.OdbcConnection"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.UseParameterPrefixInSql">
            <summary>
                Does this ConnectionProvider require the use of a Named Prefix in the SQL
                statement.
            </summary>
            <remarks>
                The OLE DB/ODBC .NET Provider does not support named parameters for
                passing parameters to an SQL Statement or a stored procedure called
                by an IDbCommand when CommandType is set to Text.
                For example, SqlClient requires select * from simple where simple_id = @simple_id
                If this is false, like with the OleDb or Obdc provider, then it is assumed that
                the ? can be a placeholder for the parameter in the SQL statement when CommandType
                is set to Text.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.UseParameterPrefixInParameter">
            <summary>
                Does this ConnectionProvider require the use of the Named Prefix when trying
                to reference the Parameter in the Command's Parameter collection.
            </summary>
            <remarks>
                This is really only useful when the UseParameterPrefixInSql = true.
                When this is true the code will look like IDbParameter param = cmd.Parameters["@paramName"],
                if this is false the code will be IDbParameter param = cmd.Parameters["paramName"] - ie - Oracle.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.UsePositionalParameters">
            <summary>
                The OLE DB/OBDC .NET Provider uses positional parameters that are marked with a
                question mark (?) instead of named parameters.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.SetDbParameterSize">
            <summary>
                Used to indicate whether or not the provider
                supports parameter size.
            </summary>
            <remarks>
                See JIRA-49 about SQLite.Net provider not supporting parameter size.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.SetDbParameterPrecision">
            <summary>
                Used to indicate whether or not the provider
                supports parameter precision.
            </summary>
            <remarks>
                See JIRA-49 about SQLite.Net provider not supporting parameter precision.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.SetDbParameterScale">
            <summary>
                Used to indicate whether or not the provider
                supports a parameter scale.
            </summary>
            <remarks>
                See JIRA-49 about SQLite.Net provider not supporting parameter scale.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.UseDeriveParameters">
            <summary>
                Used to indicate whether or not the provider
                supports DeriveParameters method for procedure.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.DbCommandClass">
            <summary>
                The command class name to use.
            </summary>
            <example>
                "System.Data.SqlClient.SqlCommand"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.ParameterDbTypeClass">
            <summary>
                The ParameterDbType class name to use.
            </summary>
            <example>
                "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.ParameterDbTypeProperty">
            <summary>
                The ParameterDbTypeProperty class name to use.
            </summary>
            <example>
                SqlDbType in SqlParamater.SqlDbType,
                OracleType in OracleParameter.OracleType.
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.DataAdapterClass">
            <summary>
                The dataAdapter class name to use.
            </summary>
            <example>
                "System.Data.SqlDbType"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.CommandBuilderClass">
            <summary>
                The commandBuilder class name to use.
            </summary>
            <example>
                "System.Data.OleDb.OleDbCommandBuilder",
                "System.Data.SqlClient.SqlCommandBuilder",
                "Microsoft.Data.Odbc.OdbcCommandBuilder"
            </example>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.Name">
            <summary>
                Name used to identify the provider amongst the others.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.Description">
            <summary>
                Description.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.ParameterPrefix">
            <summary>
                Parameter prefix use in store procedure.
            </summary>
            <example> @ for Sql Server.</example>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.IsObdc">
            <summary>
                Check if this provider is Odbc ?
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.CommandBuilderType">
            <summary>
                Create the CommandBuilder Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="P:SqlBatis.DataMapper.IDbProvider.ParameterDbType">
            <summary>
                Get the ParameterDb Type for this provider.
            </summary>
            <returns>An object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDbProvider.CreateConnection">
            <summary>
                Create a connection object for this provider.
            </summary>
            <returns>An 'IDbConnection' object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDbProvider.CreateCommand">
            <summary>
                Create a command object for this provider.
            </summary>
            <returns>An 'IDbCommand' object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDbProvider.CreateDataAdapter">
            <summary>
                Create a dataAdapter object for this provider.
            </summary>
            <returns>An 'IDbDataAdapter' object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDbProvider.CreateDataParameter">
            <summary>
                Create a IDataParameter object for this provider.
            </summary>
            <returns>An 'IDbDataParameter' object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDbProvider.FormatNameForSql(System.String)">
            <summary>
                Change the parameterName into the correct format IDbCommand.CommandText
                for the ConnectionProvider
            </summary>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbCommand.CommandText</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDbProvider.FormatNameForParameter(System.String)">
            <summary>
                Changes the parameterName into the correct format for an IDbParameter
                for the Driver.
            </summary>
            <remarks>
                For SqlServerConnectionProvider it will change <c>id</c> to <c>@id</c>
            </remarks>
            <param name="parameterName">The unformatted name of the parameter</param>
            <returns>A parameter formatted for an IDbParameter.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.IDbProvider.Initialize">
            <summary>
                Init the provider.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.ConfigurationSectionHandler">
            <summary>
                Used in an application's configuration file (App.Config or Web.Config) to configure the logging subsystem.
            </summary>
            <remarks>
                <example>
                    An example configuration section that writes IBatisNet messages to the Console using the built-in Console
                    Logger.
                    <code lang="XML" escaped="true">
             <configuration>
                            <configSections>
                                <sectionGroup name="iBATIS">
                                    <section name="logging"
                                        type="SqlBatis.DataMapper.Logging.ConfigurationSectionHandler, SqlBatis.DataMapper" />
                                </sectionGroup>
                            </configSections>
                            <iBATIS>
                                <logging>
                                    <logFactoryAdapter type="SqlBatis.DataMapper.Logging.Impl.ConsoleOutLoggerFA, SqlBatis.DataMapper">
                                        <arg key="showLogName" value="true" />
                                        <arg key="showDataTime" value="true" />
                                        <arg key="level" value="ALL" />
                                        <arg key="dateTimeFormat" value="yyyy/MM/dd HH:mm:ss:SSS" />
                                    </logFactoryAdapter>
                                </logging>
                            </iBATIS>
                        </configuration>
             </code>
                </example>
                <para>
                    The following aliases are recognized for the type attribute of logFactoryAdapter:
                </para>
                <list type="table">
                    <item>
                        <term>CONSOLE</term>
                        <description>Alias for SqlBatis.DataMapper.Logging.Impl.ConsoleOutLoggerFA, SqlBatis.DataMapper</description>
                    </item>
                    <item>
                        <term>TRACE</term>
                        <description>Alias for SqlBatis.DataMapper.Logging.Impl.TraceLoggerFA, SqlBatis.DataMapper</description>
                    </item>
                    <item>
                        <term>NOOP</term>
                        <description>Alias SqlBatis.DataMapper.Logging.Impl.NoOpLoggerFA, SqlBatis.DataMapper</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ConfigurationSectionHandler.Create(System.Object,System.Object,System.Xml.XmlNode)">
            <summary>
                Verifies that the logFactoryAdapter element appears once in the configuration section.
            </summary>
            <param name="parent">The parent of the current item.</param>
            <param name="configContext">Additional information about the configuration process.</param>
            <param name="section">The configuration section to apply an XPath query too.</param>
            <returns>
                A <see cref="T:SqlBatis.DataMapper.Logging.LogSetting" /> object containing the specified logFactoryAdapter type
                along with user supplied configuration properties.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ConfigurationSectionHandler.ReadConfiguration(System.Xml.XmlNode)">
            <summary>
                Retrieves the <see cref="T:System.Type" /> of the logger the use by looking at the logFactoryAdapter element
                of the logging configuration element.
            </summary>
            <param name="section"></param>
            <returns>
                A <see cref="T:SqlBatis.DataMapper.Logging.LogSetting" /> object containing the specified type that implements
                <see cref="T:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter" /> along with zero or more properties that will be
                passed to the logger factory adapter's constructor as an <see cref="T:System.Collections.IDictionary" />.
            </returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.LogLevel">
            <summary>
                The 7 logging levels used by Log are (in order):
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Logging.LogLevel.All">
            <summary>
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Logging.LogLevel.Debug">
            <summary>
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Logging.LogLevel.Info">
            <summary>
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Logging.LogLevel.Warn">
            <summary>
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Logging.LogLevel.Error">
            <summary>
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal">
            <summary>
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Logging.LogLevel.Off">
            <summary>
                Do not log anything.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.ILog">
            <summary>
                A simple logging interface abstracting logging APIs. Inspired by log4net.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.ILog.IsDebugEnabled">
            <summary>
                Checks if this logger is enabled for the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Debug" /> level.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.ILog.IsErrorEnabled">
            <summary>
                Checks if this logger is enabled for the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" /> level.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.ILog.IsFatalEnabled">
            <summary>
                Checks if this logger is enabled for the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" /> level.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.ILog.IsInfoEnabled">
            <summary>
                Checks if this logger is enabled for the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Info" /> level.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.ILog.IsWarnEnabled">
            <summary>
                Checks if this logger is enabled for the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Warn" /> level.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Debug(System.Object)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Debug" /> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Debug(System.Object,System.Exception)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Debug" /> level including
                the stack trace of the <see cref="T:System.Exception" /> passed
                as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Error(System.Object)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" /> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Error(System.Object,System.Exception)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" /> level including
                the stack trace of the <see cref="T:System.Exception" /> passed
                as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Fatal(System.Object)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" /> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Fatal(System.Object,System.Exception)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" /> level including
                the stack trace of the <see cref="T:System.Exception" /> passed
                as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Info(System.Object)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Info" /> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Info(System.Object,System.Exception)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Info" /> level including
                the stack trace of the <see cref="T:System.Exception" /> passed
                as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Warn(System.Object)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Warn" /> level.
            </summary>
            <param name="message">The message object to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILog.Warn(System.Object,System.Exception)">
            <summary>
                Log a message object with the <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Warn" /> level including
                the stack trace of the <see cref="T:System.Exception" /> passed
                as a parameter.
            </summary>
            <param name="message">The message object to log.</param>
            <param name="exception">The exception to log, including its stack trace.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter">
            <summary>
                Defines the members that logging implementations must implement.
            </summary>
            <remarks>
                Classes that implement this interface may optional implement a constructor that accepts
                a <see cref="T:System.Collections.Specialized.NameValueCollection" /> which will contain zero or more user supplied configuration
                properties.
                <para>
                    The SqlBatis.DataMapper assembly ships with the following built-in <see cref="T:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter" />
                    implementations:
                </para>
                <list type="table">
                    <item>
                        <term>
                            <see cref="T:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLoggerFA" />
                        </term>
                        <description>Writes output to Console.Out</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:SqlBatis.DataMapper.Logging.Impl.TraceLoggerFA" />
                        </term>
                        <description>Writes output to the System.Diagnostics.Trace sub-system</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:SqlBatis.DataMapper.Logging.Impl.NoOpLoggerFA" />
                        </term>
                        <description>Ignores all messages</description>
                    </item>
                </list>
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter.GetLogger(System.Type)">
            <summary>
                Get a <see cref="T:SqlBatis.DataMapper.Logging.ILog" /> instance by type.
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter.GetLogger(System.String)">
            <summary>
                Get a <see cref="T:SqlBatis.DataMapper.Logging.ILog" /> instance by name.
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.Impl.AbstractLogger">
            <summary>
                Base class that implements the ILog interface.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Write(SqlBatis.DataMapper.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
                Concrete classes should override this method to perform the actual logging.
            </summary>
            <param name="logLevel"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.IsLevelEnabled(SqlBatis.DataMapper.Logging.LogLevel)">
            <summary>
                Concrete classes should override this method to determine if a particular <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" />
                is enabled.
            </summary>
            <param name="logLevel"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Debug(System.Object)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Debug" /> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Debug(System.Object,System.Exception)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Debug" /> message with an optional <see cref="T:System.Exception" />.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
                The	<see cref="T:System.Exception" /> associated with the message. If there isn't any
                <see cref="T:System.Exception" /> associated with the message, pass <see langword="null" />.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Error(System.Object)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" /> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Error(System.Object,System.Exception)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" /> message with an optional <see cref="T:System.Exception" />.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
                The	<see cref="T:System.Exception" /> associated with the message. If there isn't any
                <see cref="T:System.Exception" /> associated with the message, pass <see langword="null" />.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Fatal(System.Object)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" /> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Fatal(System.Object,System.Exception)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" /> message with an optional <see cref="T:System.Exception" />.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
                The	<see cref="T:System.Exception" /> associated with the message. If there isn't any
                <see cref="T:System.Exception" /> associated with the message, pass <see langword="null" />.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Info(System.Object)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Info" /> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Info(System.Object,System.Exception)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Info" /> message with an optional <see cref="T:System.Exception" />.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
                The	<see cref="T:System.Exception" /> associated with the message. If there isn't any
                <see cref="T:System.Exception" /> associated with the message, pass <see langword="null" />.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Warn(System.Object)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Warn" /> message.
            </summary>
            <param name="message">The message to log.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.Warn(System.Object,System.Exception)">
            <summary>
                Log a <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Warn" /> message with an optional <see cref="T:System.Exception" />.
            </summary>
            <param name="message">The message to log.</param>
            <param name="e">
                The	<see cref="T:System.Exception" /> associated with the message. If there isn't any
                <see cref="T:System.Exception" /> associated with the message, pass <see langword="null" />.
            </param>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.IsDebugEnabled">
            <summary>
                Returns <see langword="true" /> if the current <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> is greater than or
                equal to <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Debug" />. If it is, all messages will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.IsErrorEnabled">
            <summary>
                Returns <see langword="true" /> if the current <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> is greater than or
                equal to <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" />. If it is, only messages with a <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> of
                <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" /> and <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.IsFatalEnabled">
            <summary>
                Returns <see langword="true" /> if the current <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> is greater than or
                equal to <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" />. If it is, only messages with a <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> of
                <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.IsInfoEnabled">
            <summary>
                Returns <see langword="true" /> if the current <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> is greater than or
                equal to <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Info" />. If it is, only messages with a <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> of
                <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Info" />, <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Warn" />, <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" />, and
                <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" /> will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.AbstractLogger.IsWarnEnabled">
            <summary>
                Returns <see langword="true" /> if the current <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> is greater than or
                equal to <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Warn" />. If it is, only messages with a <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> of
                <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Warn" />, <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Error" />, and <see cref="F:SqlBatis.DataMapper.Logging.LogLevel.Fatal" />
                will be sent to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLogger">
            <summary>
                Sends log messages to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLogger.#ctor(System.String,SqlBatis.DataMapper.Logging.LogLevel,System.Boolean,System.Boolean,System.String)">
            <summary>
                Creates and initializes a logger that writes messages to <see cref="P:System.Console.Out" />.
            </summary>
            <param name="logName">The name, usually type name of the calling class, of the logger.</param>
            <param name="logLevel">
                The current logging threshold. Messages recieved that are beneath this threshold will not be
                logged.
            </param>
            <param name="showDateTime">Include the current time in the log message.</param>
            <param name="showLogName">Include the instance name in the log message.</param>
            <param name="dateTimeFormat">The date and time format to use in the log message.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLogger.Write(SqlBatis.DataMapper.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
                Do the actual logging by constructing the log message using a <see cref="T:System.Text.StringBuilder" /> then
                sending the output to <see cref="P:System.Console.Out" />.
            </summary>
            <param name="level">The <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" /> of the message.</param>
            <param name="message">The log message.</param>
            <param name="e">An optional <see cref="T:System.Exception" /> associated with the message.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLogger.IsLevelEnabled(SqlBatis.DataMapper.Logging.LogLevel)">
            <summary>
                Determines if the given log level is currently enabled.
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLoggerFA">
            <summary>
                Factory for creating <see cref="T:SqlBatis.DataMapper.Logging.ILog" /> instances that write data to <see cref="P:System.Console.Out" />.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
                Looks for level, showDateTime, showLogName, dateTimeFormat items from
                <paramref name="properties" /> for use when the GetLogger methods are called.
            </summary>
            <param name="properties">Contains user supplied configuration information.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLoggerFA.GetLogger(System.Type)">
            <summary>
                Get a ILog instance by <see cref="T:System.Type" />.
            </summary>
            <param name="type">Usually the <see cref="T:System.Type" /> of the current class.</param>
            <returns>An ILog instance that will write data to <see cref="P:System.Console.Out" />.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLoggerFA.GetLogger(System.String)">
            <summary>
                Get a ILog instance by name.
            </summary>
            <param name="name">Usually a <see cref="T:System.Type" />'s Name or FullName property.</param>
            <returns>An ILog instance that will write data to <see cref="P:System.Console.Out" />.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.Impl.NoOpLogger">
            <summary>
                Silently ignores all log messages.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Debug(System.Object)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Debug(System.Object,System.Exception)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Error(System.Object)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Error(System.Object,System.Exception)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Fatal(System.Object)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Fatal(System.Object,System.Exception)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Info(System.Object)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Info(System.Object,System.Exception)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Warn(System.Object)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.Warn(System.Object,System.Exception)">
            <summary>
                Ignores message.
            </summary>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.IsDebugEnabled">
            <summary>
                Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.IsErrorEnabled">
            <summary>
                Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.IsFatalEnabled">
            <summary>
                Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.IsInfoEnabled">
            <summary>
                Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.Impl.NoOpLogger.IsWarnEnabled">
            <summary>
                Always returns <see langword="false" />.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.Impl.NoOpLoggerFA">
            <summary>
                Factory for creating "no operation" loggers that do nothing and whose Is*Enabled properties always
                return false.
            </summary>
            <remarks>
                This factory creates a single instance of <see cref="T:SqlBatis.DataMapper.Logging.Impl.NoOpLogger" /> and always returns that
                instance whenever an <see cref="T:SqlBatis.DataMapper.Logging.ILog" /> instance is requested.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLoggerFA.#ctor">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
                Constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLoggerFA.GetLogger(System.Type)">
            <summary>
                Get a ILog instance by type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.NoOpLoggerFA.IBatisNet#Common#Logging#ILoggerFactoryAdapter#GetLogger(System.String)">
            <summary>
                Get a ILog instance by type name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.Impl.TraceLogger">
            <summary>
                Logger that sends output to the <see cref="T:System.Diagnostics.Trace" /> sub-system.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.TraceLogger.#ctor(System.String,SqlBatis.DataMapper.Logging.LogLevel,System.Boolean,System.Boolean,System.String)">
            <summary>
                Creates a new instance of the TraceLogger.
            </summary>
            <param name="logName">The name for this instance (usually the fully qualified class name).</param>
            <param name="logLevel">
                The logging threshold. Log messages created with a <see cref="T:SqlBatis.DataMapper.Logging.LogLevel" />
                beneath this threshold will not be logged.
            </param>
            <param name="showDateTime">Include the current time in the log message </param>
            <param name="showLogName">Include the instance name in the log message</param>
            <param name="dateTimeFormat">The date and time format to use in the log message </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.TraceLogger.Write(SqlBatis.DataMapper.Logging.LogLevel,System.Object,System.Exception)">
            <summary>
                Responsible for assembling and writing the log message to the tracing sub-system.
            </summary>
            <param name="level"></param>
            <param name="message"></param>
            <param name="e"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.TraceLogger.IsLevelEnabled(SqlBatis.DataMapper.Logging.LogLevel)">
            <summary>
                Is the given log level currently enabled ?
            </summary>
            <param name="level"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.Impl.TraceLoggerFA">
            <summary>
                Summary description for  TraceLoggerFA.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.TraceLoggerFA.#ctor(System.Collections.Specialized.NameValueCollection)">
            <summary>
                Constructor
            </summary>
            <param name="properties"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.TraceLoggerFA.GetLogger(System.Type)">
            <summary>
                Get a ILog instance by type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.Impl.TraceLoggerFA.GetLogger(System.String)">
            <summary>
                Get a ILog instance by type name
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.LogManager">
            <summary>
                Uses the specified <see cref="T:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter" /> to create <see cref="T:SqlBatis.DataMapper.Logging.ILog" /> instances
                that are used to log messages. Inspired by log4net.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.LogManager.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Logging.LogManager" /> class.
            </summary>
            <remarks>
                Uses a private access modifier to prevent instantiation of this class.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.LogManager.Adapter">
            <summary>
                Gets or sets the adapter.
            </summary>
            <remarks>
                <para>
                    The SqlBatis.DataMapper assembly ships with the following built-in <see cref="T:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter" />
                    implementations:
                </para>
                <list type="table">
                    <item>
                        <term>
                            <see cref="T:SqlBatis.DataMapper.Logging.Impl.ConsoleOutLoggerFA" />
                        </term>
                        <description>Writes output to Console.Out</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:SqlBatis.DataMapper.Logging.Impl.TraceLoggerFA" />
                        </term>
                        <description>Writes output to the System.Diagnostics.Trace sub-system</description>
                    </item>
                    <item>
                        <term>
                            <see cref="T:SqlBatis.DataMapper.Logging.Impl.NoOpLoggerFA" />
                        </term>
                        <description>Ignores all messages</description>
                    </item>
                </list>
            </remarks>
            <value>The adapter.</value>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.LogManager.GetLogger(System.Type)">
            <summary>
                Gets the logger.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.LogManager.GetLogger(System.String)">
            <summary>
                Gets the logger.
            </summary>
            <param name="name">The name.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.LogManager.BuildDefaultLoggerFactoryAdapter">
            <summary>
                Builds the default logger factory adapter.
            </summary>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Logging.LogSetting">
            <summary>
                Container used to hold configuration information from config file.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Logging.LogSetting.#ctor(System.Type,System.Collections.Specialized.NameValueCollection)">
            <summary>
            </summary>
            <param name="factoryAdapterType">
                The <see cref="T:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter" /> type
                that will be used for creating <see cref="T:SqlBatis.DataMapper.Logging.ILog" />
            </param>
            <param name="properties">
                Additional user supplied properties that are passed to the
                <paramref name="factoryAdapterType" />'s constructor.
            </param>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.LogSetting.FactoryAdapterType">
            <summary>
                The <see cref="T:SqlBatis.DataMapper.Logging.ILoggerFactoryAdapter" /> type that will be used for creating <see cref="T:SqlBatis.DataMapper.Logging.ILog" />
                instances.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Logging.LogSetting.Properties">
            <summary>
                Additional user supplied properties that are passed to the <see cref="P:SqlBatis.DataMapper.Logging.LogSetting.FactoryAdapterType" />'s constructor.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Pagination.IPaginatedList">
            <summary>
            Summary description for IPaginatedList.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.IPaginatedList.PageSize">
            <summary>
            The maximum number of items per page.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.IPaginatedList.IsFirstPage">
            <summary>
            Is the current page the first page ?
            True if the current page is the first page or if only
            a single page exists.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.IPaginatedList.IsMiddlePage">
            <summary>
            Is the current page a middle page (i.e. not first or last) ?
            Return True if the current page is not the first or last page,
            and more than one page exists (always returns false if only a
            single page exists).
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.IPaginatedList.IsLastPage">
            <summary>
            Is the current page the last page ?
            Return True if the current page is the last page or if only
            a single page exists.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.IPaginatedList.IsNextPageAvailable">
            <summary>
            Is a page available after the current page ?
            Return True if the next page is available
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.IPaginatedList.IsPreviousPageAvailable">
            <summary>
            Is a page available before the current page ?
            Return True if the previous page is available
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.IPaginatedList.NextPage">
            <summary>
            Moves to the next page after the current page.  If the current
            page is the last page, wrap to the first page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.IPaginatedList.PreviousPage">
            <summary>
            Moves to the page before the current page.  If the current
            page is the first page, wrap to the last page.
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.IPaginatedList.GotoPage(System.Int32)">
            <summary>
            Moves to a specified page.  If the specified
            page is beyond the last page, wrap to the first page.
            If the specified page is before the first page, wrap
            to the last page.
            </summary>
            <param name="pageIndex">The index of the specified page.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.IPaginatedList.PageIndex">
            <summary>
            Returns the current page index, which is a zero based integer.
            All paginated list implementations should know what index they are
            on, even if they don't know the ultimate boundaries (min/max)
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Pagination.PaginatedArrayList">
            <summary>
            Summary description for PaginatedArrayList.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsEmpty">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.#ctor(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageSize"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.#ctor(System.Int32,System.Int32)">
            <summary>
            
            </summary>
            <param name="initialCapacity"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.#ctor(System.Collections.ICollection,System.Int32)">
            <summary>
            
            </summary>
            <param name="c"></param>
            <param name="pageSize"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Repaginate">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.SubList(System.Collections.IList,System.Int32,System.Int32)">
            <summary>
            Provides a view of the IList pramaeter 
            from the specified position <paramref name="fromIndex"/> 
            to the specified position <paramref name="toIndex"/>. 
            </summary>
            <param name="list">The IList elements.</param>
            <param name="fromIndex">Starting position for the view of elements. </param>
            <param name="toIndex">Ending position for the view of elements. </param>
            <returns> A view of list.
            </returns>
            <remarks>
            The list that is returned is just a view, it is still backed
            by the orignal list.  Any changes you make to it will be 
            reflected in the orignal list.
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.PageSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsFirstPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsMiddlePage">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsLastPage">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsNextPageAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsPreviousPageAvailable">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.NextPage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.PreviousPage">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.GotoPage(System.Int32)">
            <summary>
            
            </summary>
            <param name="pageIndex"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.PageIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsReadOnly">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Item(System.Int32)">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.RemoveAt(System.Int32)">
            <summary>
            
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Insert(System.Int32,System.Object)">
            <summary>
            
            </summary>
            <param name="index"></param>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Remove(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Contains(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Clear">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IndexOf(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Add(System.Object)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsFixedSize">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.IsSynchronized">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Count">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.CopyTo(System.Array,System.Int32)">
            <summary>
            
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.SyncRoot">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Reset">
            <summary>
            Sets the enumerator to its initial position, 
            which is before the first element in the collection.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Pagination.PaginatedArrayList.Current">
            <summary>
            Gets the current element in the page.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Pagination.PaginatedArrayList.MoveNext">
            <summary>
            Advances the enumerator to the next element of the collection.
            </summary>
            <returns>
            true if the enumerator was successfully advanced to the next element; 
            false if the enumerator has passed the end of the collection.
            </returns>
        </member>
        <member name="T:SqlBatis.DataMapper.ProviderDeSerializer">
            <summary>
                Summary description for ProviderDeSerializer.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.ProviderDeSerializer.Deserialize(System.Xml.XmlNode)">
            <summary>
                Deserializes the specified node in a <see cref="T:SqlBatis.DataMapper.IDbProvider" />.
            </summary>
            <param name="node">The node.</param>
            <returns>The <see cref="T:SqlBatis.DataMapper.IDbProvider" /></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Transaction.IsolationLevel">
            <summary>
            Specifies the isolation level of a transaction.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.IsolationLevel.Serializable">
            <summary>
            Volatile data can be read but not modified, 
            and no new data can be added during the transaction.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.IsolationLevel.RepeatableRead">
            <summary>
            Volatile data can be read but not modified during the transaction. 
            New data may be added during the transaction.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.IsolationLevel.ReadCommitted">
            <summary>
            Volatile data cannot be read during the transaction, but can be modified.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.IsolationLevel.ReadUncommitted">
            <summary>
            Volatile data can be read and modified during the transaction.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.IsolationLevel.Unspecified">
            <summary>
            Volatile data can be read but not modified, 
            and no new data can be added during the transaction.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Transaction.TransactionOptions">
            <summary>
            Contains parameters that specify Transaction behaviors.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.TransactionOptions.TimeOut">
            <summary>
            Length of time that the transaction waits before automatically 
            closing itself
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.TransactionOptions.IsolationLevel">
            <summary>
            The isolation level of the transaction.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Transaction.TransactionScopeOptions">
            <summary>
            Describes how a transaction scope is associated with a transaction.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.TransactionScopeOptions.Required">
            <summary>
            The transaction scope must be associated with a transaction.
            If we are in a transaction scope join it. If we aren't, create a new one.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.TransactionScopeOptions.RequiresNew">
            <summary>
            Always creates a new transaction scope.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.TransactionScopeOptions.Supported">
            <summary>
            Don't need a transaction scope, but if we are in a transaction scope then join it.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.TransactionScopeOptions.NotSupported">
            <summary>
            Means that cannot cannot be associated with a transaction scope.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Transaction.TransactionScopeOptions.Mandatory">
            <summary>
            The transaction scope must be associated with an existing transaction scope.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.ConfigureHandler">
            <summary>
            Represents the method that handles calls from Configure.
            </summary>
            <remarks>
            obj is a null object in a DaoManager context.
            obj is the reconfigured sqlMap in a SqlMap context.
            </remarks>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.StateConfig">
            <summary>
            
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.StateConfig.FileName">
            <summary>
            Master Config File name.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.StateConfig.ConfigureHandler">
            <summary>
            Delegate called when a file is changed, use it to rebuild.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler">
            <summary>
            Class used to watch config files.
            </summary>
            <remarks>
            Uses the <see cref="T:System.IO.FileSystemWatcher"/> to monitor
            changes to a specified file. Because multiple change notifications
            may be raised when the file is modified, a timer is used to
            compress the notifications into a single event. The timer
            waits for the specified time before delivering
            the event notification. If any further <see cref="T:System.IO.FileSystemWatcher"/>
            change notifications arrive while the timer is waiting it
            is reset and waits again for the specified time to
            elapse.
            </remarks>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler._timer">
            <summary>
            The timer used to compress the notification events.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler._filesToWatch">
            <summary>
            A list of configuration files to watch.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler._filesWatcher">
            <summary>
            The list of FileSystemWatcher.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler.TIMEOUT_MILLISECONDS">
            <summary>
            The default amount of time to wait after receiving notification
            before reloading the config file.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler.#ctor(System.Threading.TimerCallback,SqlBatis.DataMapper.Utilities.StateConfig)">
             <summary>
            -
             </summary>
             <param name="state">
             Represent the call context of the SqlMap or DaoManager ConfigureAndWatch method call.
             </param>
             <param name="onWhatchedFileChange"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler.AddFileToWatch(System.IO.FileInfo)">
            <summary>
            Add a file to be monitored.
            </summary>
            <param name="configFile"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler.ClearFilesMonitored">
            <summary>
            Reset the list of files being monitored.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler.ConfigWatcherHandler_OnChanged(System.Object,System.IO.FileSystemEventArgs)">
            <summary>
            Event handler used by <see cref="T:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler.ConfigWatcherHandler_OnRenamed(System.Object,System.IO.RenamedEventArgs)">
            <summary>
            Event handler used by <see cref="T:SqlBatis.DataMapper.Utilities.ConfigWatcherHandler"/>.
            </summary>
            <param name="source">The <see cref="T:System.IO.FileSystemWatcher"/> firing the event.</param>
            <param name="e">The argument indicates the file that caused the event to be fired.</param>
            <remarks>
            This handler reloads the configuration from the file when the event is fired.
            </remarks>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.DBHelperParameterCache">
            <summary>
            DBHelperParameterCache provides functions to leverage a 
            static cache of procedure parameters, and the
            ability to discover parameters for stored procedures at run-time.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.DBHelperParameterCache"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.DiscoverSpParameterSet(SqlBatis.DataMapper.IDalSession,System.String,System.Boolean)">
            <summary>
            Resolve at run time the appropriate set of Parameters for a stored procedure
            </summary>
            <param name="session">An IDalSession object</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">whether or not to include their return value parameter</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.InternalDiscoverSpParameterSet(SqlBatis.DataMapper.IDalSession,System.String,System.Boolean)">
            <summary>
            Discover at run time the appropriate set of Parameters for a stored procedure
            </summary>
            <param name="session">An IDalSession object</param>
            <param name="spName">Name of the stored procedure.</param>
            <param name="includeReturnValueParameter">if set to <c>true</c> [include return value parameter].</param>
            <returns>The stored procedure parameters.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.CloneParameters(System.Data.IDataParameter[])">
            <summary>
            Deep copy of cached IDataParameter array.
            </summary>
            <param name="originalParameters"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.CacheParameterSet(System.String,System.String,System.Data.IDataParameter[])">
            <summary>
            Add parameter array to the cache
            </summary>
            <param name="connectionString">a valid connection string for an IDbConnection</param>
            <param name="commandText">the stored procedure name or SQL command</param>
            <param name="commandParameters">an array of IDataParameters to be cached</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.Clear">
            <summary>
            Clear the parameter cache.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.GetCachedParameterSet(System.String,System.String)">
            <summary>
            retrieve a parameter array from the cache
            </summary>
            <param name="connectionString">a valid connection string for an IDbConnection</param>
            <param name="commandText">the stored procedure name or SQL command</param>
            <returns>an array of IDataParameters</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.GetSpParameterSet(SqlBatis.DataMapper.IDalSession,System.String)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="session">a valid session</param>
            <param name="spName">the name of the stored procedure</param>
            <returns>an array of IDataParameters</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.DBHelperParameterCache.GetSpParameterSet(SqlBatis.DataMapper.IDalSession,System.String,System.Boolean)">
            <summary>
            Retrieves the set of IDataParameters appropriate for the stored procedure
            </summary>
            <remarks>
            This method will query the database for this information, and then store it in a cache for future requests.
            </remarks>
            <param name="session">a valid session</param>
            <param name="spName">the name of the stored procedure</param>
            <param name="includeReturnValueParameter">a bool value indicating whether the return value parameter should be included in the results</param>
            <returns>an array of IDataParameters</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.HashCodeProvider">
            <summary>
            Summary description for HashCodeProvider.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.HashCodeProvider.GetIdentityHashCode(System.Object)">
            <summary>
            Supplies a hash code for an object.
            </summary>
            <param name="obj">The object.</param>
            <returns>A hash code</returns>
            <remarks>
            Buggy in .NET V1.0
            .NET Fx v1.1 Update: 
            As of v1.1 of the framework, there is a method System.Runtime.CompilerServices.RuntimeHelpers.GetHashCode(object) that does this as well.
            I will not use to Keep compatiblity with .NET V1.0
            </remarks>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.AbstractFactory">
            <summary>
            A <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory"/> implementation that for abstract type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.AbstractFactory.#ctor(System.Type)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.AbstractFactory"/> class.
            </summary>
            <param name="typeToCreate">The type to create.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.AbstractFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>A new instance</returns>
            <remarks>
            If you call a constructor with no parameters, pass null.
            Anyway, what you pass will be ignore.
            </remarks>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.ActivatorFactory">
            <summary>
            Create objects via Activator.CreateInstance
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ActivatorFactory.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="typeToCreate"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ActivatorFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <remarks>
            If you call a constructor with no parameters, pass null. 
            Anyway, what you pass will be ignore.
            </remarks>
            <returns>A new instance</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.ActivatorObjectFactory">
            <summary>
            A <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory"/> implementation that can create objects 
            via Activator.CreateInstance
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ActivatorObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new see <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory"/> instance.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.BoxingOpCodes">
            <summary>  
            Helper class that returns appropriate boxing opcode based on type  
            </summary>  
            <remarks>From Spring.NET</remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.BoxingOpCodes.#cctor">
            <summary>
            Initializes the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.BoxingOpCodes"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.BoxingOpCodes.GetOpCode(System.Type)">
            <summary>
            Gets the <see cref="T:System.Reflection.Emit.OpCode"/>.
            </summary>
            <param name="type">The type.</param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.DelegateFactory">
            <summary>
            A <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> implementation that builds object via DynamicMethod.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.DelegateFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <remarks>
            If you call a constructor with no parameters, pass null. 
            Anyway, what you pass will be ignore.
            </remarks>
            <returns>A new instance</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.DelegateFactory.#ctor(System.Type,System.Type[])">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.DelegateFactory"/> class.
            </summary>
            <param name="typeToCreate">The instance type to create.</param>
            <param name="argumentTypes">The types argument.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.DelegateFactory.EmitArgsIL(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>   
            Emit parameter IL for a method call.   
            </summary>   
            <param name="il">IL generator.</param>   
            <param name="argumentTypes">Arguments type defined for a the constructor.</param>   
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.DelegateObjectFactory">
            <summary>
            A <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory"/> implementation that can create objects via DynamicMethod.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.DelegateObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new see <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.DelegateObjectFactory.GenerateKey(System.Type,System.Object[])">
            <summary>
            Generates the key for a cache entry.
            </summary>
            <param name="typeToCreate">The type instance to build.</param>
            <param name="arguments">The types of the constructor arguments</param>
            <returns>The key for a cache entry.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.EmitObjectFactory">
            <summary>
            A <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory"/> implementation that can create objects via IL code
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.EmitObjectFactory.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.EmitObjectFactory"/> class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.EmitObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.EmitObjectFactory.GenerateKey(System.Type,System.Object[])">
            <summary>
            Generates the key for a cache entry.
            </summary>
            <param name="typeToCreate">The type instance to build.</param>
            <param name="arguments">The types of the constructor arguments</param>
            <returns>The key for a cache entry.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.FactoryBuilder">
            <summary>
            Build IFactory object via IL 
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryBuilder.#ctor">
            <summary>
            constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryBuilder.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a factory which build class of type typeToCreate
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> instance.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryBuilder.CreateFactoryType(System.Type,System.Type[])">
            <summary>
            Creates a <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/>.
            </summary>
            <param name="typeToCreate">The type instance to create.</param>
            <param name="types">The types.</param>
            <returns>The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryBuilder.ImplementCreateInstance(System.Reflection.Emit.TypeBuilder,System.Type,System.Type[])">
            <summary>
            Implements the create instance.
            </summary>
            <param name="typeBuilder">The type builder.</param>
            <param name="typeToCreate">The type to create.</param>
            <param name="argumentTypes">The argument types.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryBuilder.EmitArgsIL(System.Reflection.Emit.ILGenerator,System.Type[])">
            <summary>   
            Emit parameter IL for a method call.   
            </summary>   
            <param name="il">IL generator.</param>   
            <param name="argumentTypes">Arguments type defined for a the constructor.</param>   
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.FactoryLogAdapter">
            <summary>
            A wrapper arround an <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> implementation which logs argument type and value
            when CreateInstance is called.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryLogAdapter.#ctor(System.Type,System.Type[],SqlBatis.DataMapper.Utilities.Objects.IFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.FactoryLogAdapter"/> class.
            </summary>
            <param name="type">The type.</param>
            <param name="paramtersTypes">The paramters types.</param>
            <param name="factory">The factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryLogAdapter.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">An array of values that matches the number, order and type
            of the parameters for this constructor.</param>
            <returns>A new instance</returns>
            <remarks>
            If you call a constructor with no parameters, pass null.
            Anyway, what you pass will be ignore.
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryLogAdapter.GenerateParametersName(System.Object[])">
            <summary>
            Generates the a string containing all parameter type names.
            </summary>
            <param name="arguments">The types of the constructor arguments</param>
            <returns>The string.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.FactoryLogAdapter.GenerateLogInfoForParameterValue(System.Object[])">
            <summary>
            Generates the a string containing all parameters value.
            </summary>
            <param name="arguments">The arguments</param>
            <returns>The string.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.IFactory">
            <summary>
            Factory to create object for a given type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.IFactory.CreateInstance(System.Object[])">
            <summary>
            Create a new instance with the specified parameters
            </summary>
            <param name="parameters">
            An array of values that matches the number, order and type 
            of the parameters for this constructor. 
            </param>
            <remarks>
            If you call a constructor with no parameters, pass null. 
            Anyway, what you pass will be ignore.
            </remarks>
            <returns>A new instance</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory">
            <summary>
            A factory that can create objects 
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.IObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new <see cref="T:SqlBatis.DataMapper.Utilities.Objects.IFactory"/> instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new see cref="IFactory"/> instance</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory">
            <summary>
            Accessor factory
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory.SetAccessorFactory">
            <summary>
            The factory which build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor"/>
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory.GetAccessorFactory">
            <summary>
            The factory which build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessor"/>
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory.#ctor(SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessorFactory,SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessorFactory)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory"/> class.
            </summary>
            <param name="setAccessorFactory">The set accessor factory.</param>
            <param name="getAccessorFactory">The get accessor factory.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.BaseAccessor">
            <summary>
            Abstract base class for member accessor
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.BaseAccessor.propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.BaseAccessor.targetType">
            <summary>
            The target type
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.BaseAccessor.nullInternal">
            <summary>
            The null internal value used by this member type 
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.BaseAccessor.typeToOpcode">
            <summary>
            List of type-opCode
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.BaseAccessor.#cctor">
            <summary>
            Static constructor
            "Initialize a private IDictionary with type-opCode pairs 
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.BaseAccessor.GetPropertyInfo(System.Type)">
            <summary>
            Gets the property info.
            </summary>
            <param name="target">The target type.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.BaseAccessor.GetNullInternal(System.Type)">
            <summary>
            Get the null value for a given type
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldGetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldGetAccessor"/> class defines a field get accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGet"/>  
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldGetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldGetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DelegateFieldGetAccessor"/> class
            for field get access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldGetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldGetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the field value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertyGetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertyGetAccessor"/> class defines a get property accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertyGetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertyGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertyGetAccessor"/> class
            for get property access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertyGetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertyGetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the field value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertySetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertySetAccessor"/> class defines a set property accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertySetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertySetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertySetAccessor"/> class
            for set property access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propName">Name of the property.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertySetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertySetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.DelegatePropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldSetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldSetAccessor"/> class defines a field get accessor and
            provides <c>Reflection.Emit</c>-generated <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISet"/> 
            via the new DynamicMethod (.NET V2).
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldSetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldSetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldSetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:DelegateFieldSetAccessor"/> class
            for field get access via DynamicMethod.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldSetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldSetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.DelegateFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor"/> class provides an IL-based get access   
            to a field of a specified target class.
            </summary>
            <remarks>Will Throw FieldAccessException on private field</remarks>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor._emittedGet">
            <summary>
            The IL emitted IGet
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the field for the specified target.
            </summary>
            <param name="target">Object to retrieve the field from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor"/> class provides an IL-based set access   
            to a field of a specified target class.
            </summary>
            <remarks>Will Throw FieldAccessException on private field</remarks>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor._fieldName">
            <summary>
            The field name
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor._fieldType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor._emittedSet">
            <summary>
            The IL emitted ISet
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="fieldName">Name of the field.</param>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor.Name">
            <summary>
            Gets the field's name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor.MemberType">
            <summary>
            Gets the field's type.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the field for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor"/> class provides an IL-based get access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor._propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor._targetType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor._emittedGet">
            <summary>
            The IL emitted IGet
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor"/> class.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="assemblyBuilder">The <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>.</param>
            <param name="moduleBuilder">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/>.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor.Name">
            <summary>
            Gets the property's name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor.MemberType">
            <summary>
            Gets the property's type.
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the property value from the specified target.
            </summary>
            <param name="target">Target object.</param>
            <returns>Property value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor"/> class provides an IL-based set access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor._propertyName">
            <summary>
            The property name
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor._propertyType">
            <summary>
            The property type
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor._targetType">
            <summary>
            The class parent type
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor._emittedSet">
            <summary>
            The IL emitted ISet
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor.#ctor(System.Type,System.String,System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor"/> class.
            Generates the implementation for setter methods.
            </summary>
            <param name="targetObjectType">Type of the target object.</param>
            <param name="propertyName">Name of the property.</param>
            <param name="assemblyBuilder">The <see cref="T:System.Reflection.Emit.AssemblyBuilder"/>.</param>
            <param name="moduleBuilder">The <see cref="T:System.Reflection.Emit.ModuleBuilder"/>.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor.EmitIL(System.Reflection.Emit.AssemblyBuilder,System.Reflection.Emit.ModuleBuilder)">
            <summary>
            This method create a new type oject for the the property accessor class 
            that will provide dynamic access.
            </summary>
            <param name="assemblyBuilder">The assembly builder.</param>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor.EmitType(System.Reflection.Emit.ModuleBuilder)">
            <summary>
            Create an type that will provide the set access method.
            </summary>
            <remarks>
             new ReflectionPermission(PermissionState.Unrestricted).Assert();
             CodeAccessPermission.RevertAssert();
            </remarks>
            <param name="moduleBuilder">The module builder.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
            <value></value>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor.MemberType">
            <summary>
            Gets the type of this member (field or property).
            </summary>
            <value></value>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.EmitPropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the property for the specified target.
            </summary>
            <param name="target">Target object.</param>
            <param name="value">Value to set.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory">
            <summary>
            A factory to build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessorFactory"/> for a type.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory"/> class.
            </summary>
            <param name="allowCodeGeneration">if set to <c>true</c> [allow code generation].</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory.CreateDynamicPropertyGetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory.CreateDynamicFieldGetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory.CreatePropertyAccessor(System.Type,System.String)">
            <summary>
            Create a IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory.CreateFieldAccessor(System.Type,System.String)">
            <summary>
            Create a IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory.CreateReflectionPropertyGetAccessor(System.Type,System.String)">
            <summary>
            Create a Reflection IGetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory.CreateReflectionFieldGetAccessor(System.Type,System.String)">
            <summary>
            Create Reflection IGetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.GetAccessorFactory.CreateGetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.IAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IAccessor"/> interface defines a field/property contract.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.IAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.IAccessor.MemberType">
            <summary>
            Gets the type of this member (field or property).
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGet">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGet"/> interface defines a field/property get contrat to get the
            value of a field or a property.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.IGet.Get(System.Object)">
            <summary>
            Gets the value stored in the field/property for the specified target.
            </summary>
            <param name="target">Object to retrieve the field/property from.</param>
            <returns>The value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessor"/> interface defines a field/property get accessor.
            provides <c>Reflection.Emit</c>-generated <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGet"/>
            implementations for drastically improved performance over default late-bind 
            invoke.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessorFactory">
            <summary>
            Factory contact to build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessor"/> for a type.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessorFactory.CreateGetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.IGetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISet">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISet"/> interface defines a field/property set contrat to set the
            value on a field or property.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ISet.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field/property of the specified target.
            </summary>
            <param name="target">Object to set the field/property on.</param>
            <param name="value">Value.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor"/> interface defines a field/property set accessor.
            provides <c>Reflection.Emit</c>-generated <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISet"/> 
            implementations for drastically improved performance over default late-bind 
            invoke.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessorFactory">
            <summary>
            Factory contact to build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor"/> for a type.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessorFactory.CreateSetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldGetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldGetAccessor"/> class provides an reflection get access   
            to a field of a specified target class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldGetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldGetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldGetAccessor.MemberType">
            <summary>
            Gets the type of this member, such as field, property.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the field for the specified target.       
            </summary>
            <param name="target">Object to retrieve the field/property from.</param>
            <returns>The field alue.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldSetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldSetAccessor"/> class provides an reflection set access   
            to a field of a specified target class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldSetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldSetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="fieldName">Name of the field.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldSetAccessor.Name">
            <summary>
            Gets the member name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldSetAccessor.MemberType">
            <summary>
            Gets the type of this member, such as field, property.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionFieldSetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the field of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertyGetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertyGetAccessor"/> class provides an reflection get access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertyGetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertyGetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertyGetAccessor.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertyGetAccessor.MemberType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertyGetAccessor.Get(System.Object)">
            <summary>
            Gets the value stored in the property for 
            the specified target.
            </summary>
            <param name="target">Object to retrieve the property from.</param>
            <returns>Property value.</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertySetAccessor">
            <summary>
            The <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertySetAccessor"/> class provides an reflection set access   
            to a property of a specified target class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertySetAccessor.#ctor(System.Type,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertySetAccessor"/> class.
            </summary>
            <param name="targetType">Type of the target.</param>
            <param name="propertyName">Name of the property.</param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertySetAccessor.Name">
            <summary>
            Gets the property name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertySetAccessor.MemberType">
            <summary>
            Gets the type of this property.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.ReflectionPropertySetAccessor.Set(System.Object,System.Object)">
            <summary>
            Sets the value for the property of the specified target.
            </summary>
            <param name="target">Object to set the property on.</param>
            <param name="value">Property value.</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory">
            <summary>
            A factory to build <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory"/> for a type.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory"/> class.
            </summary>
            <param name="allowCodeGeneration">if set to <c>true</c> [allow code generation].</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory.CreateDynamicPropertySetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory.CreateDynamicFieldSetAccessor(System.Type,System.String)">
            <summary>
            Create a Dynamic ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory.CreatePropertyAccessor(System.Type,System.String)">
            <summary>
            Create a ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory.CreateFieldAccessor(System.Type,System.String)">
            <summary>
            Create a ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">Field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory.CreateReflectionPropertySetAccessor(System.Type,System.String)">
            <summary>
            Create a Reflection ISetAccessor instance for a property
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="propertyName">Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory.CreateReflectionFieldSetAccessor(System.Type,System.String)">
            <summary>
            Create Reflection ISetAccessor instance for a field
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="fieldName">field name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.Members.SetAccessorFactory.CreateSetAccessor(System.Type,System.String)">
            <summary>
            Generate an <see cref="T:SqlBatis.DataMapper.Utilities.Objects.Members.ISetAccessor"/> instance.
            </summary>
            <param name="targetType">Target object type.</param>
            <param name="name">Field or Property name.</param>
            <returns>null if the generation fail</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.ObjectFactory">
            <summary>
            A factory to create objects 
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectFactory.#ctor(System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="allowCodeGeneration"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectFactory.CreateFactory(System.Type,System.Type[])">
            <summary>
            Create a new factory instance for a given type
            </summary>
            <param name="typeToCreate">The type instance to build</param>
            <param name="types">The types of the constructor arguments</param>
            <returns>Returns a new instance factory</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe">
            <summary>
            Description résumée de ObjectProbe.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetReadablePropertyNames(System.Object)">
            <summary>
            Returns an array of the readable properties names exposed by an object
            </summary>
            <param name="obj">The object</param>
            <returns>The properties name</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetWriteableMemberNames(System.Object)">
            <summary>
            Returns an array of the writeable members name exposed by a object
            </summary>
            <param name="obj">The object</param>
            <returns>The members name</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetMemberTypeForSetter(System.Object,System.String)">
            <summary>
             Returns the type that the set expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="obj">The object to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetMemberTypeForSetter(System.Type,System.String)">
            <summary>
             Returns the type that the set expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="type">The class type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetMemberTypeForGetter(System.Object,System.String)">
            <summary>
             Returns the type that the get expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="obj">The object to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetMemberTypeForGetter(System.Type,System.String)">
            <summary>
             Returns the type that the get expects to receive as a parameter when
             setting a member value.
            </summary>
            <param name="type">The type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetMemberInfoForSetter(System.Type,System.String)">
            <summary>
             Returns the MemberInfo of the set member on the specified type.
            </summary>
            <param name="type">The type to check</param>
            <param name="memberName">The name of the member</param>
            <returns>The type of the member</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetArrayMember(System.Object,System.String,SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Gets the value of an array member on the specified object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="indexedName">The array index.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>The member value.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.SetArrayMember(System.Object,System.String,System.Object,SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the array member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="indexedName">Name of the indexed.</param>
            <param name="value">The value.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetMemberValue(System.Object,System.String,SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Return the specified member on an object. 
            </summary>
            <param name="obj">The Object on which to invoke the specified property.</param>
            <param name="memberName">Name of the member.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>An Object representing the return value of the invoked property.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.GetMember(System.Object,System.String,SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Gets the member's value on the specified object.
            </summary>
            <param name="obj">The obj.</param>
            <param name="memberName">Name of the member.</param>
            <param name="accessorFactory">The accessor factory.</param>
            <returns>The member's value</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.SetMemberValue(System.Object,System.String,System.Object,SqlBatis.DataMapper.Utilities.Objects.IObjectFactory,SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the member value.
            </summary>
            <param name="obj">he Object on which to invoke the specified mmber.</param>
            <param name="memberName">Name of the member.</param>
            <param name="memberValue">The member value.</param>
            <param name="objectFactory">The object factory.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.SetMember(System.Object,System.String,System.Object,SqlBatis.DataMapper.Utilities.Objects.Members.AccessorFactory)">
            <summary>
            Sets the member.
            </summary>
            <param name="obj">The obj.</param>
            <param name="memberName">Name of the member.</param>
            <param name="memberValue">The member value.</param>
            <param name="accessorFactory">The accessor factory.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.HasWritableProperty(System.Object,System.String)">
            <summary>
            Checks to see if a Object has a writable property/field be a given name
            </summary>
            <param name="obj"> The object to check</param>
            <param name="propertyName">The property to check for</param>
            <returns>True if the property exists and is writable</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.HasReadableProperty(System.Object,System.String)">
            <summary>
            Checks to see if the Object have a property/field be a given name.
            </summary>
            <param name="obj">The Object on which to invoke the specified property.</param>
            <param name="propertyName">The name of the property to check for.</param>
            <returns>
            True or false if the property exists and is readable.
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ObjectProbe.IsSimpleType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo">
            <summary>
            This class represents a cached set of class definition information that
            allows for easy mapping between property names and get/set methods.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.BINDING_FLAGS_PROPERTY">
            <summary>
            
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.BINDING_FLAGS_FIELD">
            <summary>
            
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.ClassName">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.#cctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.#ctor(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.AddMembers(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.GetSetter(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.GetGetter(System.String)">
            <summary>
            Gets the <see cref="T:System.Reflection.MemberInfo"/>.
            </summary>
            <param name="memberName">Member's name.</param>
            <returns>The <see cref="T:System.Reflection.MemberInfo"/></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.GetSetterType(System.String)">
            <summary>
            Gets the type of the member.
            </summary>
            <param name="memberName">Member's name.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.GetGetterType(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.GetReadableMemberNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.GetWriteableMemberNames">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.HasWritableMember(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.HasReadableMember(System.String)">
            <summary>
            
            </summary>
            <param name="memberName"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.IsKnownType(System.Type)">
            <summary>
            
            </summary>
            <param name="type"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Objects.ReflectionInfo.GetInstance(System.Type)">
            <summary>
            Gets an instance of ReflectionInfo for the specified type.
            </summary>summary>
            <param name="type">The type for which to lookup the method cache.</param>
            <returns>The properties cache for the type</returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Proxy.IProxyGenerator">
            <summary>
            Description résumée de IProxyGenerator.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Resources">
            <summary>
            A class to simplify access to resources.
            
            The file can be loaded from the application root directory 
            (use the resource attribute) 
            or from any valid URL (use the url attribute). 
            For example,to load a fixed path file, use:
            &lt;properties url=”file:///c:/config/my.properties” /&gt;
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Resources.ApplicationBase">
            <summary>
            The name of the directory containing the application
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Resources.BaseDirectory">
            <summary>
            The name of the directory used to probe the assemblies.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Resources.PROTOCOL_SEPARATOR">
            <summary>
            Protocole separator
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetFileSystemResourceWithoutProtocol(System.String)">
            <summary>
            Strips protocol name from the resource name
            </summary>
            <param name="filePath">Name of the resource</param>
            <returns>Name of the resource without protocol name</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetConfigAsXmlDocument(System.String)">
            <summary>
            Get config file
            </summary>
            <param name="resourcePath">
            A config resource path.
            </param>
            <returns>An XmlDocument representation of the config file</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.FileExists(System.String)">
            <summary>
            Determines whether the specified file exists.
            </summary>
            <param name="filePath">The file to check.</param>
            <returns>
            true if the caller has the required permissions and path contains the name of an existing file
            false if the caller has the required permissions and path doesn't contain the name of an existing file
            else exception
            </returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetAsXmlDocument(System.Xml.XmlNode,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Load an XML resource from a location specify by the node.
            </summary>
            <param name="node">An location node</param>
            <param name="properties">the global properties</param>
            <returns>Return the Xml document load.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetValueOfNodeResourceUrl(System.Xml.XmlNode,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Get the path resource of an url or resource location.
            </summary>
            <param name="node">The specification from where to load.</param>
            <param name="properties">the global properties</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetStreamAsXmlDocument(System.IO.Stream)">
            <summary>
            Get XmlDocument from a stream resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetFileInfoAsXmlDocument(System.IO.FileInfo)">
            <summary>
            Get XmlDocument from a FileInfo resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetUriAsXmlDocument(System.Uri)">
            <summary>
            Get XmlDocument from a Uri resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetResourceAsXmlDocument(System.String)">
            <summary>
            Get XmlDocument from relative (from root directory of the application) path resource
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetUrlAsXmlDocument(System.String)">
            <summary>
            Get XmlDocument from absolute path resource
            </summary>
            <param name="url"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetEmbeddedResourceAsXmlDocument(System.String)">
            <summary>
            
            </summary>
            <param name="resource"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.GetFileInfo(System.String)">
            <summary>
            Load a file from a given resource path
            </summary>
            <param name="resourcePath">
            The resource path
            </param>
            <returns>return a FileInfo</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.TypeForName(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo">
            <summary>
            Holds data about a <see cref="T:System.Type"/> and it's
            attendant <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo.FileAssemblySeparator">
            <summary>
            The string that separates file name
            from their attendant <see cref="T:System.Reflection.Assembly"/>
            names in an assembly qualified type name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo.ResourceFileName">
            <summary>
            The resource file name .
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo.OriginalFileName">
            <summary>
            The original name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo.FileName">
            <summary>
            The file name portion.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo.AssemblyName">
            <summary>
            The (unresolved, possibly partial) name of the attandant assembly.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified?
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the FileAssemblyInfo class.
            </summary>
            <param name="unresolvedFileName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.Resources.FileAssemblyInfo.SplitFileAndAssemblyNames(System.String)">
            <summary>
            
            </summary>
            <param name="originalFileName"></param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.ScriptRunner">
            <summary>
            Description résumée de ScriptRunner.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ScriptRunner.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ScriptRunner.RunScript(SqlBatis.DataMapper.IDataSource,System.String)">
            <summary>
            Run an sql script
            </summary>
            <param name="dataSource">The dataSouce that will be used to run the script.</param>
            <param name="sqlScriptPath">a path to an sql script file.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ScriptRunner.RunScript(SqlBatis.DataMapper.IDataSource,System.String,System.Boolean)">
            <summary>
            Run an sql script
            </summary>
            <param name="dataSource">The dataSouce that will be used to run the script.</param>
            <param name="sqlScriptPath">a path to an sql script file.</param>
            <param name="doParse">parse out the statements in the sql script file.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ScriptRunner.ExecuteStatements(SqlBatis.DataMapper.IDataSource,System.Collections.ArrayList)">
            <summary>
            Execute the given sql statements
            </summary>
            <param name="dataSource">The dataSouce that will be used.</param>
            <param name="sqlStatements">An ArrayList of sql statements to execute.</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.ScriptRunner.ParseScript(System.String)">
            <summary>
            Parse and tokenize the sql script into multiple statements
            </summary>
            <param name="script">the script to parse</param>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.StringTokenizer">
            <summary>
            A StringTokenizer java like object 
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.StringTokenizer.#ctor(System.String)">
            <summary>
            Constructs a StringTokenizer on the specified String, using the
            default delimiter set (which is " \t\n\r\f").
            </summary>
            <param name="str">The input String</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.StringTokenizer.#ctor(System.String,System.String)">
            <summary>
            Constructs a StringTokenizer on the specified String, 
            using the specified delimiter set.
            </summary>
            <param name="str">The input String</param>
            <param name="delimiters">The delimiter String</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.StringTokenizer.#ctor(System.String,System.String,System.Boolean)">
            <summary>
            Constructs a StringTokenizer on the specified String, 
            using the specified delimiter set.
            </summary>
            <param name="str">The input String</param>
            <param name="delimiters">The delimiter String</param>
            <param name="returnDelimiters">Returns delimiters as tokens or skip them</param>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.StringTokenizer.GetEnumerator">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.StringTokenizer.TokenNumber">
            <summary>
            Returns the number of tokens in the String using
            the current deliminter set.  This is the number of times
            nextToken() can return before it will generate an exception.
            Use of this routine to count the number of tokens is faster
            than repeatedly calling nextToken() because the substrings
            are not constructed and returned for each token.
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.TypesResolver.CachedTypeResolver">
            <summary>
            Resolves (instantiates) a <see cref="T:System.Type"/> by it's (possibly
            assembly qualified) name, and caches the <see cref="T:System.Type"/>
            instance against the type name.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.CachedTypeResolver._typeCache">
            <summary>
            The cache, mapping type names (<see cref="T:System.String"/> instances) against
            <see cref="T:System.Type"/> instances.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.CachedTypeResolver.#ctor(SqlBatis.DataMapper.Utilities.TypesResolver.ITypeResolver)">
            <summary>
            Creates a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.TypesResolver.CachedTypeResolver"/> class.
            </summary>
            <param name="typeResolver">
            The <see cref="T:SqlBatis.DataMapper.Utilities.TypesResolver.ITypeResolver"/> that this instance will delegate
            actual <see cref="T:System.Type"/> resolution to if a <see cref="T:System.Type"/>
            cannot be found in this instance's <see cref="T:System.Type"/> cache.
            </param>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="typeResolver"/> is <see langword="null"/>.
            </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.CachedTypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.TypesResolver.ITypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this interface is to centralise
            the resolution of type names to <see cref="T:System.Type"/> instances
            beyond that offered by the plain vanilla
            <see cref="M:System.Type.GetType(System.String)"/> method call.
            </p>
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.ITypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry">
            <summary> 
            Provides access to a central registry of aliased <see cref="T:System.Type"/>s.
            </summary>
            <remarks>
            <p>
            Simplifies configuration by allowing aliases to be used instead of
            fully qualified type names.
            </p>
            <p>
            Comes 'pre-loaded' with a number of convenience alias' for the more
            common types; an example would be the '<c>int</c>' (or '<c>Integer</c>'
            for Visual Basic.NET developers) alias for the <see cref="T:System.Int32"/>
            type.
            </p>
            </remarks>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.ArrayListAlias1">
            <summary>
            The alias around the 'list' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.ArrayListAlias2">
            <summary>
            Another alias around the 'list' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.BoolAlias">
            <summary>
            Another alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.BooleanAlias">
            <summary>
            The alias around the 'bool' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.ByteAlias">
            <summary>
            The alias around the 'byte' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.CharAlias">
            <summary>
            The alias around the 'char' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.DateAlias1">
            <summary>
            The alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.DateAlias2">
            <summary>
            Another alias around the 'DateTime' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.DecimalAlias">
            <summary>
            The alias around the 'decimal' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.DoubleAlias">
            <summary>
            The alias around the 'double' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.FloatAlias">
            <summary>
            The alias around the 'float' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.SingleAlias">
            <summary>
            Another alias around the 'float' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.GuidAlias">
            <summary>
            The alias around the 'guid' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.HashtableAlias1">
            <summary>
            The alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.HashtableAlias2">
            <summary>
            Another alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.HashtableAlias3">
            <summary>
            Another alias around the 'Hashtable' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.Int16Alias1">
            <summary>
            The alias around the 'short' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.Int16Alias2">
            <summary>
            Another alias around the 'short' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.Int32Alias1">
            <summary>
            The alias around the 'int' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.Int32Alias2">
            <summary>
            Another alias around the 'int' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.Int32Alias3">
            <summary>
            Another alias around the 'int' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.Int64Alias1">
            <summary>
            The alias around the 'long' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.Int64Alias2">
            <summary>
            Another alias around the 'long' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.UInt16Alias1">
            <summary>
            The alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.UInt16Alias2">
            <summary>
            Another alias around the 'unsigned short' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.UInt32Alias1">
            <summary>
            The alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.UInt32Alias2">
            <summary>
            Another alias around the 'unsigned int' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.UInt64Alias1">
            <summary>
            The alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.UInt64Alias2">
            <summary>
            Another alias around the 'unsigned long' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.SByteAlias">
            <summary>
            The alias around the 'SByte' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.StringAlias">
            <summary>
            The alias around the 'string' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.TimeSpanAlias">
            <summary>
            The alias around the 'TimeSpan' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableInt32Alias">
            <summary>
            The alias around the 'int?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableInt32ArrayAlias">
            <summary>
            The alias around the 'int?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableDecimalAlias">
            <summary>
            The alias around the 'decimal?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableDecimalArrayAlias">
            <summary>
            The alias around the 'decimal?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableCharAlias">
            <summary>
            The alias around the 'char?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableCharArrayAlias">
            <summary>
            The alias around the 'char?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableInt64Alias">
            <summary>
            The alias around the 'long?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableInt64ArrayAlias">
            <summary>
            The alias around the 'long?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableInt16Alias">
            <summary>
            The alias around the 'short?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableInt16ArrayAlias">
            <summary>
            The alias around the 'short?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableUInt32Alias">
            <summary>
            The alias around the 'unsigned int?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableUInt64Alias">
            <summary>
            The alias around the 'unsigned long?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableUInt64ArrayAlias">
            <summary>
            The alias around the 'ulong?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableUInt32ArrayAlias">
            <summary>
            The alias around the 'uint?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableUInt16Alias">
            <summary>
            The alias around the 'unsigned short?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableUInt16ArrayAlias">
            <summary>
            The alias around the 'ushort?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableDoubleAlias">
            <summary>
            The alias around the 'double?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableDoubleArrayAlias">
            <summary>
            The alias around the 'double?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableFloatAlias">
            <summary>
            The alias around the 'float?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableFloatArrayAlias">
            <summary>
            The alias around the 'float?[]' array type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableBoolAlias">
            <summary>
            The alias around the 'bool?' type.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.NullableBoolArrayAlias">
            <summary>
            The alias around the 'bool?[]' array type.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such has no publicly visible
            constructors.
            </p>
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.#cctor">
            <summary>
            Initialises the static properties of the TypeAliasResolver class.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeRegistry.ResolveType(System.String)">
            <summary> 
            Resolves the supplied <paramref name="alias"/> to a <see cref="T:System.Type"/>. 
            </summary> 
            <param name="alias">
            The alias to resolve.
            </param>
            <returns>
            The <see cref="T:System.Type"/> the supplied <paramref name="alias"/> was
            associated with, or <see lang="null"/> if no <see cref="T:System.Type"/> 
            was previously registered for the supplied <paramref name="alias"/>.
            </returns>
            <remarks>The alis name will be convert in lower character before the resolution.</remarks>
            <exception cref="T:System.ArgumentNullException">
            If the supplied <paramref name="alias"/> is <see langword="null"/> or
            contains only whitespace character(s).
            </exception>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver">
            <summary>
            Resolves a <see cref="T:System.Type"/> by name.
            </summary>
            <remarks>
            <p>
            The rationale behind the creation of this class is to centralise the
            resolution of type names to <see cref="T:System.Type"/> instances beyond that
            offered by the plain vanilla System.Type.GetType method call.
            </p>
            </remarks>
            <version>$Id: TypeResolver.cs,v 1.5 2004/09/28 07:51:47 springboy Exp $</version>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.Resolve(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.ResolveGenericType(System.String)">
            <summary>
            Resolves the supplied generic <paramref name="typeName"/>,
            substituting recursively all its type parameters., 
            to a <see cref="T:System.Type"/> instance.
            </summary>
            <param name="typeName">
            The (possibly generic) name of a <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.ResolveType(System.String)">
            <summary>
            Resolves the supplied <paramref name="typeName"/> to a
            <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the supplied <paramref name="typeName"/> could not be resolved
            to a <see cref="T:System.Type"/>.
            </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.LoadTypeDirectlyFromAssembly(SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo)">
            <summary>
            Uses <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            to load an <see cref="T:System.Reflection.Assembly"/> and then the attendant
            <see cref="T:System.Type"/> referred to by the <paramref name="typeInfo"/>
            parameter.
            </summary>
            <remarks>
            <p>
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> is
            deprecated in .NET 2.0, but is still used here (even when this class is
            compiled for .NET 2.0);
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> will
            still resolve (non-.NET Framework) local assemblies when given only the
            display name of an assembly (the behaviour for .NET Framework assemblies
            and strongly named assemblies is documented in the docs for the
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/> method).
            </p>
            </remarks>
            <param name="typeInfo">
            The assembly and type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
            <exception cref="T:System.Exception">
            <see cref="M:System.Reflection.Assembly.LoadWithPartialName(System.String)"/>
            </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.LoadTypeByIteratingOverAllLoadedAssemblies(SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo)">
            <summary>
            Check all assembly
            to load the attendant <see cref="T:System.Type"/> referred to by 
            the <paramref name="typeInfo"/> parameter.
            </summary>
            <param name="typeInfo">
            The type to be loaded.
            </param>
            <returns>
            A <see cref="T:System.Type"/>, or <see lang="null"/>.
            </returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo">
            <summary>
            Holder for the generic arguments when using type parameters.
            </summary>
            <remarks>
            <p>
            Type parameters can be applied to classes, interfaces, 
            structures, methods, delegates, etc...
            </p>
            </remarks>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GENERIC_ARGUMENTS_PREFIX">
            <summary>
            The generic arguments prefix.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GENERIC_ARGUMENTS_SUFFIX">
            <summary>
            The generic arguments suffix.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GENERIC_ARGUMENTS_SEPARATOR">
            <summary>
            The character that separates a list of generic arguments.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the GenericArgumentsInfo class.
            </summary>
            <param name="value">
            The string value to parse looking for a generic definition
            and retrieving its generic arguments.
            </param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GenericTypeName">
            <summary>
            The (unresolved) generic type name portion 
            of the original value when parsing a generic type.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.ContainsGenericArguments">
            <summary>
            Is the string value contains generic arguments ?
            </summary>
            <remarks>
            <p>
            A generic argument can be a type parameter or a type argument.
            </p>
            </remarks>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.IsGenericDefinition">
            <summary>
            Is generic arguments only contains type parameters ?
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.GenericArgumentsInfo.GetGenericArguments">
            <summary>
            Returns an array of unresolved generic arguments types.
            </summary>
            <remarks>
            <p>
            A empty string represents a type parameter that 
            did not have been substituted by a specific type.
            </p>
            </remarks>
            <returns>
            An array of strings that represents the unresolved generic 
            arguments types or an empty array if not generic.
            </returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo">
            <summary>
            Holds data about a <see cref="T:System.Type"/> and it's
            attendant <see cref="T:System.Reflection.Assembly"/>.
            </summary>
        </member>
        <member name="F:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.TYPE_ASSEMBLY_SEPARATOR">
            <summary>
            The string that separates a <see cref="T:System.Type"/> name
            from the name of it's attendant <see cref="T:System.Reflection.Assembly"/>
            in an assembly qualified type name.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.#ctor(System.String)">
            <summary>
            Creates a new instance of the TypeAssemblyInfo class.
            </summary>
            <param name="unresolvedTypeName">
            The unresolved name of a <see cref="T:System.Type"/>.
            </param>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.TypeName">
            <summary>
            The (unresolved) type name portion of the original type name.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.AssemblyName">
            <summary>
            The (unresolved, possibly partial) name of the attandant assembly.
            </summary>
        </member>
        <member name="P:SqlBatis.DataMapper.Utilities.TypesResolver.TypeResolver.TypeAssemblyInfo.IsAssemblyQualified">
            <summary>
            Is the type name being resolved assembly qualified?
            </summary>
        </member>
        <member name="T:SqlBatis.DataMapper.Utilities.TypeUtils">
            <summary>
             Helper methods with regard to type.
            </summary>
            <remarks>
            <p>
            Mainly for internal use within the framework.
            </p>
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypeUtils.#ctor">
            <summary>
            Creates a new instance of the <see cref="T:SqlBatis.DataMapper.Utilities.TypeUtils"/> class.
            </summary>
            <remarks>
            <p>
            This is a utility class, and as such exposes no public constructors.
            </p>
            </remarks>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypeUtils.ResolveType(System.String)">
            <summary>
            Resolves the supplied type name into a <see cref="T:System.Type"/>
            instance.
            </summary>
            <param name="typeName">
            The (possibly partially assembly qualified) name of a
            <see cref="T:System.Type"/>.
            </param>
            <returns>
            A resolved <see cref="T:System.Type"/> instance.
            </returns>
            <exception cref="T:System.TypeLoadException">
            If the type cannot be resolved.
            </exception>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypeUtils.InstantiatePrimitiveType(System.TypeCode)">
            <summary>
            Instantiate a 'Primitive' Type.
            </summary>
            <param name="typeCode">a typeCode.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypeUtils.InstantiateNullableType(System.Type)">
            <summary>
            Instantiate a Nullable Type.
            </summary>
            <param name="type">The nullable type.</param>
            <returns>An object.</returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Utilities.TypeUtils.IsImplementGenericIListInterface(System.Type)">
            <summary>
            Determines whether the specified type is implement generic Ilist interface.
            </summary>
            <param name="type">The type.</param>
            <returns>
            	<c>true</c> if the specified type is implement generic Ilist interface; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:SqlBatis.DataMapper.Xml.NodeUtils">
            <summary>
            Summary description for NodeUtils.
            </summary>
        </member>
        <member name="M:SqlBatis.DataMapper.Xml.NodeUtils.GetStringAttribute(System.Collections.Specialized.NameValueCollection,System.String)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Xml.NodeUtils.GetStringAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.String)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Xml.NodeUtils.GetByteAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Byte)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Xml.NodeUtils.GetIntAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Int32)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Xml.NodeUtils.GetBooleanAttribute(System.Collections.Specialized.NameValueCollection,System.String,System.Boolean)">
            <summary>
            Searches for the attribute with the specified name in this attributes list.
            </summary>
            <param name="attributes"></param>
            <param name="name">The key</param>
            <param name="def">The default value to be returned if the attribute is not found.</param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Xml.NodeUtils.ParseAttributes(System.Xml.XmlNode)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Xml.NodeUtils.ParseAttributes(System.Xml.XmlNode,System.Collections.Specialized.NameValueCollection)">
            <summary>
            
            </summary>
            <param name="node"></param>
            <param name="variables"></param>
            <returns></returns>
        </member>
        <member name="M:SqlBatis.DataMapper.Xml.NodeUtils.ParsePropertyTokens(System.String,System.Collections.Specialized.NameValueCollection)">
            <summary>
            Replace properties by their values in the given string
            </summary>
            <param name="str"></param>
            <param name="properties"></param>
            <returns></returns>
        </member>
    </members>
</doc>
